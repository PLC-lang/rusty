# Override the compile command to include the custom library
import os.path

# Access the same parameters that the main configuration uses
stdlibLocation = lit_config.params["LIB"]
compilerLocation = lit_config.params["COMPILER"]
rustyRootDirectory = "/home/michael/dev/rusty"

test_dir = os.path.dirname(__file__)
lib_path = os.path.abspath(test_dir)

# Build on the existing compile command but add our custom library
compile = f'{compilerLocation}'
compile = f'{compile} -o /tmp/%basename_t.out'
compile = f'{compile} -liec61131std -L{stdlibLocation}/lib -i "{stdlibLocation}/include/*.st"'
compile = f'{compile} -i "{rustyRootDirectory}/tests/lit/util/*.pli"'
compile = f'{compile} -L{lib_path} -lfoo -i {lib_path}/header.pli'
compile = f'{compile} --linker=cc'

# Log the compile command
lit_config.note(f"Compile command: {compile}")

# Update the run command to include the custom library path
run_cmd = f'LD_LIBRARY_PATH="{stdlibLocation}/lib:{lib_path}" /tmp/%basename_t.out'

# Override the substitutions
config.substitutions = [s for s in config.substitutions if s[0] not in ['%COMPILE', '%RUN']]
config.substitutions.append(('%COMPILE', f'{compile}'))
config.substitutions.append(('%RUN', f'{run_cmd}'))