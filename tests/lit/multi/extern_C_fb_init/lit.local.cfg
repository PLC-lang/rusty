# Override the compile command to include the custom library
import os.path
import subprocess

# Access the same parameters that the main configuration uses
stdlibLocation = lit_config.params["LIB"]
compilerLocation = lit_config.params["COMPILER"]

# Derive rusty root directory using relative paths
test_dir = os.path.dirname(__file__)
source_path = os.path.abspath(test_dir)
rustyRootDirectory = os.path.abspath(os.path.join(test_dir, "..", "..", "..", ".."))

# Use tmp directory for compiled library
tmp_lib_path = "/tmp"
tmp_lib_file = f"{tmp_lib_path}/libfoo.so"

# Compile foo.c to libfoo.so in the tmp directory
try:
    lit_config.note(f"Compiling foo.c into {tmp_lib_file}...")
    gcc_cmd = f"gcc -shared -fPIC -o {tmp_lib_file} {source_path}/foo.c"
    lit_config.note(f"Running: {gcc_cmd}")
    result = subprocess.run(gcc_cmd, shell=True, check=True, 
                           stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    lit_config.note(f"Successfully compiled {tmp_lib_file}")
except subprocess.CalledProcessError as e:
    lit_config.error(f"Failed to compile foo.c: {e.stderr.decode()}")
    raise

# Build on the existing compile command but add our custom library
compile = f'{compilerLocation}'
compile = f'{compile} -o /tmp/%basename_t.out'
compile = f'{compile} -liec61131std -L{stdlibLocation}/lib -i "{stdlibLocation}/include/*.st"'
compile = f'{compile} -i "{rustyRootDirectory}/tests/lit/util/*.pli"'
compile = f'{compile} -L{tmp_lib_path} -lfoo -i {source_path}/header.pli'
compile = f'{compile} --linker=cc'

# Log the compile command
lit_config.note(f"Compile command: {compile}")

# Update the run command to include the custom library path
run_cmd = f'LD_LIBRARY_PATH="{stdlibLocation}/lib:{tmp_lib_path}" /tmp/%basename_t.out'

# Override the substitutions
config.substitutions = [s for s in config.substitutions if s[0] not in ['%COMPILE', '%RUN']]
config.substitutions.append(('%COMPILE', f'{compile}'))
config.substitutions.append(('%RUN', f'{run_cmd}'))