name: Build

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  toolchain-version: 1.54.0
  llvm-version: "11.0.1"

jobs:
  check: 
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.toolchain-version }}
          profile: minimal
          override: true

      - name: Install LLVM
        uses: ghaith/install-llvm-action@latest
        with:
          version: ${{ env.llvm-version }}
          directory: "./llvm"

      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test
    runs-on: ${{ matrix.config.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        config:
          - { 
            os: "ubuntu-latest",
            dir: linux,
            artifacts: "rustyc"
          }
          - { 
            os: "windows-latest",
            dir: windows,
            artifacts: "rustyc.exe rustyc.pdb"
          }
    steps:

      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.toolchain-version }}
          profile: minimal
          override: true

      - name: Install LLVM
        uses: ghaith/install-llvm-action@latest
        with:
          version: ${{ env.llvm-version }}
          directory: "./llvm"
          
      - name: Cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -- --nocapture

      - run: mkdir -p ${{ matrix.config.dir }}

      - name: Move artifacts
        env:
          ARTIFACTS: ${{ matrix.config.artifacts }}
          OUT_DIR: ${{ matrix.config.dir }}
        run: |
          import os
          artifacts = os.environ['ARTIFACTS'].split()
          for artifact in artifacts:
            src = "target/debug/%s" % artifact
            dst = os.environ['OUT_DIR'] + "/" + artifact
            os.rename(src, dst)
        shell: python

      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.config.dir }}-debug
          path: ${{ matrix.config.dir }}

  style:
    name: Check Style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.toolchain-version }}
          profile: minimal
          override: true
          components: clippy, rustfmt

      - name: Install LLVM
        uses: ghaith/install-llvm-action@latest
        with:
          version: ${{ env.llvm-version }}
          directory: "./llvm"

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -D warnings

  coverage:
    name: Run Coverage 
    runs-on: ubuntu-latest
    needs: check
    env:
      RUSTFLAGS: "-Zinstrument-coverage"
      LLVM_PROFILE_FILE: "rusty-%p-%m.profraw"

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview
          override: true

      - name: Install LLVM
        uses: ghaith/install-llvm-action@latest
        with:
          version: ${{ env.llvm-version }}

      - name: Clean
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose

      - name: Run Tests for Coverage
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast --verbose
      
      - name: Install grcov
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          version: latest
          use-tool-cache: true
      
      - name: Generate coverage report
        run: |
          grcov . --binary-path ./target/debug/ -s . -t lcov --branch \
            --ignore "/*" \
            --ignore "src/main.rs" \
            --ignore "src/*/tests.rs" \
            --ignore "src/*/tests/*" \
            --ignore "src/lexer/tokens.rs" \
            --ignore-not-existing -o lcov.info


      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
            files: lcov.info 

      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: lcov.info
