name: Build Linux

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: rusty

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    container: ghcr.io/plc-lang/rust-llvm:latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Check
        run: |
          ./scripts/build.sh --check

  test-linux:
    name: Test Linux
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            os: "ubuntu-latest"
          }
          - {
            os: "ubuntu-24.04-arm"
          }
    container: ghcr.io/plc-lang/rust-llvm:latest
    steps:
      - uses: actions/checkout@v3

      - name: Cargo test
        shell: bash
        run: |
          echo "Build command : ./scripts/build.sh --build --test"
          ./scripts/build.sh --build --test

  package-linux:
    name: Package Linux
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            os: "ubuntu-latest",
            arch: "x86_64"
          }
          - {
            os: "ubuntu-24.04-arm",
            arch: "aarch64"
          }
    container: ghcr.io/plc-lang/rust-llvm:latest
    steps:
      - uses: actions/checkout@v3

      - name: Release Build
        shell: bash
        run: |
          echo "Build command : ./scripts/build.sh --build --release"
          ./scripts/build.sh --build --release --package \
          --target ${{ matrix.config.arch }}-linux-gnu

      - uses: actions/upload-artifact@master
        with:
          name: plc
          path: target/release/plc

      - uses: actions/upload-artifact@master
        with:
          name: schema
          path: compiler/plc_project/schema

      - uses: actions/upload-artifact@master
        with:
          name: stdlib
          path: output
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-image:
    runs-on: ${{ matrix.config.os }}
    needs: package-linux
    strategy:
      matrix:
        config:
          - {
            os: "ubuntu-latest",
            version: "linux",
            arch: "x86_64"
          }
          - {
            os: "ubuntu-24.04-arm",
            version: "linux",
            arch: "aarch64"
          }
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Download plc artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/


      - name: Build image
        shell: bash
        run: docker buildx build . --platform ${{matrix.config.version}}/${{matrix.config.arch}}  --file Dockerfile --tag $IMAGE_NAME

      - name: Log in to registry
        if: ${{ github.event_name != 'pull_request' }}
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        shell: bash
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Extract branch name
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          #Add the platform to the version
          VERSION=$VERSION-${{ matrix.config.arch }}
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  push-multiplatform:
    name: Push multi platform
    needs: build-image
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Log in to registry
        if: ${{ github.event_name != 'pull_request' }}
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Get images
        shell: bash
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_NAME=$IMAGE_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker manifest create $IMAGE_ID:$VERSION $IMAGE_ID$VERSION-aarch64 $IMAGE_ID:$VERSION-x86_64
          docker manifest push $IMAGE_ID:$VERSION

  style:
    name: Check Style
    runs-on: ubuntu-latest
    container: ghcr.io/plc-lang/rust-llvm:latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Checks
        run: |
          ./scripts/build.sh --check-style

  coverage:
    name: Run Coverage
    runs-on: ubuntu-latest
    container: ghcr.io/plc-lang/rust-llvm:latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Checks
        run: |
          ./scripts/build.sh --coverage

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: lcov.info
