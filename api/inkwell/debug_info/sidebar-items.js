window.SIDEBAR_ITEMS = {"enum":[["DWARFEmissionKind","The amount of debug information to emit. Corresponds to `LLVMDWARFEmissionKind` enum from LLVM."],["DWARFSourceLanguage","Source languages known by DWARF. Corresponds to `LLVMDWARFSourceLanguage` enum from LLVM."]],"fn":[["debug_metadata_version","Gets the version of debug metadata produced by the current LLVM version."]],"struct":[["DIBasicType","A primitive debug info type created by `create_basic_type` method of `DebugInfoBuilder`"],["DICompileUnit","Compilation unit scope for debug info"],["DICompositeType","A wrapper around an array of types, such as a union or struct."],["DIDerivedType","A wrapper around a single type, such as a typedef or member type."],["DIExpression","https://llvm.org/docs/LangRef.html#diexpression"],["DIFile","Source file scope for debug info"],["DIGlobalVariableExpression",""],["DILexicalBlock","Lexical block scope for debug info"],["DILocalVariable","Metadata representing a variable inside a scope"],["DILocation","A debug location within the source code. Contains the following information:"],["DINamespace","Namespace scope for debug info"],["DIScope","Any kind of debug information scope (i.e. visibility of a source code symbol). Scopes are created by special `DebugInfoBuilder` methods (eg `create_lexical_block`) and can be turned into a `DIScope` with the `AsDIScope::as_debug_info_scope` trait method."],["DISubprogram","Function body scope for debug info"],["DISubroutineType","Metadata representing the type of a function"],["DIType","Any kind of debug info type"],["DebugInfoBuilder","A builder object to create debug info metadata. Used along with `Builder` while producing IR. Created by `Module::create_debug_info_builder`. See `debug_info` module level documentation for more."]],"trait":[["AsDIScope","Specific scopes (i.e. `DILexicalBlock`) can be turned into a `DIScope` with the `AsDIScope::as_debug_info_scope` trait method."],["DIFlagsConstants",""]],"type":[["DIFlags",""],["LLVMDWARFTypeEncoding",""]]};