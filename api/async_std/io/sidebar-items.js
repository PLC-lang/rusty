window.SIDEBAR_ITEMS = {"enum":[["ErrorKind","A list specifying general categories of I/O error."],["SeekFrom","Enumeration of possible methods to seek within an I/O object."]],"fn":[["copy","Copies the entire contents of a reader into a writer."],["empty","Creates a reader that contains no data."],["repeat","Creates an instance of a reader that infinitely repeats one byte."],["sink","Creates a writer that consumes and drops all data."],["stderr","Constructs a new handle to the standard error of the current process."],["stdin","Constructs a new handle to the standard input of the current process."],["stdout","Constructs a new handle to the standard output of the current process."],["timeout","Awaits an I/O future or times out after a duration of time."]],"mod":[["prelude","The async I/O prelude."]],"struct":[["BufReader","Adds buffering to any reader."],["BufWriter","Wraps a writer and buffers its output."],["Bytes","A stream over `u8` values of a reader."],["Chain","Adaptor to chain together two readers."],["Cursor","A `Cursor` wraps an in-memory buffer and provides it with a `Seek` implementation."],["Empty","A reader that contains no data."],["Error","The error type for I/O operations of the `Read`, `Write`, `Seek`, and associated traits."],["IntoInnerError","An error returned by `into_inner` which combines an error that happened while writing out the buffer, and the buffered writer object which may be used to recover from the condition."],["IoSlice","A buffer type used with `Write::write_vectored`."],["IoSliceMut","A buffer type used with `Read::read_vectored`."],["Lines","A stream of lines in a byte stream."],["Repeat","A reader which yields one byte over and over and over and over and over andâ€¦"],["Sink","A writer that consumes and drops all data."],["Split","A stream over the contents of an instance of `BufRead` split on a particular byte."],["Stderr","A handle to the standard error of the current process."],["Stdin","A handle to the standard input of the current process."],["Stdout","A handle to the standard output of the current process."],["Take","Reader adaptor which limits the bytes read from an underlying reader."]],"trait":[["BufRead","Read bytes asynchronously."],["Read","Read bytes asynchronously."],["ReadExt","Extension methods for `Read`."],["Seek","Seek bytes asynchronously."],["Write","Write bytes asynchronously."],["WriteExt","Extension methods for `Write`."]],"type":[["Result","A specialized `Result` type for I/O operations."]]};