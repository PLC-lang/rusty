window.SIDEBAR_ITEMS = {"fn":[["empty","Creates a stream that doesn’t yield any items."],["from_fn","Creates a new stream where to produce each new element a provided closure is called."],["from_iter","Converts an iterator into a stream."],["once","Creates a stream that yields a single item."],["repeat","Creates a stream that yields the same item repeatedly."],["repeat_with","Creates a new stream that repeats elements of type `A` endlessly by applying the provided closure."]],"struct":[["Chain","A stream that chains two streams one after another."],["Cloned","A stream that clones the elements of an underlying stream."],["Copied","A stream that copies the elements of an underlying stream."],["Empty","A stream that doesn’t yield any items."],["Filter","A stream to filter elements of another stream with a predicate."],["FromFn","A stream that yields elements by calling a closure."],["FromIter","A stream that was created from iterator."],["Fuse","A stream that yields `None` forever after the underlying stream yields `None` once."],["Inspect","A stream that does something with each element of another stream."],["Map","A stream that maps value of another stream with a function."],["Once","A stream that yields a single item."],["Repeat","A stream that yields the same item repeatedly."],["RepeatWith","A stream that repeats elements of type `T` endlessly by applying a provided closure."],["Scan","A stream to maintain state while polling another stream."],["Skip","A stream to skip first n elements of another stream."],["SkipWhile","A stream to skip elements of another stream based on a predicate."],["StepBy","A stream that steps a given amount of elements of another stream."],["Take","A stream that yields the first `n` items of another stream."],["TakeWhile","A stream that yields elements based on a predicate."],["Zip","A stream that takes items from two other streams simultaneously."]],"trait":[["Stream","A stream of values produced asynchronously."],["StreamExt","Extension methods for `Stream`."]]};