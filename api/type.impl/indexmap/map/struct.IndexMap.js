(function() {
    var type_impls = Object.fromEntries([["rusty",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#97-101\">source</a><a href=\"#impl-Clone-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#103\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#110\">source</a><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#142-145\">source</a><a href=\"#impl-Debug-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#148\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1545-1547\">source</a><a href=\"#impl-Default-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1550\">source</a><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Return an empty <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a></p>\n</div></details></div></details>","Default","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(%26K,+%26V)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1531-1535\">source</a><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a V</a>)&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1540\">source</a><a href=\"#method.extend\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iterable: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a V</a>)&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend the map with all key-value pairs in the iterable.</p>\n<p>See the first extend method for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.82.0/src/core/iter/traits/collect.rs.html#454\">source</a><a href=\"#method.extend_one\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.82.0/src/core/iter/traits/collect.rs.html#462\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(&'a K, &'a V)>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1498-1501\">source</a><a href=\"#impl-Extend%3C(K,+V)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1512\">source</a><a href=\"#method.extend\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iterable: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend the map with all key-value pairs in the iterable.</p>\n<p>This is equivalent to calling <a href=\"indexmap/map/struct.IndexMap.html#method.insert\" title=\"method indexmap::map::IndexMap::insert\"><code>insert</code></a> for each of\nthem in order, which means that for keys that already existed\nin the map, their value is updated but it keeps the existing order.</p>\n<p>New keys are inserted in the order they appear in the sequence. If\nequivalents of a key occur more than once, the last corresponding value\nprevails.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.82.0/src/core/iter/traits/collect.rs.html#454\">source</a><a href=\"#method.extend_one\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.82.0/src/core/iter/traits/collect.rs.html#462\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">๐ฌ</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(K, V)>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1459-1462\">source</a><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1469\">source</a><a href=\"#method.from_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterable: I) -&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an <code>IndexMap</code> from the sequence of key-value pairs in the\niterable.</p>\n<p><code>from_iter</code> uses the same logic as <code>extend</code>. See\n<a href=\"indexmap/map/struct.IndexMap.html#method.extend\" title=\"method indexmap::map::IndexMap::extend\"><code>extend</code></a> for more details.</p>\n</div></details></div></details>","FromIterator<(K, V)>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C%26Q%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1317-1320\">source</a><a href=\"#impl-Index%3C%26Q%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, Q, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"docblock\"><p>Access <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a> values corresponding to a key.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\n<span class=\"kw\">for </span>word <span class=\"kw\">in </span><span class=\"string\">\"Lorem ipsum dolor sit amet\"</span>.split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_uppercase());\n}\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"lorem\"</span>], <span class=\"string\">\"LOREM\"</span>);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"ipsum\"</span>], <span class=\"string\">\"IPSUM\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">โ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, map[<span class=\"string\">\"bar\"</span>]); <span class=\"comment\">// panics!</span></code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1327\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the supplied <code>key</code>.</p>\n<p><em><strong>Panics</strong></em> if <code>key</code> is not present in the map.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1322\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<&Q>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-Index%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;)&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    range: (<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;),\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<(Bound<usize>, Bound<usize>)>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CRange%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-Index%3CRange%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Range<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-Index%3CRangeFrom%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<RangeFrom<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CRangeFull%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-Index%3CRangeFull%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<RangeFull>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<RangeInclusive<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CRangeTo%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-Index%3CRangeTo%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<RangeTo<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(\n    &amp;self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<RangeToInclusive<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1406\">source</a><a href=\"#impl-Index%3Cusize%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"docblock\"><p>Access <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a> values at indexed positions.</p>\n<p>See <a href=\"indexmap/map/iter/struct.Keys.html#impl-Index%3Cusize%3E-for-Keys%3C&#x27;a,+K,+V%3E\" title=\"struct indexmap::map::iter::Keys\"><code>Index&lt;usize&gt; for Keys</code></a> to access a mapโs keys instead.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\n<span class=\"kw\">for </span>word <span class=\"kw\">in </span><span class=\"string\">\"Lorem ipsum dolor sit amet\"</span>.split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_uppercase());\n}\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"number\">0</span>], <span class=\"string\">\"LOREM\"</span>);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"number\">1</span>], <span class=\"string\">\"IPSUM\"</span>);\nmap.reverse();\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"number\">0</span>], <span class=\"string\">\"AMET\"</span>);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"number\">1</span>], <span class=\"string\">\"SIT\"</span>);\nmap.sort_keys();\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"number\">0</span>], <span class=\"string\">\"AMET\"</span>);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"number\">1</span>], <span class=\"string\">\"DOLOR\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">โ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, map[<span class=\"number\">10</span>]); <span class=\"comment\">// panics!</span></code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1412\">source</a><a href=\"#method.index\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value at the supplied <code>index</code>.</p>\n<p><em><strong>Panics</strong></em> if <code>index</code> is out of bounds.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1407\">source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details></div></details>","Index<usize>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#180\">source</a><a href=\"#impl-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#186\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.with_capacity_and_hasher\" class=\"fn\">with_capacity_and_hasher</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, hash_builder: S) -&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new map with capacity for <code>n</code> key-value pairs. (Does not\nallocate if <code>n</code> is zero.)</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#201\">source</a><h4 class=\"code-header\">pub const fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.with_hasher\" class=\"fn\">with_hasher</a>(hash_builder: S) -&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new map with <code>hash_builder</code>.</p>\n<p>This function is <code>const</code>, so it\ncan be called in <code>static</code> contexts.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#214\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of elements the map can hold without reallocating.</p>\n<p>This number is a lower bound; the map might be able to hold more,\nbut is guaranteed to be able to hold at least this many.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#219\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.hasher\" class=\"fn\">hasher</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;S</a></h4></section></summary><div class=\"docblock\"><p>Return a reference to the mapโs <code>BuildHasher</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#227\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of key-value pairs in the map.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#235\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the map contains no elements.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#240\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.Iter.html\" title=\"struct indexmap::map::iter::Iter\">Iter</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator over the key-value pairs of the map, in their order</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#245\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.IterMut.html\" title=\"struct indexmap::map::iter::IterMut\">IterMut</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator over the key-value pairs of the map, in their order</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#250\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.keys\" class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.Keys.html\" title=\"struct indexmap::map::iter::Keys\">Keys</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator over the keys of the map, in their order</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_keys\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#255\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.into_keys\" class=\"fn\">into_keys</a>(self) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.IntoKeys.html\" title=\"struct indexmap::map::iter::IntoKeys\">IntoKeys</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Return an owning iterator over the keys of the map, in their order</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#260\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.values\" class=\"fn\">values</a>(&amp;self) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.Values.html\" title=\"struct indexmap::map::iter::Values\">Values</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator over the values of the map, in their order</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#266\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.values_mut\" class=\"fn\">values_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.ValuesMut.html\" title=\"struct indexmap::map::iter::ValuesMut\">ValuesMut</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator over mutable references to the values of the map,\nin their order</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_values\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#271\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.into_values\" class=\"fn\">into_values</a>(self) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.IntoValues.html\" title=\"struct indexmap::map::iter::IntoValues\">IntoValues</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Return an owning iterator over the values of the map, in their order</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#278\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all key-value pairs in the map, while preserving its capacity.</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#285\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the map, keeping the first <code>len</code> elements and dropping the rest.</p>\n<p>If <code>len</code> is greater than the mapโs current length, this has no effect.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#302-304\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.Drain.html\" title=\"struct indexmap::map::iter::Drain\">Drain</a>&lt;'_, K, V&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Clears the <code>IndexMap</code> in the given index range, returning those\nkey-value pairs as a drain iterator.</p>\n<p>The range may be any type that implements <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\"><code>RangeBounds&lt;usize&gt;</code></a>,\nincluding all of the <code>std::ops::Range*</code> types, or even a tuple pair of\n<code>Bound</code> start and end values. To drain the map entirely, use <code>RangeFull</code>\nlike <code>map.drain(..)</code>.</p>\n<p>This shifts down all entries following the drained range to fill the\ngap, and keeps the allocated memory for reuse.</p>\n<p><em><strong>Panics</strong></em> if the starting point is greater than the end point or if\nthe end point is greater than the length of the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#316-318\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated map containing the elements in the range\n<code>[at, len)</code>. After the call, the original map will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<p><em><strong>Panics</strong></em> if <code>at &gt; len</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#329\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserve capacity for <code>additional</code> more key-value pairs.</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#341\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserve capacity for <code>additional</code> more key-value pairs, without over-allocating.</p>\n<p>Unlike <code>reserve</code>, this does not deliberately over-allocate the entry capacity to avoid\nfrequent re-allocations. However, the underlying data structures may still have internal\ncapacity requirements, and the allocator itself may give more space than requested, so this\ncannot be relied upon to be precisely minimal.</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#348\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"indexmap/struct.TryReserveError.html\" title=\"struct indexmap::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to reserve capacity for <code>additional</code> more key-value pairs.</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve_exact\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#360\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"indexmap/struct.TryReserveError.html\" title=\"struct indexmap::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to reserve capacity for <code>additional</code> more key-value pairs, without over-allocating.</p>\n<p>Unlike <code>try_reserve</code>, this does not deliberately over-allocate the entry capacity to avoid\nfrequent re-allocations. However, the underlying data structures may still have internal\ncapacity requirements, and the allocator itself may give more space than requested, so this\ncannot be relied upon to be precisely minimal.</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#367\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrink the capacity of the map as much as possible.</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#374\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrink the capacity of the map with a lower limit.</p>\n<p>Computes in <strong>O(n)</strong> time.</p>\n</div></details></div></details>",0,"rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#379-382\">source</a><a href=\"#impl-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#398\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, key: K, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair in the map.</p>\n<p>If an equivalent key already exists in the map: the key remains and\nretains in its place in the order, its corresponding value is updated\nwith <code>value</code>, and the older value is returned inside <code>Some(_)</code>.</p>\n<p>If no equivalent key existed in the map: the new key-value pair is\ninserted, last in order, and <code>None</code> is returned.</p>\n<p>Computes in <strong>O(1)</strong> time (amortized average).</p>\n<p>See also <a href=\"indexmap/map/struct.IndexMap.html#method.entry\" title=\"method indexmap::map::IndexMap::entry\"><code>entry</code></a> if you want to insert <em>or</em> modify,\nor <a href=\"indexmap/map/struct.IndexMap.html#method.insert_full\" title=\"method indexmap::map::IndexMap::insert_full\"><code>insert_full</code></a> if you need to get the index of\nthe corresponding key-value pair.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_full\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#414\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.insert_full\" class=\"fn\">insert_full</a>(&amp;mut self, key: K, value: V) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;)</h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair in the map, and get their index.</p>\n<p>If an equivalent key already exists in the map: the key remains and\nretains in its place in the order, its corresponding value is updated\nwith <code>value</code>, and the older value is returned inside <code>(index, Some(_))</code>.</p>\n<p>If no equivalent key existed in the map: the new key-value pair is\ninserted, last in order, and <code>(index, None)</code> is returned.</p>\n<p>Computes in <strong>O(1)</strong> time (amortized average).</p>\n<p>See also <a href=\"indexmap/map/struct.IndexMap.html#method.entry\" title=\"method indexmap::map::IndexMap::entry\"><code>entry</code></a> if you want to insert <em>or</em> modify.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_sorted\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#438-440\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.insert_sorted\" class=\"fn\">insert_sorted</a>(&amp;mut self, key: K, value: V) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;)<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair in the map at its ordered position among sorted keys.</p>\n<p>This is equivalent to finding the position with\n<a href=\"indexmap/map/struct.IndexMap.html#method.binary_search_keys\" title=\"method indexmap::map::IndexMap::binary_search_keys\"><code>binary_search_keys</code></a>, then either updating\nit or calling <a href=\"indexmap/map/struct.IndexMap.html#method.insert_before\" title=\"method indexmap::map::IndexMap::insert_before\"><code>insert_before</code></a> for a new key.</p>\n<p>If the sorted key is found in the map, its corresponding value is\nupdated with <code>value</code>, and the older value is returned inside\n<code>(index, Some(_))</code>. Otherwise, the new key-value pair is inserted at\nthe sorted position, and <code>(index, None)</code> is returned.</p>\n<p>If the existing keys are <strong>not</strong> already sorted, then the insertion\nindex is unspecified (like <a href=\"https://doc.rust-lang.org/1.82.0/std/primitive.slice.html#method.binary_search\" title=\"method slice::binary_search\"><code>slice::binary_search</code></a>), but the key-value\npair is moved to or inserted at that position regardless.</p>\n<p>Computes in <strong>O(n)</strong> time (average). Instead of repeating calls to\n<code>insert_sorted</code>, it may be faster to call batched <a href=\"indexmap/map/struct.IndexMap.html#method.insert\" title=\"method indexmap::map::IndexMap::insert\"><code>insert</code></a>\nor <a href=\"indexmap/map/struct.IndexMap.html#method.extend\" title=\"method indexmap::map::IndexMap::extend\"><code>extend</code></a> and only call <a href=\"indexmap/map/struct.IndexMap.html#method.sort_keys\" title=\"method indexmap::map::IndexMap::sort_keys\"><code>sort_keys</code></a>\nor <a href=\"indexmap/map/struct.IndexMap.html#method.sort_unstable_keys\" title=\"method indexmap::map::IndexMap::sort_unstable_keys\"><code>sort_unstable_keys</code></a> once.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_before\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#496\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.insert_before\" class=\"fn\">insert_before</a>(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>,\n    key: K,\n    value: V,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;)</h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair in the map before the entry at the given index, or at the end.</p>\n<p>If an equivalent key already exists in the map: the key remains and\nis moved to the new position in the map, its corresponding value is updated\nwith <code>value</code>, and the older value is returned inside <code>Some(_)</code>. The returned index\nwill either be the given index or one less, depending on how the entry moved.\n(See <a href=\"indexmap/map/struct.IndexMap.html#method.shift_insert\" title=\"method indexmap::map::IndexMap::shift_insert\"><code>shift_insert</code></a> for different behavior here.)</p>\n<p>If no equivalent key existed in the map: the new key-value pair is\ninserted exactly at the given index, and <code>None</code> is returned.</p>\n<p><em><strong>Panics</strong></em> if <code>index</code> is out of bounds.\nValid indices are <code>0..=map.len()</code> (inclusive).</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n<p>See also <a href=\"indexmap/map/struct.IndexMap.html#method.entry\" title=\"method indexmap::map::IndexMap::entry\"><code>entry</code></a> if you want to insert <em>or</em> modify,\nperhaps only using the index for new entries with <a href=\"indexmap/map/core/entry/struct.VacantEntry.html#method.shift_insert\" title=\"method indexmap::map::core::entry::VacantEntry::shift_insert\"><code>VacantEntry::shift_insert</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: IndexMap&lt;char, ()&gt; = (<span class=\"string\">'a'</span>..=<span class=\"string\">'z'</span>).map(|c| (c, ())).collect();\n\n<span class=\"comment\">// The new key '*' goes exactly at the given index.\n</span><span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.insert_before(<span class=\"number\">10</span>, <span class=\"string\">'*'</span>, ()), (<span class=\"number\">10</span>, <span class=\"prelude-val\">None</span>));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n\n<span class=\"comment\">// Moving the key 'a' up will shift others down, so this moves *before* 10 to index 9.\n</span><span class=\"macro\">assert_eq!</span>(map.insert_before(<span class=\"number\">10</span>, <span class=\"string\">'a'</span>, ()), (<span class=\"number\">9</span>, <span class=\"prelude-val\">Some</span>(())));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n\n<span class=\"comment\">// Moving the key 'z' down will shift others up, so this moves to exactly 10.\n</span><span class=\"macro\">assert_eq!</span>(map.insert_before(<span class=\"number\">10</span>, <span class=\"string\">'z'</span>, ()), (<span class=\"number\">10</span>, <span class=\"prelude-val\">Some</span>(())));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'z'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">11</span>));\n\n<span class=\"comment\">// Moving or inserting before the endpoint is also valid.\n</span><span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(map.insert_before(map.len(), <span class=\"string\">'*'</span>, ()), (<span class=\"number\">26</span>, <span class=\"prelude-val\">Some</span>(())));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">26</span>));\n<span class=\"macro\">assert_eq!</span>(map.insert_before(map.len(), <span class=\"string\">'+'</span>, ()), (<span class=\"number\">27</span>, <span class=\"prelude-val\">None</span>));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'+'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">27</span>));\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">28</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shift_insert\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#574\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.shift_insert\" class=\"fn\">shift_insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, key: K, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair in the map at the given index.</p>\n<p>If an equivalent key already exists in the map: the key remains and\nis moved to the given index in the map, its corresponding value is updated\nwith <code>value</code>, and the older value is returned inside <code>Some(_)</code>.\nNote that existing entries <strong>cannot</strong> be moved to <code>index == map.len()</code>!\n(See <a href=\"indexmap/map/struct.IndexMap.html#method.insert_before\" title=\"method indexmap::map::IndexMap::insert_before\"><code>insert_before</code></a> for different behavior here.)</p>\n<p>If no equivalent key existed in the map: the new key-value pair is\ninserted at the given index, and <code>None</code> is returned.</p>\n<p><em><strong>Panics</strong></em> if <code>index</code> is out of bounds.\nValid indices are <code>0..map.len()</code> (exclusive) when moving an existing entry, or\n<code>0..=map.len()</code> (inclusive) when inserting a new key.</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n<p>See also <a href=\"indexmap/map/struct.IndexMap.html#method.entry\" title=\"method indexmap::map::IndexMap::entry\"><code>entry</code></a> if you want to insert <em>or</em> modify,\nperhaps only using the index for new entries with <a href=\"indexmap/map/core/entry/struct.VacantEntry.html#method.shift_insert\" title=\"method indexmap::map::core::entry::VacantEntry::shift_insert\"><code>VacantEntry::shift_insert</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: IndexMap&lt;char, ()&gt; = (<span class=\"string\">'a'</span>..=<span class=\"string\">'z'</span>).map(|c| (c, ())).collect();\n\n<span class=\"comment\">// The new key '*' goes exactly at the given index.\n</span><span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.shift_insert(<span class=\"number\">10</span>, <span class=\"string\">'*'</span>, ()), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n\n<span class=\"comment\">// Moving the key 'a' up to 10 will shift others down, including the '*' that was at 10.\n</span><span class=\"macro\">assert_eq!</span>(map.shift_insert(<span class=\"number\">10</span>, <span class=\"string\">'a'</span>, ()), <span class=\"prelude-val\">Some</span>(()));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9</span>));\n\n<span class=\"comment\">// Moving the key 'z' down to 9 will shift others up, including the '*' that was at 9.\n</span><span class=\"macro\">assert_eq!</span>(map.shift_insert(<span class=\"number\">9</span>, <span class=\"string\">'z'</span>, ()), <span class=\"prelude-val\">Some</span>(()));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'z'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n\n<span class=\"comment\">// Existing keys can move to len-1 at most, but new keys can insert at the endpoint.\n</span><span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(map.shift_insert(map.len() - <span class=\"number\">1</span>, <span class=\"string\">'*'</span>, ()), <span class=\"prelude-val\">Some</span>(()));\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'*'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">26</span>));\n<span class=\"macro\">assert_eq!</span>(map.shift_insert(map.len(), <span class=\"string\">'+'</span>, ()), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_index_of(<span class=\"kw-2\">&amp;</span><span class=\"string\">'+'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">27</span>));\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">28</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">โ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: IndexMap&lt;char, ()&gt; = (<span class=\"string\">'a'</span>..=<span class=\"string\">'z'</span>).map(|c| (c, ())).collect();\n\n<span class=\"comment\">// This is an invalid index for moving an existing key!\n</span>map.shift_insert(map.len(), <span class=\"string\">'a'</span>, ());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#595\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.entry\" class=\"fn\">entry</a>(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"indexmap/map/core/entry/enum.Entry.html\" title=\"enum indexmap::map::core::entry::Entry\">Entry</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Get the given keyโs corresponding entry in the map for insertion and/or\nin-place manipulation.</p>\n<p>Computes in <strong>O(1)</strong> time (amortized average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#630-633\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.Splice.html\" title=\"struct indexmap::map::iter::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>, K, V, S&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the map\nwith the given <code>replace_with</code> key-value iterator and yields the removed\nitems. <code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p>The <code>range</code> is removed even if the iterator is not consumed until the\nend. It is unspecified how many elements are removed from the map if the\n<code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code>\nvalue is dropped. If a key from the iterator matches an existing entry\nin the map (outside of <code>range</code>), then the value will be updated in that\nposition. Otherwise, the new key-value pair will be inserted in the\nreplaced <code>range</code>.</p>\n<p><em><strong>Panics</strong></em> if the starting point is greater than the end point or if\nthe end point is greater than the length of the map.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::from([(<span class=\"number\">0</span>, <span class=\"string\">'_'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'a'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'b'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'c'</span>), (<span class=\"number\">4</span>, <span class=\"string\">'d'</span>)]);\n<span class=\"kw\">let </span>new = [(<span class=\"number\">5</span>, <span class=\"string\">'E'</span>), (<span class=\"number\">4</span>, <span class=\"string\">'D'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'C'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'B'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'A'</span>)];\n<span class=\"kw\">let </span>removed: Vec&lt;<span class=\"kw\">_</span>&gt; = map.splice(<span class=\"number\">2</span>..<span class=\"number\">4</span>, new).collect();\n\n<span class=\"comment\">// 1 and 4 got new values, while 5, 3, and 2 were newly inserted.\n</span><span class=\"macro\">assert!</span>(map.into_iter().eq([(<span class=\"number\">0</span>, <span class=\"string\">'_'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'A'</span>), (<span class=\"number\">5</span>, <span class=\"string\">'E'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'C'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'B'</span>), (<span class=\"number\">4</span>, <span class=\"string\">'D'</span>)]));\n<span class=\"macro\">assert_eq!</span>(removed, <span class=\"kw-2\">&amp;</span>[(<span class=\"number\">2</span>, <span class=\"string\">'b'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'c'</span>)]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#663\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.append\" class=\"fn\">append</a>&lt;S2&gt;(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S2&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all key-value pairs from <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<p>This is equivalent to calling <a href=\"indexmap/map/struct.IndexMap.html#method.insert\" title=\"method indexmap::map::IndexMap::insert\"><code>insert</code></a> for each\nkey-value pair from <code>other</code> in order, which means that for keys that\nalready exist in <code>self</code>, their value is updated in the current position.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">ยง</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"comment\">// Note: Key (3) is present in both maps.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = IndexMap::from([(<span class=\"number\">3</span>, <span class=\"string\">\"c\"</span>), (<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>), (<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>)]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = IndexMap::from([(<span class=\"number\">3</span>, <span class=\"string\">\"d\"</span>), (<span class=\"number\">4</span>, <span class=\"string\">\"e\"</span>), (<span class=\"number\">5</span>, <span class=\"string\">\"f\"</span>)]);\n<span class=\"kw\">let </span>old_capacity = b.capacity();\n\na.append(<span class=\"kw-2\">&amp;mut </span>b);\n\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(b.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(b.capacity(), old_capacity);\n\n<span class=\"macro\">assert!</span>(a.keys().eq(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]));\n<span class=\"macro\">assert_eq!</span>(a[<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>], <span class=\"string\">\"d\"</span>); <span class=\"comment\">// \"c\" was overwritten.</span></code></pre></div>\n</div></details></div></details>",0,"rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#668-670\">source</a><a href=\"#impl-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#681-683\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.contains_key\" class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return <code>true</code> if an equivalent to <code>key</code> exists in the map.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#692-694\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a reference to the value stored for <code>key</code>, if it is present,\nelse <code>None</code>.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_key_value\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#708-710\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_key_value\" class=\"fn\">get_key_value</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return references to the key-value pair stored for <code>key</code>,\nif it is present, else <code>None</code>.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_full\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#721-723\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_full\" class=\"fn\">get_full</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return item index, key and value</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_index_of\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#736-738\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_index_of\" class=\"fn\">get_index_of</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return item index, if it exists in the map</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#750-752\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><section id=\"method.get_full_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#762-764\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_full_mut\" class=\"fn\">get_full_mut</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#783-785\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: <code>remove</code> disrupts the map order โ use <code>swap_remove</code> or <code>shift_remove</code> for explicit behavior.</span></div></span></summary><div class=\"docblock\"><p>Remove the key-value pair equivalent to <code>key</code> and return\nits value.</p>\n<p><strong>NOTE:</strong> This is equivalent to <a href=\"indexmap/map/struct.IndexMap.html#method.swap_remove\" title=\"method indexmap::map::IndexMap::swap_remove\"><code>.swap_remove(key)</code></a>, replacing this\nentryโs position with the last element, and it is deprecated in favor of calling that\nexplicitly. If you need to preserve the relative order of the keys in the map, use\n<a href=\"indexmap/map/struct.IndexMap.html#method.shift_remove\" title=\"method indexmap::map::IndexMap::shift_remove\"><code>.shift_remove(key)</code></a> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_entry\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#798-800\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.remove_entry\" class=\"fn\">remove_entry</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: <code>remove_entry</code> disrupts the map order โ use <code>swap_remove_entry</code> or <code>shift_remove_entry</code> for explicit behavior.</span></div></span></summary><div class=\"docblock\"><p>Remove and return the key-value pair equivalent to <code>key</code>.</p>\n<p><strong>NOTE:</strong> This is equivalent to <a href=\"indexmap/map/struct.IndexMap.html#method.swap_remove_entry\" title=\"method indexmap::map::IndexMap::swap_remove_entry\"><code>.swap_remove_entry(key)</code></a>,\nreplacing this entryโs position with the last element, and it is deprecated in favor of\ncalling that explicitly. If you need to preserve the relative order of the keys in the map,\nuse <a href=\"indexmap/map/struct.IndexMap.html#method.shift_remove_entry\" title=\"method indexmap::map::IndexMap::shift_remove_entry\"><code>.shift_remove_entry(key)</code></a> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#815-817\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.swap_remove\" class=\"fn\">swap_remove</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove the key-value pair equivalent to <code>key</code> and return\nits value.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a>, the pair is removed by swapping it with the\nlast element of the map and popping it off. <strong>This perturbs\nthe position of what used to be the last element!</strong></p>\n<p>Return <code>None</code> if <code>key</code> is not in map.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove_entry\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#831-833\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.swap_remove_entry\" class=\"fn\">swap_remove_entry</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove and return the key-value pair equivalent to <code>key</code>.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a>, the pair is removed by swapping it with the\nlast element of the map and popping it off. <strong>This perturbs\nthe position of what used to be the last element!</strong></p>\n<p>Return <code>None</code> if <code>key</code> is not in map.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove_full\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#851-853\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.swap_remove_full\" class=\"fn\">swap_remove_full</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, K, V)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove the key-value pair equivalent to <code>key</code> and return it and\nthe index it had.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a>, the pair is removed by swapping it with the\nlast element of the map and popping it off. <strong>This perturbs\nthe position of what used to be the last element!</strong></p>\n<p>Return <code>None</code> if <code>key</code> is not in map.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shift_remove\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#878-880\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.shift_remove\" class=\"fn\">shift_remove</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove the key-value pair equivalent to <code>key</code> and return\nits value.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a>, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n<strong>This perturbs the index of all of those elements!</strong></p>\n<p>Return <code>None</code> if <code>key</code> is not in map.</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shift_remove_entry\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#894-896\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.shift_remove_entry\" class=\"fn\">shift_remove_entry</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove and return the key-value pair equivalent to <code>key</code>.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a>, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n<strong>This perturbs the index of all of those elements!</strong></p>\n<p>Return <code>None</code> if <code>key</code> is not in map.</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shift_remove_full\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#914-916\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.shift_remove_full\" class=\"fn\">shift_remove_full</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, K, V)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove the key-value pair equivalent to <code>key</code> and return it and\nthe index it had.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a>, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n<strong>This perturbs the index of all of those elements!</strong></p>\n<p>Return <code>None</code> if <code>key</code> is not in map.</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details></div></details>",0,"rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#932\">source</a><a href=\"#impl-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#939\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the last key-value pair</p>\n<p>This preserves the order of the remaining elements.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#950-952\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, keep: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Scan through each key-value pair in the map and keep those where the\nclosure <code>keep</code> returns <code>true</code>.</p>\n<p>The elements are visited in order, and remaining elements keep their\norder.</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort_keys\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#964-966\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.sort_keys\" class=\"fn\">sort_keys</a>(&amp;mut self)<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort the mapโs key-value pairs by the default ordering of the keys.</p>\n<p>This is a stable sort โ but equivalent keys should not normally coexist in\na map at all, so <a href=\"indexmap/map/struct.IndexMap.html#method.sort_unstable_keys\" title=\"method indexmap::map::IndexMap::sort_unstable_keys\"><code>sort_unstable_keys</code></a> is preferred\nbecause it is generally faster and doesnโt allocate auxiliary memory.</p>\n<p>See <a href=\"indexmap/map/struct.IndexMap.html#method.sort_by\" title=\"method indexmap::map::IndexMap::sort_by\"><code>sort_by</code></a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort_by\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#981-983\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.sort_by\" class=\"fn\">sort_by</a>&lt;F&gt;(&amp;mut self, cmp: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort the mapโs key-value pairs in place using the comparison\nfunction <code>cmp</code>.</p>\n<p>The comparison function receives two key and value pairs to compare (you\ncan sort by keys or values or their combination as needed).</p>\n<p>Computes in <strong>O(n log n + c)</strong> time and <strong>O(n)</strong> space where <em>n</em> is\nthe length of the map and <em>c</em> the capacity. The sort is stable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sorted_by\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#994-996\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.sorted_by\" class=\"fn\">sorted_by</a>&lt;F&gt;(self, cmp: F) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.IntoIter.html\" title=\"struct indexmap::map::iter::IntoIter\">IntoIter</a>&lt;K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort the key-value pairs of the map and return a by-value iterator of\nthe key-value pairs with the result.</p>\n<p>The sort is stable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort_unstable_keys\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1007-1009\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.sort_unstable_keys\" class=\"fn\">sort_unstable_keys</a>(&amp;mut self)<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort the mapโs key-value pairs by the default ordering of the keys, but\nmay not preserve the order of equal elements.</p>\n<p>See <a href=\"indexmap/map/struct.IndexMap.html#method.sort_unstable_by\" title=\"method indexmap::map::IndexMap::sort_unstable_by\"><code>sort_unstable_by</code></a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort_unstable_by\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1024-1026\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.sort_unstable_by\" class=\"fn\">sort_unstable_by</a>&lt;F&gt;(&amp;mut self, cmp: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort the mapโs key-value pairs in place using the comparison function <code>cmp</code>, but\nmay not preserve the order of equal elements.</p>\n<p>The comparison function receives two key and value pairs to compare (you\ncan sort by keys or values or their combination as needed).</p>\n<p>Computes in <strong>O(n log n + c)</strong> time where <em>n</em> is\nthe length of the map and <em>c</em> is the capacity. The sort is unstable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sorted_unstable_by\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1038-1040\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.sorted_unstable_by\" class=\"fn\">sorted_unstable_by</a>&lt;F&gt;(self, cmp: F) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.IntoIter.html\" title=\"struct indexmap::map::iter::IntoIter\">IntoIter</a>&lt;K, V&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sort the key-value pairs of the map and return a by-value iterator of\nthe key-value pairs with the result.</p>\n<p>The sort is unstable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sort_by_cached_key\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1055-1058\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.sort_by_cached_key\" class=\"fn\">sort_by_cached_key</a>&lt;T, F&gt;(&amp;mut self, sort_key: F)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>) -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Sort the mapโs key-value pairs in place using a sort-key extraction function.</p>\n<p>During sorting, the function is called at most once per entry, by using temporary storage\nto remember the results of its evaluation. The order of calls to the function is\nunspecified and may change between versions of <code>indexmap</code> or the standard library.</p>\n<p>Computes in <strong>O(m n + n log n + c)</strong> time () and <strong>O(n)</strong> space, where the function is\n<strong>O(m)</strong>, <em>n</em> is the length of the map, and <em>c</em> the capacity. The sort is stable.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_keys\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1072-1074\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.binary_search_keys\" class=\"fn\">binary_search_keys</a>(&amp;self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Search over a sorted map for a key.</p>\n<p>Returns the position where that key is present, or the position where it can be inserted to\nmaintain the sort. See <a href=\"https://doc.rust-lang.org/1.82.0/std/primitive.slice.html#method.binary_search\" title=\"method slice::binary_search\"><code>slice::binary_search</code></a> for more details.</p>\n<p>Computes in <strong>O(log(n))</strong> time, which is notably less scalable than looking the key up\nusing <a href=\"indexmap/map/struct.IndexMap.html#method.get_index_of\" title=\"method indexmap::map::IndexMap::get_index_of\"><code>get_index_of</code></a>, but this can also position missing keys.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_by\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1086-1088\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.binary_search_by\" class=\"fn\">binary_search_by</a>&lt;'a, F&gt;(&amp;'a self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Search over a sorted map with a comparator function.</p>\n<p>Returns the position where that value is present, or the position where it can be inserted\nto maintain the sort. See <a href=\"https://doc.rust-lang.org/1.82.0/std/primitive.slice.html#method.binary_search_by\" title=\"method slice::binary_search_by\"><code>slice::binary_search_by</code></a> for more details.</p>\n<p>Computes in <strong>O(log(n))</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.binary_search_by_key\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1100-1103\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.binary_search_by_key\" class=\"fn\">binary_search_by_key</a>&lt;'a, B, F&gt;(\n    &amp;'a self,\n    b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;B</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;'a V</a>) -&gt; B,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Search over a sorted map with an extraction function.</p>\n<p>Returns the position where that value is present, or the position where it can be inserted\nto maintain the sort. See <a href=\"https://doc.rust-lang.org/1.82.0/std/primitive.slice.html#method.binary_search_by_key\" title=\"method slice::binary_search_by_key\"><code>slice::binary_search_by_key</code></a> for more details.</p>\n<p>Computes in <strong>O(log(n))</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.partition_point\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1115-1117\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.partition_point\" class=\"fn\">partition_point</a>&lt;P&gt;(&amp;self, pred: P) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the index of the partition point of a sorted map according to the given predicate\n(the index of the first element of the second partition).</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.82.0/std/primitive.slice.html#method.partition_point\" title=\"method slice::partition_point\"><code>slice::partition_point</code></a> for more details.</p>\n<p>Computes in <strong>O(log(n))</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1125\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.reverse\" class=\"fn\">reverse</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Reverses the order of the mapโs key-value pairs in place.</p>\n<p>Computes in <strong>O(n)</strong> time and <strong>O(1)</strong> space.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1132\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a slice of all the key-value pairs in the map.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1139\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of all the key-value pairs in the map.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1146\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts into a boxed slice of all the key-value pairs in the map.</p>\n<p>Note that this will drop the inner hash table and any excess capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_index\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1155\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_index\" class=\"fn\">get_index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Get a key-value pair by index</p>\n<p>Valid indices are <code>0 &lt;= index &lt; self.len()</code>.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_index_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1164\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_index_mut\" class=\"fn\">get_index_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Get a key-value pair by index</p>\n<p>Valid indices are <code>0 &lt;= index &lt; self.len()</code>.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_index_entry\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1173\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_index_entry\" class=\"fn\">get_index_entry</a>(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"indexmap/map/core/entry/struct.IndexedEntry.html\" title=\"struct indexmap::map::core::entry::IndexedEntry\">IndexedEntry</a>&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Get an entry in the map by index for in-place manipulation.</p>\n<p>Valid indices are <code>0 &lt;= index &lt; self.len()</code>.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_range\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1185\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_range\" class=\"fn\">get_range</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a slice of key-value pairs in the given range of indices.</p>\n<p>Valid indices are <code>0 &lt;= index &lt; self.len()</code>.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_range_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1196\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.get_range_mut\" class=\"fn\">get_range_mut</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"indexmap/map/slice/struct.Slice.html\" title=\"struct indexmap::map::slice::Slice\">Slice</a>&lt;K, V&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of key-value pairs in the given range of indices.</p>\n<p>Valid indices are <code>0 &lt;= index &lt; self.len()</code>.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1206\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.first\" class=\"fn\">first</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Get the first key-value pair</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1213\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.first_mut\" class=\"fn\">first_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Get the first key-value pair, with mutable access to the value</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first_entry\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1220\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.first_entry\" class=\"fn\">first_entry</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"indexmap/map/core/entry/struct.IndexedEntry.html\" title=\"struct indexmap::map::core::entry::IndexedEntry\">IndexedEntry</a>&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Get the first entry in the map for in-place manipulation.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1228\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.last\" class=\"fn\">last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Get the last key-value pair</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1235\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.last_mut\" class=\"fn\">last_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Get the last key-value pair, with mutable access to the value</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_entry\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1242\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.last_entry\" class=\"fn\">last_entry</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"indexmap/map/core/entry/struct.IndexedEntry.html\" title=\"struct indexmap::map::core::entry::IndexedEntry\">IndexedEntry</a>&lt;'_, K, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Get the last entry in the map for in-place manipulation.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove_index\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1255\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.swap_remove_index\" class=\"fn\">swap_remove_index</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the key-value pair by index</p>\n<p>Valid indices are <code>0 &lt;= index &lt; self.len()</code>.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.swap_remove\" title=\"method alloc::vec::Vec::swap_remove\"><code>Vec::swap_remove</code></a>, the pair is removed by swapping it with the\nlast element of the map and popping it off. <strong>This perturbs\nthe position of what used to be the last element!</strong></p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shift_remove_index\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1268\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.shift_remove_index\" class=\"fn\">shift_remove_index</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Remove the key-value pair by index</p>\n<p>Valid indices are <code>0 &lt;= index &lt; self.len()</code>.</p>\n<p>Like <a href=\"https://doc.rust-lang.org/1.82.0/alloc/vec/struct.Vec.html#method.remove\" title=\"method alloc::vec::Vec::remove\"><code>Vec::remove</code></a>, the pair is removed by shifting all of the\nelements that follow it, preserving their relative order.\n<strong>This perturbs the index of all of those elements!</strong></p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.move_index\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1281\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.move_index\" class=\"fn\">move_index</a>(&amp;mut self, from: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, to: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Moves the position of a key-value pair from one index to another\nby shifting all other pairs in-between.</p>\n<ul>\n<li>If <code>from &lt; to</code>, the other pairs will shift down while the targeted pair moves up.</li>\n<li>If <code>from &gt; to</code>, the other pairs will shift up while the targeted pair moves down.</li>\n</ul>\n<p><em><strong>Panics</strong></em> if <code>from</code> or <code>to</code> are out of bounds.</p>\n<p>Computes in <strong>O(n)</strong> time (average).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_indices\" class=\"method\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1290\">source</a><h4 class=\"code-header\">pub fn <a href=\"indexmap/map/struct.IndexMap.html#tymethod.swap_indices\" class=\"fn\">swap_indices</a>(&amp;mut self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Swaps the position of two key-value pairs in the map.</p>\n<p><em><strong>Panics</strong></em> if <code>a</code> or <code>b</code> are out of bounds.</p>\n<p>Computes in <strong>O(1)</strong> time (average).</p>\n</div></details></div></details>",0,"rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C%26Q%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1361-1364\">source</a><a href=\"#impl-IndexMut%3C%26Q%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, Q, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"docblock\"><p>Access <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a> values corresponding to a key.</p>\n<p>Mutable indexing allows changing / updating values of key-value\npairs that are already present.</p>\n<p>You can <strong>not</strong> insert new pairs with index syntax, use <code>.insert()</code>.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\n<span class=\"kw\">for </span>word <span class=\"kw\">in </span><span class=\"string\">\"Lorem ipsum dolor sit amet\"</span>.split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_string());\n}\n<span class=\"kw\">let </span>lorem = <span class=\"kw-2\">&amp;mut </span>map[<span class=\"string\">\"lorem\"</span>];\n<span class=\"macro\">assert_eq!</span>(lorem, <span class=\"string\">\"Lorem\"</span>);\nlorem.retain(char::is_lowercase);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"lorem\"</span>], <span class=\"string\">\"orem\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">โ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap[<span class=\"string\">\"bar\"</span>] = <span class=\"number\">1</span>; <span class=\"comment\">// panics!</span></code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1369\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value corresponding to the supplied <code>key</code>.</p>\n<p><em><strong>Panics</strong></em> if <code>key</code> is not present in the map.</p>\n</div></details></div></details>","IndexMut<&Q>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-IndexMut%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;)&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    range: (<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;),\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/enum.Bound.html\" title=\"enum core::ops::range::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;)&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<(Bound<usize>, Bound<usize>)>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CRange%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-IndexMut%3CRange%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<Range<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<RangeFrom<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CRangeFull%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-IndexMut%3CRangeFull%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\">RangeFull</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<RangeFull>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeInclusive.html\" title=\"struct core::ops::range::RangeInclusive\">RangeInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<RangeInclusive<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<RangeTo<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/slice.rs.html#416-424\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    &amp;mut self,\n    range: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;,\n) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/range/struct.RangeToInclusive.html\" title=\"struct core::ops::range::RangeToInclusive\">RangeToInclusive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<RangeToInclusive<usize>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3Cusize%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1448\">source</a><a href=\"#impl-IndexMut%3Cusize%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"docblock\"><p>Access <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a> values at indexed positions.</p>\n<p>Mutable indexing allows changing / updating indexed values\nthat are already present.</p>\n<p>You can <strong>not</strong> insert new values with index syntax โ use <a href=\"indexmap/map/struct.IndexMap.html#method.insert\" title=\"method indexmap::map::IndexMap::insert\"><code>.insert()</code></a>.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\n<span class=\"kw\">for </span>word <span class=\"kw\">in </span><span class=\"string\">\"Lorem ipsum dolor sit amet\"</span>.split_whitespace() {\n    map.insert(word.to_lowercase(), word.to_string());\n}\n<span class=\"kw\">let </span>lorem = <span class=\"kw-2\">&amp;mut </span>map[<span class=\"number\">0</span>];\n<span class=\"macro\">assert_eq!</span>(lorem, <span class=\"string\">\"Lorem\"</span>);\nlorem.retain(char::is_lowercase);\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"string\">\"lorem\"</span>], <span class=\"string\">\"orem\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">โ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>indexmap::IndexMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = IndexMap::new();\nmap.insert(<span class=\"string\">\"foo\"</span>, <span class=\"number\">1</span>);\nmap[<span class=\"number\">10</span>] = <span class=\"number\">1</span>; <span class=\"comment\">// panics!</span></code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1452\">source</a><a href=\"#method.index_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value at the supplied <code>index</code>.</p>\n<p><em><strong>Panics</strong></em> if <code>index</code> is out of bounds.</p>\n</div></details></div></details>","IndexMut<usize>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/iter.rs.html#29\">source</a><a href=\"#impl-IntoIterator-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/iter.rs.html#30\">source</a><a href=\"#associatedtype.Item\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/iter.rs.html#31\">source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"indexmap/map/iter/struct.IntoIter.html\" title=\"struct indexmap::map::iter::IntoIter\">IntoIter</a>&lt;K, V&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/iter.rs.html#33\">source</a><a href=\"#method.into_iter\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MutableKeys-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/mutable.rs.html#58-60\">source</a><a href=\"#impl-MutableKeys-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"indexmap/map/mutable/trait.MutableKeys.html\" title=\"trait indexmap::map::mutable::MutableKeys\">MutableKeys</a> for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"docblock\"><p>Opt-in mutable access to <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a> keys.</p>\n<p>See <a href=\"indexmap/map/mutable/trait.MutableKeys.html\" title=\"trait indexmap::map::mutable::MutableKeys\"><code>MutableKeys</code></a> for more information.</p>\n</div><div class=\"impl-items\"><section id=\"associatedtype.Key\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/mutable.rs.html#62\">source</a><a href=\"#associatedtype.Key\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"indexmap/map/mutable/trait.MutableKeys.html#associatedtype.Key\" class=\"associatedtype\">Key</a> = K</h4></section><section id=\"associatedtype.Value\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/mutable.rs.html#63\">source</a><a href=\"#associatedtype.Value\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"indexmap/map/mutable/trait.MutableKeys.html#associatedtype.Value\" class=\"associatedtype\">Value</a> = V</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_full_mut2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/mutable.rs.html#65-67\">source</a><a href=\"#method.get_full_mut2\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"indexmap/map/mutable/trait.MutableKeys.html#tymethod.get_full_mut2\" class=\"fn\">get_full_mut2</a>&lt;Q&gt;(&amp;mut self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Return item index, mutable reference to key and value <a href=\"indexmap/map/mutable/trait.MutableKeys.html#tymethod.get_full_mut2\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_index_mut2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/mutable.rs.html#77\">source</a><a href=\"#method.get_index_mut2\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"indexmap/map/mutable/trait.MutableKeys.html#tymethod.get_index_mut2\" class=\"fn\">get_index_mut2</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section></summary><div class='docblock'>Return mutable reference to key and value at an index. <a href=\"indexmap/map/mutable/trait.MutableKeys.html#tymethod.get_index_mut2\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/mutable.rs.html#81\">source</a><a href=\"#method.iter_mut2\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"indexmap/map/mutable/trait.MutableKeys.html#tymethod.iter_mut2\" class=\"fn\">iter_mut2</a>(\n    &amp;mut self,\n) -&gt; <a class=\"struct\" href=\"indexmap/map/iter/struct.IterMut2.html\" title=\"struct indexmap::map::iter::IterMut2\">IterMut2</a>&lt;'_, &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"indexmap/map/mutable/trait.MutableKeys.html\" title=\"trait indexmap::map::mutable::MutableKeys\">MutableKeys</a>&gt;::<a class=\"associatedtype\" href=\"indexmap/map/mutable/trait.MutableKeys.html#associatedtype.Key\" title=\"type indexmap::map::mutable::MutableKeys::Key\">Key</a>, &lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt; as <a class=\"trait\" href=\"indexmap/map/mutable/trait.MutableKeys.html\" title=\"trait indexmap::map::mutable::MutableKeys\">MutableKeys</a>&gt;::<a class=\"associatedtype\" href=\"indexmap/map/mutable/trait.MutableKeys.html#associatedtype.Value\" title=\"type indexmap::map::mutable::MutableKeys::Value\">Value</a>&gt;</h4></section></summary><div class='docblock'>Return an iterator over the key-value pairs of the map, in their order</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/mutable.rs.html#85-87\">source</a><a href=\"#method.retain2\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"indexmap/map/mutable/trait.MutableKeys.html#tymethod.retain2\" class=\"fn\">retain2</a>&lt;F&gt;(&amp;mut self, keep: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Scan through each key-value pair in the map and keep those where the\nclosure <code>keep</code> returns <code>true</code>. <a href=\"indexmap/map/mutable/trait.MutableKeys.html#tymethod.retain2\">Read more</a></div></details></div></details>","MutableKeys","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CIndexMap%3CK,+V2,+S2%3E%3E-for-IndexMap%3CK,+V1,+S1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1555-1560\">source</a><a href=\"#impl-PartialEq%3CIndexMap%3CK,+V2,+S2%3E%3E-for-IndexMap%3CK,+V1,+S1%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V1, S1, V2, S2&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V2, S2&gt;&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V1, S1&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V1: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;V2&gt;,\n    S1: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    S2: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1562\">source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V2, S2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.82.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<IndexMap<K, V2, S2>>","rusty::index::FxIndexMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RawEntryApiV1%3CK,+V,+S%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map/core/raw_entry_v1.rs.html#175\">source</a><a href=\"#impl-RawEntryApiV1%3CK,+V,+S%3E-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"indexmap/map/core/raw_entry_v1/trait.RawEntryApiV1.html\" title=\"trait indexmap::map::core::raw_entry_v1::RawEntryApiV1\">RawEntryApiV1</a>&lt;K, V, S&gt; for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_entry_v1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/core/raw_entry_v1.rs.html#176\">source</a><a href=\"#method.raw_entry_v1\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"indexmap/map/core/raw_entry_v1/trait.RawEntryApiV1.html#tymethod.raw_entry_v1\" class=\"fn\">raw_entry_v1</a>(&amp;self) -&gt; <a class=\"struct\" href=\"indexmap/map/core/raw_entry_v1/struct.RawEntryBuilder.html\" title=\"struct indexmap::map::core::raw_entry_v1::RawEntryBuilder\">RawEntryBuilder</a>&lt;'_, K, V, S&gt;</h4></section></summary><div class='docblock'>Creates a raw immutable entry builder for the <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a>. <a href=\"indexmap/map/core/raw_entry_v1/trait.RawEntryApiV1.html#tymethod.raw_entry_v1\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_entry_mut_v1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/indexmap/map/core/raw_entry_v1.rs.html#180\">source</a><a href=\"#method.raw_entry_mut_v1\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"indexmap/map/core/raw_entry_v1/trait.RawEntryApiV1.html#tymethod.raw_entry_mut_v1\" class=\"fn\">raw_entry_mut_v1</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"indexmap/map/core/raw_entry_v1/struct.RawEntryBuilderMut.html\" title=\"struct indexmap::map::core::raw_entry_v1::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'_, K, V, S&gt;</h4></section></summary><div class='docblock'>Creates a raw entry builder for the <a href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\"><code>IndexMap</code></a>. <a href=\"indexmap/map/core/raw_entry_v1/trait.RawEntryApiV1.html#tymethod.raw_entry_mut_v1\">Read more</a></div></details></div></details>","RawEntryApiV1<K, V, S>","rusty::index::FxIndexMap"],["<section id=\"impl-Eq-for-IndexMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/indexmap/map.rs.html#1572-1576\">source</a><a href=\"#impl-Eq-for-IndexMap%3CK,+V,+S%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"indexmap/map/struct.IndexMap.html\" title=\"struct indexmap::map::IndexMap\">IndexMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section>","Eq","rusty::index::FxIndexMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[202974]}