searchState.loadedDescShard("elasticlunr", 0, "elasticlunr-rs\nThe version of elasticlunr.js this library was designed …\nAn elasticlunr search index.\nA builder for an <code>Index</code> with custom parameters.\nAdd the data from a document to the index.\nAdd a document field to the <code>Index</code>.\nAdd a document field to the <code>Index</code>, with a custom tokenizer …\nAdd the document fields to the <code>Index</code>.\nBuild an <code>Index</code> from this builder.\nThese types are not used for generating <code>Index</code>es. They are …\nImplements an elasticlunr.js document store. Most users do …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplements an elasticlunr.js inverted index. Most users do …\nIntended to be compatible with …\nCreate a new index with the provided fields.\nDefines the pipeline which processes text for inclusion in …\nSet whether or not documents should be saved in the <code>Index</code>…\nSet the key used to store the document reference field.\nReturns the index, serialized to JSON.\nReturns the index, serialized to pretty-printed JSON.\nCreate a new index with the provided fields for the given …\nSets which boolean model is used for searching with …\nThe search configuration map which is passed to the …\nUsed to set the search configuration for a specific field. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe document store saves the complete text of each item …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplements an elasticlunr.js inverted index. Most users do …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ISO 639-1 language code of the language\nReturns the argument unchanged.\nReturns the <code>Language</code> for the given two-character ISO 639-1 …\nReturns the <code>Language</code> for the given English language name …\nCalls <code>U::from(self)</code>.\nReturns a list of all the <code>Language</code> implementations in the …\nReturns the <code>Pipeline</code> to process the tokens with\nThe name of the language in English\nSeparates the input text into individual tokens. In most …\nSplits a text string into a vector of individual tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA sequence of <code>PipelineFn</code>s which are run on tokens to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the Pipeline against the given vector of tokens. The …")