searchState.loadedDescShard("annotate_snippets", 0, "A library for formatting of text or programming code …\nAn annotation for a <code>Snippet</code>.\nError annotations are displayed using red color and “^”…\nTypes of annotations.\nPrimary structure provided for formatting\nA renderer for <code>Message</code>s\nStructure containing the slice of text to be annotated and …\nWarning annotations are displayed using blue color and “-…\nHide lines without <code>Annotation</code>s\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe renderer for <code>Message</code>s\nCreate a <code>Annotation</code> with the given span for a <code>Snippet</code>\nAvailable 4-bit ANSI color palette codes\n256 (8-bit) color support\n256 (8-bit) color support\nAvailable 4-bit ANSI color palette codes\nBlack: #0 (foreground code <code>30</code>, background code <code>40</code>).\nBlue: #4 (foreground code <code>34</code>, background code <code>44</code>).\nBright black: #0 (foreground code <code>90</code>, background code <code>100</code>).\nBright blue: #4 (foreground code <code>94</code>, background code <code>104</code>).\nBright cyan: #6 (foreground code <code>96</code>, background code <code>106</code>).\nBright green: #2 (foreground code <code>92</code>, background code <code>102</code>).\nBright magenta: #5 (foreground code <code>95</code>, background code <code>105</code>…\nBright red: #1 (foreground code <code>91</code>, background code <code>101</code>).\nBright white: #7 (foreground code <code>97</code>, background code <code>107</code>).\nBright yellow: #3 (foreground code <code>93</code>, background code <code>103</code>…\nAny ANSI color code scheme\nCyan: #6 (foreground code <code>36</code>, background code <code>46</code>).\nEnumerate each enabled value in <code>Effects</code>\nA set of text effects\nGreen: #2 (foreground code <code>32</code>, background code <code>42</code>).\nSwap foreground and background colors; inconsistent …\nNot widely supported. Sometimes treated as inverse or blink\nMagenta: #5 (foreground code <code>35</code>, background code <code>45</code>).\nRed: #1 (foreground code <code>31</code>, background code <code>41</code>).\nA renderer for <code>Message</code>s\nReset terminal formatting\n24-bit ANSI RGB color codes\n24-bit ANSI RGB color codes\nCharacters legible but marked as if for deletion. Not …\nANSI Text styling\nStyle extensions exist for Kitty, VTE, mintty and iTerm2.\nWhite: #7 (foreground code <code>37</code>, background code <code>47</code>).\nYellow: #3 (foreground code <code>33</code>, background code <code>43</code>).\nAnonymize line numbers\nBlue\nSet background color\nApply <code>blink</code> effect\nApply <code>bold</code> effect\nChange the color to/from bright\nReset all effects in-place\nReturns <code>true</code> if all of the effects in <code>other</code> are contained …\nApply <code>dimmed</code> effect\nSet text effects\nSet the output style for emphasis\nSet the output style for <code>error</code>\nSet foreground color\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLosslessly convert from <code>AnsiColor</code>\nGreen\nGet the background color\nGet the foreground color\nSet the output style for <code>help</code>\nApply <code>hidden</code> effect\nGet the raw value\nSet the output style for <code>info</code>\nInserts the specified effects in-place.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to <code>AnsiColor</code> when there is a 1:1 mapping\nApply <code>invert</code> effect\nReport whether the color is bright\nCheck if no effects are enabled\nCheck if no styling is enabled\nApply <code>italic</code> effect\nIterate over enabled effects\nSet the output style for line numbers\nNo effects enabled\nNo effects enabled\nSet the output style for none\nSet the output style for <code>note</code>\nCreate a <code>Style</code> with this as the foreground\nCreate a <code>Style</code> with this as the foreground\nCreate a <code>Style</code> with this as the foreground\nCreate a <code>Style</code> with this as the foreground\nCreate a <code>Style</code> with this as the foreground\nCreate a <code>Style</code> with this as the foreground\nCreate a <code>Style</code> with this as the foreground\nCreate a <code>Style</code> with this as the foreground\nNo terminal styling\nRed\nRemoves the specified effects in-place.\nRender the ANSI code\nRender the ANSI code\nRender the ANSI code\nRender a snippet into a <code>Display</code>able object\nRender the ANSI code for a background color\nRender the ANSI code for a background color\nRender the ANSI code for a background color\nRender the ANSI code for a background color\nRender the ANSI code for a foreground color\nRender the ANSI code for a foreground color\nRender the ANSI code for a foreground color\nRender the ANSI code for a foreground color\nRenders the relevant <code>Reset</code> code\nEnable or disable the specified effects depending on the …\nApply <code>strikethrough</code> effect\nDefault terminal styling\nApply <code>underline</code> effect\nSet underline color\nSet the output style for <code>warning</code>\nWrite the relevant <code>Reset</code> code\nWrite the ANSI code")