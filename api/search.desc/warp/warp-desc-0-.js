searchState.loadedDescShard("warp", 0, "warp\nErrors that can happen inside warp.\nComposable request filters.\nA Warp Server ready to filter requests.\nComposes a new <code>Filter</code> that requires both this and the …\nComposes a new <code>Filter</code> that requires both this and the …\nComposes this <code>Filter</code> with a fallible async function …\nComposes this <code>Filter</code> with a fallible async function …\nBind to a socket address, returning a <code>Future</code> that can be …\nBind to a possibly ephemeral socket address.\nCreate a server with graceful shutdown signal.\nBoxes this filter into a trait object, making it easier to …\nBoxes this filter into a trait object, making it easier to …\nBuilt-in Filters\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComposes this <code>Filter</code> with a function receiving the …\nComposes this <code>Filter</code> with a function receiving the …\nComposes a new <code>Filter</code> of either this or the other filter.\nComposes a new <code>Filter</code> of either this or the other filter.\nCompose this <code>Filter</code> with a function receiving an error.\nCompose this <code>Filter</code> with a function receiving an error.\nConvenient way to chain multiple path filters together.\nCompose this <code>Filter</code> with a function receiving an error and …\nCompose this <code>Filter</code> with a function receiving an error and …\nRedirect requests to a new location.\nRejections\nReply to requests.\nRun this <code>Server</code> forever on the current thread.\nRun this <code>Server</code> forever on the current thread with a …\nCreate a <code>Server</code> with the provided <code>Filter</code>.\nSetup this <code>Server</code> with a specific stream of incoming …\nSetup this <code>Server</code> with a specific stream of incoming …\nConvert a <code>Filter</code> into a <code>Service</code>.\nTest utilities to test your filters.\nComposes this <code>Filter</code> with an async function receiving the …\nComposes this <code>Filter</code> with an async function receiving the …\nBind to a socket address, returning a <code>Future</code> that can be …\nTried to bind a possibly ephemeral socket address.\nCreate a server with graceful shutdown signal.\nUnifies the extracted value of <code>Filter</code>s composed with <code>or</code>.\nUnifies the extracted value of <code>Filter</code>s composed with <code>or</code>.\nConvenience method to remove one layer of tupling.\nConvenience method to remove one layer of tupling.\nWraps the current filter with some wrapper.\nWraps the current filter with some wrapper.\nCombines received filter with pre and after filters\nA type representing a boxed <code>Filter</code> trait object.\nSocket Address filters.\nA filter that matches any route.\nBody filters\nCookie Filters\nCORS Filters\nRequest Extensions\nReturns the argument unchanged.\nFile System Filters\nHeader Filters\nHost (“authority”) filter\nCalls <code>U::from(self)</code>.\nLogger Filters\nHTTP Method filters.\nPath Filters\nQuery Filters\nReply Filters\nServer-Sent Events (SSE)\n<code>tracing</code> filters.\nWebsockets Filters\nCreates a <code>Filter</code> to get the remote address of the …\nA <code>Filter</code> that matches any route.\nAn error used in rejections when deserializing a request …\nReturns a <code>Filter</code> that matches any request and extracts a …\nReturns a <code>Filter</code> that matches any request and extracts a …\nRequire a <code>content-length</code> header to have a value no greater …\nReturns a <code>Filter</code> that matches any request and extracts a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>Filter</code> that matches any request and extracts a …\nCreate a <code>Filter</code> that extracts the request body as a …\nCreates a <code>Filter</code> that requires a cookie by name.\nCreates a <code>Filter</code> that looks for an optional cookie by name.\nA constructed via <code>warp::cors()</code>.\nA wrapping <code>Filter</code> constructed via <code>warp::cors()</code>.\nAn error used to reject requests that are forbidden by a …\nSets that <em>any</em> <code>Origin</code> header is allowed.\nSets whether to add the <code>Access-Control-Allow-Credentials</code> …\nAdds a header to the list of allowed request headers.\nAdds multiple headers to the list of allowed request …\nAdds a method to the existing list of allowed request …\nAdds multiple methods to the existing list of allowed …\nAdd an origin to the existing list of allowed <code>Origin</code>s.\nAdd multiple origins to the existing list of allowed <code>Origin</code>…\nBuilds the <code>Cors</code> wrapper from the configured settings.\nCreate a wrapping <code>Filter</code> that exposes CORS behavior for a …\nAdds a header to the list of exposed headers.\nAdds multiple headers to the list of exposed headers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>Access-Control-Max-Age</code> header.\nAn error used to reject if <code>get</code> cannot find the extension.\nReturns the argument unchanged.\nGet a previously set extension of the current route.\nCalls <code>U::from(self)</code>.\nGet a previously set extension of the current route.\nA file response.\nCreates a <code>Filter</code> that serves a directory at the base <code>path</code> …\nCreates a <code>Filter</code> that serves a File at the <code>path</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtract the <code>&amp;Path</code> of the file this <code>Response</code> delivers.\nCreate a <code>Filter</code> that requires a header to match the value …\nCreate a <code>Filter</code> that requires a header to match the value …\nCreate a <code>Filter</code> that tries to parse the specified header.\nCreate a <code>Filter</code> that returns a clone of the request’s …\nCreate a <code>Filter</code> that tries to parse the specified header, …\nCreate a <code>Filter</code> that gets a <code>HeaderValue</code> for the name.\nRepresents the authority component of a URI.\nReturn a str representation of the authority\nCreates a <code>Filter</code> that requires a specific authority …\nReturns the argument unchanged.\nAttempt to convert a <code>Bytes</code> buffer to a <code>Authority</code>.\nAttempt to convert an <code>Authority</code> from a static string.\nGet the host of this <code>Authority</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Filter</code> that looks for an authority (target server…\nGet the port part of this <code>Authority</code>.\nGet the port of this <code>Authority</code> as a <code>u16</code>.\nInformation about the request/response that can be used to …\nDecorates a <code>Filter</code> to log requests and responses.\nCreate a wrapping <code>Filter</code> that receives <code>warp::log::Info</code>.\nView the <code>Duration</code> that elapsed for the request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nView the host of the request\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a wrapping <code>Filter</code> with the specified <code>name</code> as the …\nView the <code>http::Method</code> of the request.\nView the URI path of the request.\nView the referer of the request.\nView the remote <code>SocketAddr</code> of the request.\nAccess the full headers of the request\nView the <code>http::StatusCode</code> of the response.\nView the user agent of the request.\nView the <code>http::Version</code> of the request.\nCreate a <code>Filter</code> that requires the request method to be …\nCreate a <code>Filter</code> that requires the request method to be <code>GET</code>.\nCreate a <code>Filter</code> that requires the request method to be <code>HEAD</code>…\nExtract the <code>Method</code> from the request.\nCreate a <code>Filter</code> that requires the request method to be …\nCreate a <code>Filter</code> that requires the request method to be …\nCreate a <code>Filter</code> that requires the request method to be <code>POST</code>…\nCreate a <code>Filter</code> that requires the request method to be <code>PUT</code>.\nA <code>Filter</code> matching an exact path segment.\nRepresents the full request path, returned by the <code>full()</code> …\nRepresents the tail part of a request path, returned by …\nRepresents the tail part of a request path, returned by …\nGet the <code>&amp;str</code> representation of the remaining path.\nGet the <code>&amp;str</code> representation of the remaining path.\nGet the <code>&amp;str</code> representation of the request path.\nMatches the end of a route.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the full request path, irrespective of other …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract a parameter from a path segment.\nCreate an exact match path segment <code>Filter</code>.\nPeek at the unmatched tail of the path, without affecting …\nGet an iterator over the segments of the peeked path.\nExtract the unmatched tail of the path.\nCreates a <code>Filter</code> that decodes query parameters to the type …\nCreates a <code>Filter</code> that returns the raw query string as type …\nWrap a <code>Filter</code> to set a header if it is not already set.\nWrap a <code>Filter</code> to always set a header.\nWrap a <code>Filter</code> to always set multiple headers.\nWrap a <code>Filter</code> that adds a header to the reply, if they aren…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrap a <code>Filter</code> that adds a header to the reply.\nWrap a <code>Filter</code> that adds multiple headers to the reply.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nServer-sent event\nConfigure the interval between keep-alive messages, the …\nSet Server-sent event comment Comment field (“:”)\nSet Server-sent event data data field(s) (“data:”)\nSet Server-sent event event Event name field (“event:”)\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet Server-sent event id Identifier field (“id:”)\nCustomize the interval between keep-alive messages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet Server-sent event data data field(s) (“data:”)\nKeeps event source connection alive when no events sent …\nGets the optional last event id from request. Typically …\nServer-sent events reply\nSet Server-sent event retry Retry timeout field (“retry:…\nWrap an event stream with keep-alive functionality.\nCustomize the text of the keep-alive message.\nInformation about the request/response that can be used to …\nDecorates a <code>Filter</code> to create a <code>tracing</code> span for requests …\nReturns the argument unchanged.\nReturns the argument unchanged.\nView the host of the request\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nView the <code>http::Method</code> of the request.\nCreate a wrapping filter that instruments every request …\nView the URI path of the request.\nView the referer of the request.\nView the remote <code>SocketAddr</code> of the request.\nCreate a wrapping filter that instruments every request …\nView the request headers.\nCreate a wrapping filter that instruments every request …\nView the user agent of the request.\nView the <code>http::Version</code> of the request.\nA WebSocket message.\nConnection header did not include ‘upgrade’\nA websocket <code>Stream</code> and <code>Sink</code>, provided to <code>ws</code> filters.\nExtracted by the <code>ws</code> filter, and used to finish an upgrade.\nReturn the bytes of this message, if the message can …\nConstruct a new Binary <code>Message</code>.\nGracefully close this websocket.\nConstruct the default Close <code>Message</code>.\nTry to get the close frame (close code and reason)\nConstruct a Close <code>Message</code> with a code and reason.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructure this message into binary data.\nReturns true if this message is a Binary message.\nReturns true if this message a is a Close message.\nReturns true if this message is a Ping message.\nReturns true if this message is a Pong message.\nReturns true if this message is a Text message.\nSet the maximum frame size (defaults to 16 megabytes)\nSet the maximum message size (defaults to 64 megabytes)\nDoes nothing.\nThe max size of the write buffer, in bytes.\nFinish the upgrade, passing a function to handle the …\nConstruct a new Ping <code>Message</code>.\nConstruct a new Pong <code>Message</code>.\nConstruct a new Text <code>Message</code>.\nTry to get a reference to the string text, if this is a …\nCreates a Websocket Filter.\nTrait for redirect locations. Currently only a <code>Uri</code> can be …\nHTTP 302 Found (or Temporary Redirect) Description: The …\nHTTP 308 Permanent Redirect Description: The requested …\nHTTP 301 Moved Permanently Description: The requested …\nHTTP 303 See Other Description: The response to the …\nHTTP 307 Temporary Redirect: Description: The requested …\nInvalid request header\nInvalid query\nA content-length header is required\nHTTP method not allowed\nMissing cookie\nMissing request header\nThe request payload is too large\nA marker trait to ensure proper types are used for custom …\nRejection of a request by a <code>Filter</code>.\nThe request’s content-type is not supported\nRejects a request with a custom cause.\nSearches this <code>Rejection</code> for a specific cause.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this Rejection was made via …\nRetrieve the name of the header that was missing\nRetrieve the name of the header that was invalid\nRetrieve the name of the cookie that was missing\nRejects a request with <code>404 Not Found</code>.\nRejects a request with <code>404 Not Found</code>.\nAn HTML reply.\nA JSON formatted reply.\nTypes that can be converted into a <code>Response</code>.\nResponse type into which types implementing the <code>Reply</code> …\nWraps an <code>impl Reply</code> and adds a header when rendering.\nWrap an <code>impl Reply</code> to change its <code>StatusCode</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReply with a body and <code>content-type</code> set to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the given value into a <code>Response</code>.\nConvert the value into a <code>Reply</code> with the value encoded as …\nReturns an empty <code>Reply</code> with status code <code>200 OK</code>.\nWrap an <code>impl Reply</code> to add a header when rendering.\nWrap an <code>impl Reply</code> to change its <code>StatusCode</code>.\nA request builder for testing filters.\nA Websocket builder for testing filters.\nA test client for Websocket filters.\nAn error from Websocket filter tests.\nSet the bytes of this request body.\nAdd a type to the request’s <code>http::Extensions</code>.\nTries to apply the <code>Filter</code> on this request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecute this Websocket request against the provided filter.\nSet a header for this request.\nSet a header for this request.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the bytes of this request body by serializing a value …\nReturns whether the <code>Filter</code> matches this request, or …\nSets the method of this builder.\nSets the request path of this builder.\nSets the request path of this builder.\nReceive a websocket message from the server.\nAssert the server has closed the connection.\nSet the remote address of this request\nReturns <code>Response</code> provided by applying the <code>Filter</code>.\nStarts a new test <code>RequestBuilder</code>.\nSend a websocket message to the server.\nSend a “text” websocket message to the server.\nStarts a new test <code>WsBuilder</code>.")