searchState.loadedDescShard("hyper", 0, "hyper\n202 Accepted [RFC7231, Section 6.3.3]\n208 Already Reported [RFC5842]\n502 Bad Gateway [RFC7231, Section 6.6.3]\n400 Bad Request [RFC7231, Section 6.5.1]\n409 Conflict [RFC7231, Section 6.5.8]\nCONNECT\n100 Continue [RFC7231, Section 6.2.1]\n201 Created [RFC7231, Section 6.3.2]\nDELETE\n417 Expectation Failed [RFC7231, Section 6.5.14]\nContains the error value\nRepresents errors that can occur handling HTTP streams.\n424 Failed Dependency [RFC4918]\n403 Forbidden [RFC7231, Section 6.5.3]\n302 Found [RFC7231, Section 6.4.3]\n504 Gateway Timeout [RFC7231, Section 6.6.5]\nGET\n410 Gone [RFC7231, Section 6.5.9]\nHEAD\n<code>HTTP/0.9</code>\n<code>HTTP/1.0</code>\n<code>HTTP/1.1</code>\n<code>HTTP/2.0</code>\n<code>HTTP/3.0</code>\n505 HTTP Version Not Supported [RFC7231, Section 6.6.6]\n418 I’m a teapot [curiously not registered by IANA but …\n226 IM Used [RFC3229]\n507 Insufficient Storage [RFC4918]\n500 Internal Server Error [RFC7231, Section 6.6.1]\n411 Length Required [RFC7231, Section 6.5.10]\n423 Locked [RFC4918]\n508 Loop Detected [RFC5842]\n405 Method Not Allowed [RFC7231, Section 6.5.5]\n421 Misdirected Request RFC7540, Section 9.1.2\n301 Moved Permanently [RFC7231, Section 6.4.2]\n300 Multiple Choices [RFC7231, Section 6.4.1]\n207 Multi-Status [RFC4918]\nThe Request Method (VERB)\n511 Network Authentication Required [RFC6585]\n203 Non-Authoritative Information [RFC7231, Section 6.3.4]\n406 Not Acceptable [RFC7231, Section 6.5.6]\n510 Not Extended [RFC2774]\n404 Not Found [RFC7231, Section 6.5.4]\n501 Not Implemented [RFC7231, Section 6.6.2]\n304 Not Modified [RFC7232, Section 4.1]\n204 No Content [RFC7231, Section 6.3.5]\n200 OK [RFC7231, Section 6.3.1]\nOPTIONS\nContains the success value\n206 Partial Content [RFC7233, Section 4.1]\nPATCH\n413 Payload Too Large [RFC7231, Section 6.5.11]\n402 Payment Required [RFC7231, Section 6.5.2]\n308 Permanent Redirect [RFC7238]\nPOST\n412 Precondition Failed [RFC7232, Section 4.2]\n428 Precondition Required [RFC6585]\n102 Processing [RFC2518]\n407 Proxy Authentication Required [RFC7235, Section 3.2]\nPUT\n416 Range Not Satisfiable [RFC7233, Section 4.4]\n431 Request Header Fields Too Large [RFC6585]\n408 Request Timeout [RFC7231, Section 6.5.7]\n205 Reset Content [RFC7231, Section 6.3.6]\nRepresents an HTTP request.\nRepresents an HTTP response\nResult type often returned from methods that can have …\n303 See Other [RFC7231, Section 6.4.4]\n503 Service Unavailable [RFC7231, Section 6.6.4]\n101 Switching Protocols [RFC7231, Section 6.2.2]\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\n307 Temporary Redirect [RFC7231, Section 6.4.7]\n429 Too Many Requests [RFC6585]\nTRACE\n401 Unauthorized [RFC7235, Section 3.1]\n451 Unavailable For Legal Reasons [RFC7725]\n422 Unprocessable Entity [RFC4918]\n415 Unsupported Media Type [RFC7231, Section 6.5.13]\n426 Upgrade Required [RFC7231, Section 6.5.15]\n414 URI Too Long [RFC7231, Section 6.5.12]\n305 Use Proxy [RFC7231, Section 6.4.5]\nThe URI component of a request.\n506 Variant Also Negotiates [RFC2295]\nRepresents a version of the HTTP spec.\nReturn a &amp;str representation of the HTTP method\nReturns a &amp;str representation of the <code>StatusCode</code>\nReturns the <code>u16</code> corresponding to this <code>StatusCode</code>.\nGet the authority of this <code>Uri</code>.\nStreaming bodies for Requests and Responses\nReturns a reference to the associated HTTP body.\nReturns a reference to the associated HTTP body.\nReturns a mutable reference to the associated HTTP body.\nReturns a mutable reference to the associated HTTP body.\nCreates a new builder-style object to manufacture a <code>Request</code>\nCreates a new builder-style object to manufacture a …\nCreates a new builder-style object to manufacture a <code>Uri</code>.\nGet the standardised <code>reason-phrase</code> for this status code.\nHTTP Client\nReturns the info of the client connection on which this …\nCreates a new <code>Builder</code> initialized with a CONNECT method …\nCreates a new <code>Builder</code> initialized with a DELETE method and …\nHTTP extensions.\nReturns a reference to the associated extensions.\nReturns a reference to the associated extensions.\nReturns a mutable reference to the associated extensions.\nReturns a mutable reference to the associated extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP method.\nConverts a &amp;u8 to a status code\nAttempt to convert a <code>Bytes</code> buffer to a <code>Uri</code>.\nCreates a new <code>Request</code> with the given components parts and …\nCreates a new <code>Response</code> with the given head and body\nAttempt to convert a <code>Parts</code> into a <code>Uri</code>.\nConvert a <code>Uri</code> from a static string.\nConverts a u16 to a status code.\nCreates a new <code>Builder</code> initialized with a GET method and …\nCreates a new <code>Builder</code> initialized with a HEAD method and …\nHTTP header types\nReturns a reference to the associated header field map.\nReturns a reference to the associated header field map.\nReturns a mutable reference to the associated header field …\nReturns a mutable reference to the associated header field …\nGet the host of this <code>Uri</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the request, returning just the body.\nConsumes the response, returning just the body.\nConsumes the error, returning its cause.\nConsumes the request returning the head and body parts.\nConsumes the response returning the head and body parts.\nConvert a <code>Uri</code> into <code>Parts</code>.\nReturns true if the body write was aborted.\nReturns true if this was about a <code>Request</code> that was canceled.\nCheck if status is within 400-499.\nReturns true if a sender’s channel is closed.\nReturns true if this was an error from <code>Connect</code>.\nWhether a method is considered “idempotent”, meaning …\nReturns true if the connection closed before a message …\nCheck if status is within 100-199.\nReturns true if this was an HTTP parse error.\nReturns true if this was an HTTP parse error caused by an …\nReturns true if this was an HTTP parse error caused by a …\nCheck if status is within 300-399.\nWhether a method is considered “safe”, meaning the …\nCheck if status is within 500-599.\nCheck if status is within 200-299.\nReturns true if the error was caused by a timeout.\nReturns true if this error was caused by user code.\nConsumes the request returning a new request with body …\nConsumes the response returning a new response with body …\nThe error’s standalone message, without the message from …\nReturns a reference to the associated HTTP method.\nReturns a mutable reference to the associated HTTP method.\nCreates a new blank <code>Request</code> with the body\nCreates a new blank <code>Response</code> with the body\nCreates a new <code>Builder</code> initialized with an OPTIONS method …\nCreates a new <code>Builder</code> initialized with a PATCH method and …\nGet the path of this <code>Uri</code>.\nReturns the path &amp; query components of the Uri\nGet the port part of this <code>Uri</code>.\nGet the port of this <code>Uri</code> as a <code>u16</code>.\nCreates a new <code>Builder</code> initialized with a POST method and …\nCreates a new <code>Builder</code> initialized with a PUT method and …\nGet the query string of this <code>Uri</code>, starting after the <code>?</code>.\nRuntime components\nGet the scheme of this <code>Uri</code>.\nGet the scheme of this <code>Uri</code> as a <code>&amp;str</code>.\nHTTP Server\nAsynchronous Services\nReturns the <code>StatusCode</code>.\nReturns a mutable reference to the associated <code>StatusCode</code>.\nCreates a new <code>Builder</code> initialized with a TRACE method and …\nHTTP Upgrades\nReturns a reference to the associated URI.\nReturns a mutable reference to the associated URI.\nReturns the associated version.\nReturns a reference to the associated version.\nReturns a mutable reference to the associated version.\nReturns a mutable reference to the associated version.\nA stream of <code>Bytes</code>, used when receiving bodies.\nRead bytes from a buffer.\nA cheaply cloneable and sliceable chunk of contiguous …\nValues yielded by the <code>Body</code>.\nThe error type this <code>Body</code> might generate.\nTrait representing a streaming body of a Request or …\nA sender half created through <code>Body::channel()</code>.\nA <code>Body</code> size hint\nAborts the body in an abnormal fashion.\nAdvance the internal cursor of the Buf\nAggregate the data buffers from a body asynchronously.\nTurn this body into a boxed trait object.\nTurn this body into a boxed trait object that is !Sync.\nCreates an adaptor which will chain this buffer with …\nCreate a <code>Body</code> stream with an associated sender half.\nReturns a slice starting at the current position and of …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nClears the buffer, removing all data.\nTurn this body into <code>Collected</code> body which will collect all …\nCreates <code>Bytes</code> instance from slice, by copying it.\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nReturns future that resolves to next data chunk, if any.\nReturns <code>Body::empty()</code>.\nCreate an empty <code>Body</code> stream.\nReturns the exact size of data that will be yielded <strong>if</strong> the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Bytes</code> from a static slice.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns true if there are any more bytes to consume\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns <code>true</code> when the end of stream has been reached.\nReturns true if this is the only reference to the data.\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the lower bound of data that the <code>Body</code> will yield …\nMaps this body’s data value to a different value.\nMaps this body’s error value to a different value.\nCreates a new empty <code>Bytes</code>.\nReturns a new <code>SizeHint</code> with default values\nAttempt to pull out the next data buffer of this stream.\nCheck to see if this <code>Sender</code> can send more data.\nPoll for an optional <strong>single</strong> <code>HeaderMap</code> of trailers.\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns the number of bytes between the current position …\nSend data on data channel when it is ready.\nSend trailers on trailers channel.\nSet the value of the <code>lower</code> and <code>upper</code> bounds to exactly the …\nSet the value of the <code>lower</code> hint.\nSet the value of the <code>upper</code> hint value.\nReturns the bounds on the remaining length of the stream.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nConcatenate the buffers from a body into a single <code>Bytes</code> …\nReturns future that resolves to trailers, if any.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTry to convert self into <code>BytesMut</code>.\nTry to send data on this channel.\nReturns the upper bound of data the <code>Body</code> will yield before …\nReturns a new <code>SizeHint</code> with both upper and lower bounds …\nWrap a futures <code>Stream</code> in a box inside <code>Body</code>.\nA builder to configure a new <code>Client</code>.\nA Client to make outgoing HTTP requests.\nA <code>Future</code> that will resolve to an HTTP Response.\nCombine the configuration of this builder with a connector …\nBuilder a client with this configuration and the default …\nCreate a builder to configure a new <code>Client</code>.\nLower-level client connection API.\nConnectors used by the <code>Client</code>.\nProvide an executor to execute background <code>Connection</code> tasks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSend a <code>GET</code> request to the supplied <code>Uri</code>.\nSet whether HTTP/0.9 responses should be tolerated.\nSet whether HTTP/1 connections will accept obsolete line …\nSet whether HTTP/1 connections will accept spaces between …\nSets whether invalid header lines should be silently …\nSet the maximum buffer size for the connection.\nSet whether to support preserving original header cases.\nSets the exact size of the read buffer to <em>always</em> use.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nSets the max connection-level flow control for HTTP2\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets whether HTTP2 keep-alive should apply while the …\nSets the maximum number of HTTP2 concurrent locally reset …\nSets the maximum frame size to use for HTTP2.\nSet the maximum write buffer size for each HTTP/2 stream.\nSet whether the connection <strong>must</strong> use HTTP/2.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Client with the default config.\nSet an optional timeout for idle sockets being kept-alive.\nSets the maximum idle connection per host allowed in the …\nSend a constructed <code>Request</code> using this <code>Client</code>.\nSet whether to retry requests that get disrupted before …\nUtilities used to interact with the Tower ecosystem.\nSet whether to automatically add the <code>Host</code> header to …\nA builder to configure an HTTP connection.\nA future that processes all HTTP state for the IO object.\nDeconstructed parts of a <code>Connection</code>.\nA future returned by <code>SendRequest::send_request</code>.\nThe sender side of an established connection.\nProvide an executor to execute background HTTP2 tasks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handshake future over some IO.\nConstructs a connection with the configured options and IO.\nSet whether HTTP/0.9 responses should be tolerated.\nSet whether HTTP/1 connections will accept obsolete line …\nSet whether HTTP/1 connections will accept spaces between …\nSet whether HTTP/1 connections will silently ignored …\nSet the maximum buffer size for the connection.\nSet whether to support preserving original header cases.\nSets the exact size of the read buffer to <em>always</em> use.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nSets the max connection-level flow control for HTTP2\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nReturns whether the extended CONNECT protocol is enabled …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets whether HTTP2 keep-alive should apply while the …\nSets the maximum number of HTTP2 concurrent locally reset …\nSets the maximum frame size to use for HTTP2.\nSet the maximum write buffer size for each HTTP/2 stream.\nSets whether HTTP2 is required.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner IO object, and additional information.\nThe original IO object used in the handshake.\nCreates a new connection builder.\nPolls to determine whether this sender can be used yet for …\nPoll the connection for completion, but without calling …\nA buffer of bytes that have been read but not processed as …\nSends a <code>Request</code> on the associated connection.\nPrevent shutdown of the underlying IO object at the end of …\n<code>CaptureConnection</code> allows callers to capture <code>Connected</code> …\nConnect to a destination, returning an IO transport.\nExtra information about the connected transport.\nDescribes a type returned by a connector.\nA connector for the <code>http</code> scheme.\nExtra information about the transport when an …\nCapture the connection for a given request\nReturn metadata describing the connection.\nRetrieve the connection metadata, if available\nDNS Resolution used by the <code>HttpConnector</code>.\nOption to enforce all <code>Uri</code>s have the <code>http</code> scheme.\nSet extra connection information to be set in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies the extra connection information into an <code>Extensions</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if the connected transport negotiated HTTP/2 as …\nDetermines if the connected transport is to an HTTP proxy.\nGet the local address of the transport used.\nSet that the connected transport negotiated HTTP/2 as its …\nConstruct a new HttpConnector.\nCreate new <code>Connected</code> type with empty metadata.\nConstruct a new HttpConnector.\nPoison this connection\nSet whether the connected transport is to an HTTP proxy.\nGet the remote address of the transport used.\nSet the connect timeout.\nSet timeout for RFC 6555 (Happy Eyeballs) algorithm.\nSet that all sockets have <code>SO_KEEPALIVE</code> set with the …\nSet that all sockets are bound to the configured address …\nSet that all sockets are bound to the configured IPv4 or …\nSet that all sockets have <code>SO_NODELAY</code> set to the supplied …\nSets the value of the SO_RCVBUF option on the socket.\nSet that all socket have <code>SO_REUSEADDR</code> set to the supplied …\nSets the value of the SO_SNDBUF option on the socket.\nWait for the connection to be established\nAn iterator of IP addresses returned from <code>getaddrinfo</code>.\nA future to resolve a name returned by <code>GaiResolver</code>.\nA resolver using blocking <code>getaddrinfo</code> calls in a …\nError indicating a given string was not a valid domain …\nA domain name to resolve into IP addresses.\nView the hostname as a string slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>GaiResolver</code>.\nCreates a connection via <code>SendRequest</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Connect</code> with some inner connector <code>C</code> and a …\nRepresents the <code>:protocol</code> pseudo-header used by the …\nA reason phrase in an HTTP/1 response.\nGets the reason phrase as bytes.\nReturns a str representation of the header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Bytes</code> directly into a <code>ReasonPhrase</code> without …\nConverts a static byte slice to a reason phrase.\nConverts a static string to a protocol name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvertises which content types the client is able to …\nAdvertises which character set the client is able to …\nAdvertises which content encoding the client is able to …\nAdvertises which languages the client is able to …\nMarker used by the server to advertise partial request …\nPreflight response indicating if the response to the …\nPreflight response indicating permitted HTTP headers.\nPreflight header response indicating permitted access …\nIndicates whether the response can be shared with …\nIndicates which headers can be exposed as part of the …\nIndicates how long the results of a preflight request can …\nInforms the server which HTTP headers will be used when an …\nInforms the server know which HTTP method will be used …\nIndicates the time in seconds the object has been in a …\nLists the set of methods support by a resource.\nAdvertises the availability of alternate services to …\nContains the credentials to authenticate a user agent with …\nA marker trait used to identify values that can be used as …\nSpecifies directives for caching mechanisms in both …\nIndicates how caches have handled a response and its …\nSpecifies directives that allow origin servers to control …\nControls whether or not the network connection stays open …\nIndicates if the content is expected to be displayed …\nUsed to compress the media-type.\nUsed to describe the languages intended for the audience.\nIndicates the size of the entity-body.\nIndicates an alternate location for the returned data.\nIndicates where in a full body message a partial message …\nAllows controlling resources the user agent is allowed to …\nAllows experimenting with policies by monitoring their …\nUsed to indicate the media type of the resource.\nContains stored HTTP cookies previously sent by the server …\nContains the date and time at which the message was …\nIndicates the client’s tracking preference.\nA drain iterator for <code>HeaderMap</code>.\nIdentifier for a specific version of a resource.\nIndicates expectations that need to be fulfilled by the …\nContains the date/time after which the response is …\nA view into a single location in a <code>HeaderMap</code>, which may be …\nContains information from the client-facing side of proxy …\nContains an Internet email address for a human user who …\nA view to all values stored in a single entry.\nSpecifies the domain name of the server and (optionally) …\nA set of HTTP headers\nRepresents an HTTP header field name\nRepresents an HTTP header field value.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on the modification date.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on range.\nMakes the request conditional based on the last …\nA marker trait used to identify values that can be used as …\nAn owning iterator over the entries of a <code>HeaderMap</code>.\nA possible error when converting a <code>HeaderName</code> from another …\nA possible error when converting a <code>HeaderValue</code> from a …\n<code>HeaderMap</code> entry iterator.\n<code>HeaderMap</code> mutable entry iterator\nAn iterator over <code>HeaderMap</code> keys.\nContent-Types that are acceptable for the response.\nAllows the server to point an interested client to another …\nIndicates the URL to redirect a page to.\nIndicates the max number of intermediaries the request …\nError returned when max capacity of <code>HeaderMap</code> is exceeded\nIndicates where a fetch originates from.\nAn occupied entry\nA view into a single occupied location in a <code>HeaderMap</code>.\nHTTP/1.0 header usually used for backwards compatibility.\nDefines the authentication method that should be used to …\nContains the credentials to authenticate a user agent to a …\nAssociates a specific cryptographic public key with a …\nSends reports of pinning violation to the report-uri …\nIndicates the part of a document that the server should …\nContains the address of the previous web page from which a …\nGoverns which referrer information should be included with …\nInforms the web browser that the current page or frame …\nThe Retry-After response HTTP header indicates how long …\nThe |Sec-WebSocket-Accept| header field is used in the …\nThe |Sec-WebSocket-Extensions| header field is used in the …\nThe |Sec-WebSocket-Key| header field is used in the …\nThe |Sec-WebSocket-Protocol| header field is used in the …\nThe |Sec-WebSocket-Version| header field is used in the …\nContains information about the software used by the origin …\nUsed to send cookies from the server to the user agent.\nTells the client to communicate with HTTPS instead of …\nInforms the server of transfer encodings willing to be …\nAllows the sender to include additional fields at the end …\nSpecifies the form of encoding used to safely transfer the …\nA possible error when converting a <code>HeaderValue</code> to a string …\nUsed as part of the exchange to upgrade the protocol.\nSends a signal to the server expressing the client’s …\nContains a string that allows identifying the requesting …\nDetermines how to match future requests with cached …\nAdded by proxies to track routing.\nA vacant entry\nA view into a single empty location in a <code>HeaderMap</code>.\nAn drain iterator of all values associated with a single …\nAn iterator of all values associated with a single header …\nA mutable iterator of all values associated with a single …\n<code>HeaderMap</code> value iterator.\n<code>HeaderMap</code> mutable value iterator\nGeneral HTTP header contains information about possible …\nDefines the authentication method that should be used to …\nMarker used by the server to indicate that the MIME types …\nControls DNS prefetching.\nIndicates whether or not a browser should be allowed to …\nStop pages from loading when an XSS attack is detected.\nInserts a key-value pair into the map.\nInsert the value into the entry.\nConverts a <code>HeaderValue</code> to a byte slice.\nReturns a <code>str</code> representation of the header.\nReturns the number of headers the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns true if the map contains a value for the specified …\nClears the map, returning all entries as an iterator.\nGets the given key’s corresponding entry in the map for …\nPerforms a case-insensitive comparison of the string …\nPerforms a case-insensitive comparison of the string …\nExtend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a byte slice to a <code>HeaderValue</code>.\nConverts a slice of bytes to an HTTP header name.\nAttempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.\nConvert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …\nConverts a HeaderName into a HeaderValue\nConverts a static string to a HTTP header name.\nConvert a static string to a <code>HeaderValue</code>.\nAttempt to convert a string to a <code>HeaderValue</code>.\nReturns a reference to the value associated with the key.\nGet a reference to the first value in the entry.\nReturns a view of all values associated with a key.\nReturns a mutable reference to the value associated with …\nGet a mutable reference to the first value in the entry.\nPanics\nInserts a key-value pair into the map.\nInsert the value into the entry.\nSets the value of the entry.\nInsert the value into the entry.\nSets the value of the entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves keys …\nTake ownership of the key\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nReturns true if the map contains no elements.\nReturns true if the <code>HeaderValue</code> has a length of zero bytes.\nReturns <code>true</code> if the value represents sensitive data.\nAn iterator visiting all key-value pairs.\nReturns an iterator visiting all values associated with …\nReturns an iterator visiting all values associated with …\nAn iterator visiting all key-value pairs, with mutable …\nReturns an iterator mutably visiting all values associated …\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key\nReturns a reference to the entry’s key.\nAn iterator visiting all keys.\nReturns the number of keys stored in the map.\nReturns the number of headers stored in the map.\nReturns the length of <code>self</code>.\nCreate an empty <code>HeaderMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves a key from the map, returning the value associated …\nRemove the entry from the map.\nRemove the entry from the map.\nRemove the entry from the map.\nReserves capacity for at least <code>additional</code> more headers to …\nMark that the header value represents sensitive …\nYields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …\nInserts a key-value pair into the map.\nGets the given key’s corresponding entry in the map for …\nInserts a key-value pair into the map.\nInsert the value into the entry.\nInsert the value into the entry.\nReserves capacity for at least <code>additional</code> more headers to …\nCreate an empty <code>HeaderMap</code> with the specified capacity.\nAn iterator visiting all values.\nAn iterator visiting all values mutably.\nCreate an empty <code>HeaderMap</code> with the specified capacity.\nAn executor of futures.\nPlace the future into the executor to be run.\nA builder for a <code>Server</code>.\nA listening HTTP server that accepts connections in both …\nThe <code>Accept</code> trait and supporting types.\nBinds to the provided address, and returns a <code>Builder</code>.\nStarts a <code>Builder</code> with the provided incoming stream.\nLower-level Server connection API.\nSets the <code>Executor</code> to deal with connection tasks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from a <code>std::net::TcpListener</code> …\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nSets whether to use keep-alive for HTTP/1 connections.\nSet the maximum buffer size.\nSets whether HTTP/1 is required.\nSet whether to support preserving original header cases.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nEnables the extended CONNECT protocol.\nSets the max connection-level flow control for HTTP2\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of local reset streams …\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nSets whether HTTP/2 is required.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local address that the server will be bound to.\nReturns the local address that this server is bound to.\nStart a new builder, wrapping an incoming stream and …\nConsume this <code>Builder</code>, creating a <code>Server</code>.\nSet the duration to remain idle before sending TCP …\nSet the duration between two successive TCP keepalive …\nSet the number of retransmissions to be carried out before …\nSet the value of <code>TCP_NODELAY</code> option for accepted …\nSet whether to sleep on accept errors.\nTries to bind to the provided address, and returns a …\nPrepares a server to handle graceful shutdown when the …\nAsynchronously accept incoming connections.\nThe connection type that can be accepted.\nThe error type that can occur when accepting a connection.\nAdapt a <code>Stream</code> of incoming connections into an <code>Accept</code>.\nPoll to accept the next connection.\nCreate an <code>Accept</code> with a polling function.\nA stream of connections from binding to an address.\nA transport returned yieled by <code>AddrIncoming</code>.\nA future building a new <code>Service</code> to a <code>Connection</code>.\nA future binding a connection with a Service.\nA lower-level configuration of the HTTP protocol.\nDeconstructed parts of a <code>Connection</code>.\nCreates a new <code>AddrIncoming</code> binding to provided socket …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AddrIncoming</code> from an existing …\nStart a graceful shutdown process for this connection.\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nEnables or disables HTTP/1 keep-alive.\nSets whether HTTP1 is required.\nSet whether to support preserving original header cases.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nEnables the extended CONNECT protocol.\nSets the max connection-level flow control for HTTP2.\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of pending reset streams …\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nSets whether HTTP2 is required.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the AddrStream and returns the underlying IO …\nReturn the inner IO object, and additional information.\nThe original IO object used in the handshake.\nGet the local address bound to this listener.\nReturns the local address of this connection.\nSet the maximum buffer size for the connection.\nCreates a new instance of the HTTP protocol, ready to …\nAggregates flushes to better support pipelined responses.\nAttempt to receive data on the socket, without removing …\nPoll the connection for completion, but without calling …\nA buffer of bytes that have been read but not processed as …\nReturns the remote (peer) address of this connection.\nBind a connection together with a <code>Service</code>.\nThe <code>Service</code> used to serve this connection.\nSet the duration to remain idle before sending TCP …\nSet the duration between two successive TCP keepalive …\nSet the number of retransmissions to be carried out before …\nSet the value of <code>TCP_NODELAY</code> option for accepted …\nSet whether to sleep on accept errors.\nReturn the inner IO object, and additional information, if …\nSet the executor used to spawn background tasks.\nEnable this connection to support higher-level HTTP …\nPrevent shutdown of the underlying IO object at the end of …\nErrors produced by the service.\nThe future response value.\nResponses given by the service.\nAn asynchronous function from a <code>Request</code> to a <code>Response</code>.\nProcess the request and return the response asynchronously.\nCreate a <code>MakeService</code> from a function.\nReturns <code>Poll::Ready(Ok(()))</code> when the service is able to …\nCreate a <code>Service</code> from a function.\nA future for a possible HTTP upgrade.\nThe deconstructed parts of an <code>Upgraded</code> type.\nAn upgraded HTTP connection.\nTries to downcast the internal trait object to the type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe original IO object used before the upgrade.\nGets a pending HTTP upgrade from this message.\nA buffer of bytes that have been read but not processed as …")