searchState.loadedDescShard("jiff", 0, "Jiff is a datetime library for Rust that encourages you to …\nRounds toward positive infinity.\nA day is usually 24 hours, but some days may have …\nAn error that can occur in this crate.\nRounds away from zero like <code>Ceil</code> for positive spans and …\nRounds toward negative infinity.\nRounds to the nearest allowed value like <code>HalfExpand</code>, but …\nRounds to the nearest allowed value like <code>HalfExpand</code>, but …\nRounds to the nearest value allowed by the rounding …\nRounds to the nearest allowed value like <code>HalfExpand</code>, but …\nRounds to the nearest allowed value like <code>HalfExpand</code>, but …\nAn hour is always 60 minutes.\nThe maximum possible duration.\nThe maximum representable timestamp.\nThe minimum possible duration. Or the “most negative” …\nThe minimum representable timestamp.\nA microsecond is always 1,000 nanoseconds.\nA millisecond is always 1,000 microseconds.\nA minute is always 60 seconds. (Jiff behaves as if leap …\nA Gregorian calendar month. It usually has one of 28, 29, …\nA nanosecond is the smallest granularity of time supported …\nThe mode for dealing with the remainder when rounding …\nA second is always 1,000 milliseconds.\nA signed duration of time represented as a 96-bit integer …\nOptions for <code>SignedDuration::round</code>.\nA span of time represented via a mixture of calendar and …\nOptions for <code>Span::checked_add</code> and <code>Span::checked_sub</code>.\nOptions for <code>Span::compare</code>.\nA wrapper for <code>Span</code> that implements the <code>Hash</code>, <code>Eq</code> and …\nA relative datetime for use with <code>Span</code> APIs.\nOptions for <code>Span::round</code>.\nOptions for <code>Span::total</code>.\nAn instant in time represented as the number of …\nOptions for <code>Timestamp::checked_add</code> and …\nOptions for <code>Timestamp::since</code> and <code>Timestamp::until</code>.\nA type for formatting a <code>Timestamp</code> with a specific offset.\nOptions for <code>Timestamp::round</code>.\nAn iterator over periodic timestamps, created by …\nA trait for enabling concise literals for creating <code>Span</code> …\nRounds toward zero, chopping off any fractional part of a …\nThe Unix epoch represented as a timestamp.\nA way to refer to a single calendar or clock unit.\nA week is 7 days that either begins on Sunday or Monday.\nA Gregorian calendar year. It usually has 365 days for …\nA duration of zero time.\nA time zone aware instant in time.\nOptions for <code>Timestamp::checked_add</code> and …\nOptions for <code>Zoned::since</code> and <code>Zoned::until</code>.\nOptions for <code>Zoned::round</code>.\nA builder for setting the fields on a <code>Zoned</code>.\nLonger form documentation for Jiff.\nReturns the absolute value of this signed duration.\nReturns a new span that is the absolute value of this span.\nReturns this timestamp as a <code>SignedDuration</code> since the Unix …\nReturns the number of whole hours in this duration.\nReturns the total duration in units of whole microseconds.\nReturns this timestamp as a number of microseconds since …\nReturns the total duration in units of whole milliseconds.\nReturns the number of milliseconds, with a possible …\nReturns the number of milliseconds, with a possible …\nReturns this timestamp as a number of milliseconds since …\nReturns the number of whole minutes in this duration.\nReturns the total duration in units of whole nanoseconds.\nReturns this timestamp as a number of nanoseconds since …\nReturns this timestamp as a number of seconds since the …\nReturns the number of whole seconds in this duration.\nReturns the number of seconds, with a possible fractional …\nReturns the number of seconds, with a possible fractional …\nCreate a new <code>Zoned</code> from the fields set on this …\nAdd two signed durations together. If overflow occurs, …\nAdds a span to this one and returns the sum as a new span.\nAdd the given span of time to this timestamp.\nAdd the given span of time to this zoned datetime. If the …\nDivide this duration by an integer. If the division …\nMultiply this signed duration by an integer. If the …\nMultiplies each field in this span by a given integer.\nReturns this duration with its sign flipped.\nSubtract one signed duration from another. If overflow …\nThis routine is identical to <code>Span::checked_add</code> with the …\nThis routine is identical to <code>Timestamp::checked_add</code> with …\nThis routine is identical to <code>Zoned::checked_add</code> with the …\nFacilities for dealing with inexact dates and times.\nCompares two spans in terms of how long they are. Negative …\nCreates a new <code>Timestamp</code> value in a <code>const</code> context.\nReturns the civil date component of this zoned datetime.\nSet the year, month and day fields via the <code>Date</code> given.\nReturns the civil datetime component of this zoned …\nEquivalent to <code>days()</code>, but reads better for singular units.\nEquivalent to <code>days()</code>, but reads better for singular units.\nReturns the day for this zoned datetime.\nSet the day field on a <code>Zoned</code>.\nReturns the ordinal day of the year that this zoned …\nSet the day field on a <code>Zoned</code> via the ordinal number of a …\nReturns the ordinal day of the year that this zoned …\nSet the day field on a <code>Zoned</code> via the ordinal number of a …\nCreate a new span from this integer in units of days.\nSet the number of days on this span. The value may be …\nThis is a convenience function for setting the relative …\nThis is a convenience function for setting the relative …\nThis is a convenience function for setting the relative …\nThis is a convenience function for setting the relative …\nCreates a special marker that indicates all days ought to …\nReturns the ordinal number of the last day in the month in …\nReturns the ordinal number of the last day in the year in …\nSet the disambiguation strategy for when a zoned datetime …\nFormat a <code>Timestamp</code> datetime into a string with the given …\nDivides this signed duration by another signed duration …\nDivides this signed duration by another signed duration …\nReturns the result of dividing this duration by the given …\nReturns the result of dividing this duration by the given …\nThis routine is identical to <code>Timestamp::duration_until</code>, …\nThis routine is identical to <code>Zoned::duration_until</code>, but the\nReturns an absolute duration representing the elapsed time …\nReturns an absolute duration representing the elapsed time …\nReturns the end of the day, corresponding to …\nReturns the year and its era.\nSet the year of a zoned datetime via its era and its …\nReturns this <code>Span</code> as a value with a type that implements …\nReturns the first date of the month that this zoned …\nReturns the first date of the year that this zoned …\nConfigurable support for printing and parsing datetimes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new error value from <code>core::fmt::Arguments</code>.\nCreates a new timestamp from a <code>Duration</code> with the given …\nCreates a new <code>SignedDuration</code> from the given number of …\nCreates a new <code>SignedDuration</code> from the given number of whole\nCreates a new instant in time from the number of …\nCreates a new <code>SignedDuration</code> from the given number of whole\nCreates a new instant in time from the number of …\nCreates a new <code>SignedDuration</code> from the given number of …\nCreates a new <code>SignedDuration</code> from the given number of whole\nCreates a new instant in time from the number of …\nCreates a new instant in time from the number of seconds …\nCreates a new <code>SignedDuration</code> from the given number of …\nReturns a signed duration corresponding to the number of …\nReturns a signed duration corresponding to the number of …\nReturns the number of day units in this span.\nReturns the number of hour units in this span.\nReturns the number of microsecond units in this span.\nReturns the number of millisecond units in this span.\nReturns the number of minute units in this span.\nReturns the number of month units in this span.\nReturns the number of nanosecond units in this span.\nReturns the number of second units in this span.\nReturns the number of week units in this span.\nReturns the number of year units in this span.\nEquivalent to <code>hours()</code>, but reads better for singular units.\nEquivalent to <code>hours()</code>, but reads better for singular units.\nReturns the “hour” component of this zoned datetime.\nSet the hour field on a <code>Zoned</code>.\nCreate a new span from this integer in units of hours.\nSet the number of hours on this span. The value may be …\nReturns true if and only if the year in which this zoned …\nCreates a <code>Zoned</code> value by attaching a time zone for the …\nReturn a new zoned datetime with precisely the same …\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when this duration is negative. That is, less …\nReturns true if and only if this span is negative.\nReturns true when this duration is positive. That is, …\nReturns true if and only if this span is positive.\nReturns true if this duration spans no time.\nReturns true if and only if every field in this span is …\nReturns true if and only if this timestamp corresponds to …\nConstruct a civil ISO 8601 week date from this zoned …\nSet the largest units allowed in the span returned.\nSet the largest units allowed in the span returned.\nSet the largest units allowed in the span returned.\nReturns the last date of the month that this zoned …\nReturns the last date of the year that this zoned datetime …\nEquivalent to <code>microseconds()</code>, but reads better for …\nEquivalent to <code>microseconds()</code>, but reads better for …\nReturns the “microsecond” component of this zoned …\nSet the microsecond field on a <code>Zoned</code>.\nCreate a new span from this integer in units of …\nSet the number of microseconds on this span. The value may …\nEquivalent to <code>milliseconds()</code>, but reads better for …\nEquivalent to <code>milliseconds()</code>, but reads better for …\nReturns the “millisecond” component of this zoned …\nSet the millisecond field on a <code>Zoned</code>.\nCreate a new span from this integer in units of …\nSet the number of milliseconds on this span. The value may …\nEquivalent to <code>minutes()</code>, but reads better for singular …\nEquivalent to <code>minutes()</code>, but reads better for singular …\nReturns the “minute” component of this zoned datetime.\nSet the minute field on a <code>Zoned</code>.\nCreate a new span from this integer in units of minutes.\nSet the number of minutes on this span. The value may be …\nSet the rounding mode.\nSet the rounding mode.\nSet the rounding mode.\nSet the rounding mode.\nSet the rounding mode.\nSet the rounding mode.\nEquivalent to <code>months()</code>, but reads better for singular …\nEquivalent to <code>months()</code>, but reads better for singular …\nReturns the month for this zoned datetime.\nSet the month field on a <code>Zoned</code>.\nCreate a new span from this integer in units of months.\nSet the number of months on this span. The value may be …\nReturns the result of multiplying this duration by the …\nReturns the result of multiplying this duration by the …\nEquivalent to <code>nanoseconds()</code>, but reads better for singular …\nEquivalent to <code>nanoseconds()</code>, but reads better for singular …\nReturns the “nanosecond” component of this zoned …\nSet the nanosecond field on a <code>Zoned</code>.\nCreate a new span from this integer in units of …\nSet the number of nanoseconds on this span. The value may …\nReturns a new span that negates this span.\nCreates a new <code>SignedDuration</code> from the given number of …\nCreate a new default configuration for rounding a signed …\nCreates a new span representing a zero duration. That is, …\nCreate a new default configuration for rounding a span via …\nCreates a new instant in time represented as a timestamp.\nCreate a new default configuration for computing the span …\nCreate a new default configuration for rounding a <code>Timestamp</code>…\nCreates a new <code>Zoned</code> value from a specific instant in a …\nCreate a new default configuration for computing the span …\nCreate a new default configuration for rounding a <code>Zoned</code>.\nReturns the current system time as a timestamp.\nReturns the current system time in this system’s time …\nReturns the “nth” weekday from this zoned datetime, …\nReturns the “nth” weekday from the beginning or end of …\nReturns the time zone offset of this zoned datetime.\nSet the offset to use in the new zoned datetime.\nSet the conflict resolution strategy for when an offset is …\nSet the relative datetime to use when rounding a span.\nReturns a new signed duration that is rounded according to …\nReturns a new span that is balanced and rounded.\nRounds this timestamp according to the <code>TimestampRound</code> …\nRounds this zoned datetime according to the <code>ZonedRound</code> …\nAdd two signed durations together. If overflow occurs, …\nThis routine is identical to <code>Timestamp::checked_add</code>, …\nThis routine is identical to <code>Zoned::checked_add</code>, except the\nMultiply this signed duration by an integer. If the …\nAdd two signed durations together. If overflow occurs, …\nThis routine is identical to <code>Timestamp::saturating_add</code> …\nThis routine is identical to <code>Zoned::saturating_add</code> with …\nEquivalent to <code>seconds()</code>, but reads better for singular …\nEquivalent to <code>seconds()</code>, but reads better for singular …\nReturns the “second” component of this zoned datetime.\nSet the second field on a <code>Zoned</code>.\nCreate a new span from this integer in units of seconds.\nSet the number of seconds on this span. The value may be …\nReturn an iterator of periodic timestamps determined by …\nReturns a number that represents the sign of this duration.\nReturns the “sign number” or “signum” of this span.\nReturns the sign of this timestamp.\nThis routine is identical to <code>Timestamp::until</code>, but the …\nThis routine is identical to <code>Zoned::until</code>, but the order …\nSet the smallest units allowed in the duration returned. …\nSet the smallest units allowed in the span returned. These …\nSet the smallest units allowed in the span returned.\nSet the smallest units allowed in the timestamp returned …\nSet the smallest units allowed in the span returned.\nSet the smallest units allowed in the zoned datetime …\nReturns the beginning of the day, corresponding to <code>00:00:00</code>…\nFormats this timestamp according to the given <code>format</code>.\nFormats this zoned datetime according to the given <code>format</code>.\nParses a timestamp (expressed as broken down time) in <code>input</code>…\nParses a zoned datetime in <code>input</code> matching the given <code>format</code>.\nReturns the fractional part of this duration in whole …\nReturns the fractional second component of this timestamp …\nReturns the fractional part of this duration in whole …\nReturns the fractional second component of this timestamp …\nReturns the fractional part of this duration in whole …\nReturns the fractional second component of this timestamp …\nReturns the fractional nanosecond for this <code>Zoned</code> value.\nSet the subsecond nanosecond field on a <code>Zoned</code>.\nReturns the duration from <code>time1</code> until <code>time2</code> where the …\nReturns the civil time component of this zoned datetime.\nSet the hour, minute, second, millisecond, microsecond and …\nReturns the time zone attached to this <code>Zoned</code> value.\nReturns the precise instant in time referred to by this …\nConverts a <code>Span</code> to a <code>SignedDuration</code> relative to the date …\nCreates a <code>Zoned</code> value by attaching the given time zone to …\nReturns the zoned datetime with a date immediately …\nReturns a floating point number representing the total …\nSet the number of days on this span. The value may be …\nReturns a signed duration corresponding to the number of …\nReturns a signed duration corresponding to the number of …\nSet the number of hours on this span. The value may be …\nSet the number of microseconds on this span. The value may …\nSet the number of milliseconds on this span. The value may …\nSet the number of minutes on this span. The value may be …\nSet the number of months on this span. The value may be …\nSet the number of nanoseconds on this span. The value may …\nSet the number of seconds on this span. The value may be …\nSet the number of weeks on this span. The value may be …\nSet the number of years on this span. The value may be …\nRoutines for interacting with time zones and the zoneinfo …\nReturns the absolute value of this signed duration as a …\nReturns a span representing the elapsed time from this …\nReturns a span representing the elapsed time from this …\nEquivalent to <code>weeks()</code>, but reads better for singular units.\nEquivalent to <code>weeks()</code>, but reads better for singular units.\nReturns the weekday corresponding to this zoned datetime.\nCreate a new span from this integer in units of weeks.\nSet the number of weeks on this span. The value may be …\nCreate a builder for constructing a new <code>DateTime</code> from the …\nReturn a new zoned datetime with precisely the same …\nEquivalent to <code>years()</code>, but reads better for singular units.\nEquivalent to <code>years()</code>, but reads better for singular units.\nReturns the year for this zoned datetime.\nSet the year field on a <code>Zoned</code>.\nCreate a new span from this integer in units of years.\nSet the number of years on this span. The value may be …\nReturns the zoned datetime with a date immediately …\nCHANGELOG\nComparison with other Rust datetime crates\nThe API design rationale for Jiff\nPlatform support\nThe “before common era” era.\nThe “common era” era.\nA representation of a civil date in the Gregorian calendar.\nOptions for <code>Date::checked_add</code> and <code>Date::checked_sub</code>.\nOptions for <code>Date::since</code> and <code>Date::until</code>.\nAn iterator over periodic dates, created by <code>Date::series</code>.\nA representation of a civil datetime in the Gregorian …\nOptions for <code>DateTime::checked_add</code> and <code>DateTime::checked_sub</code>…\nOptions for <code>DateTime::since</code> and <code>DateTime::until</code>.\nOptions for <code>DateTime::round</code>.\nAn iterator over periodic datetimes, created by …\nA builder for setting the fields on a <code>DateTime</code>.\nA builder for setting the fields on a <code>Date</code>.\nThe era corresponding to a particular year.\nA type representing an ISO 8601 week date.\nThe maximum representable Gregorian date.\nThe maximum representable Gregorian datetime.\nThe minimum representable ISO week date.\nThe maximum representable time value.\nThe minimum representable Gregorian date.\nThe minimum representable Gregorian datetime.\nThe maximum representable ISO week date.\nThe minimum representable time value.\nA representation of civil “wall clock” time.\nOptions for <code>Time::checked_add</code> and <code>Time::checked_sub</code>.\nOptions for <code>Time::since</code> and <code>Time::until</code>.\nOptions for <code>Time::round</code>.\nAn iterator over periodic times, created by <code>Time::series</code>.\nA builder for setting the fields on a <code>Time</code>.\nA representation for the day of the week.\nAn unending iterator of the days of the week.\nAn unending iterator of the days of the week in reverse.\nThe first day of the zeroth year.\nThe first day of the zeroth year.\nThe first day of the zeroth year.\nA convenience function for constructing a <code>DateTime</code> from …\nCreate a new <code>Date</code> from the fields set on this …\nCreate a new <code>DateTime</code> from the fields set on this …\nCreate a new <code>Time</code> from the fields set on this …\nAdd the given span of time to this date. If the sum would …\nAdd the given span of time to this datetime. If the sum …\nAdd the given span to this time and return an error if the …\nThis routine is identical to <code>Date::checked_add</code> with the …\nThis routine is identical to <code>DateTime::checked_add</code> with the\nThis routine is identical to <code>Time::checked_add</code> with the …\nCreates a new <code>Date</code> value in a <code>const</code> context.\nCreates a new <code>DateTime</code> value in a <code>const</code> context.\nCreates a new <code>Time</code> value in a <code>const</code> context.\nStarting with this weekday, this returns an unending …\nStarting with this weekday, this returns an unending …\nCreates a new <code>Date</code> value in a <code>const</code> context.\nReturns the date component of this datetime.\nSet the year, month and day fields via the <code>Date</code> given.\nConverts this ISO week date to a Gregorian <code>Date</code>.\nCreates a new <code>DateTime</code> value in a <code>const</code> context.\nReturns the day for this date.\nSet the day field on a <code>Date</code>.\nReturns the day for this datetime.\nSet the day field on a <code>DateTime</code>.\nReturns the ordinal day of the year that this date resides …\nSet the day field on a <code>Date</code> via the ordinal number of a …\nReturns the ordinal day of the year that this datetime …\nSet the day field on a <code>DateTime</code> via the ordinal number of …\nReturns the ordinal day of the year that this date resides …\nSet the day field on a <code>Date</code> via the ordinal number of a …\nReturns the ordinal day of the year that this datetime …\nSet the day field on a <code>DateTime</code> via the ordinal number of …\nReturns the total number of days in the the month in which …\nReturns the total number of days in the the month in which …\nReturns the total number of days in the the year in which …\nReturns the total number of days in the the year in which …\nReturns the total number of days in the year of this ISO …\nThis routine is identical to <code>Date::duration_until</code>, but the …\nThis routine is identical to <code>DateTime::duration_until</code>, but …\nThis routine is identical to <code>Time::duration_until</code>, but the …\nReturns an absolute duration representing the elapsed time …\nReturns an absolute duration representing the elapsed time …\nReturns an absolute duration representing the elapsed time …\nReturns the end of the day that this datetime resides in.\nReturns the year and its era.\nSet year of a date via its era and its non-negative …\nReturns the year and its era.\nSet year of a datetime via its era and its non-negative …\nReturns the first date of the month that this date resides …\nReturns the first date of the month that this datetime …\nReturns the ISO 8601 week date corresponding to the first …\nReturns the first date of the year that this date resides …\nReturns the first date of the year that this datetime …\nReturns the ISO 8601 week date corresponding to the first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a Gregorian date to an ISO week date.\nConstruct a Gregorian date from an ISO 8601 week date.\nConvert an offset to a structured <code>Weekday</code>.\nConvert an offset to a structured <code>Weekday</code>.\nCreates a <code>DateTime</code> from its constituent parts.\nConvert an offset to a structured <code>Weekday</code>.\nConvert an offset to a structured <code>Weekday</code>.\nReturns the “hour” component of this datetime.\nSet the hour field on a <code>DateTime</code>.\nReturns the “hour” component of this time.\nSet the hour field on a <code>Time</code>.\nReturns true if and only if the year in which this date …\nReturns true if and only if the year in which this …\nReturns true if and only if the year of this week date is …\nConverts a civil date to a <code>Zoned</code> datetime by adding the …\nConverts a civil datetime to a <code>Zoned</code> datetime by adding …\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nSet the rounding increment for the smallest unit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct an ISO 8601 week date from this Gregorian date.\nConstruct an ISO 8601 week date from this datetime.\nSet the largest units allowed in the span returned.\nSet the largest units allowed in the span returned.\nSet the largest units allowed in the span returned.\nReturns the last date of the month that this date resides …\nReturns the last date of the month that this datetime …\nReturns the ISO 8601 week date corresponding to the last …\nReturns the last date of the year that this date resides …\nReturns the last date of the year that this datetime …\nReturns the ISO 8601 week date corresponding to the last …\nReturns the “microsecond” component of this datetime.\nSet the microsecond field on a <code>DateTime</code>.\nReturns the “microsecond” component of this time.\nSet the microsecond field on a <code>Time</code>.\nReturns the first moment of time in a day.\nReturns the “millisecond” component of this datetime.\nSet the millisecond field on a <code>DateTime</code>.\nReturns the “millisecond” component of this time.\nSet the millisecond field on a <code>Time</code>.\nReturns the “minute” component of this datetime.\nSet the minute field on a <code>DateTime</code>.\nReturns the “minute” component of this time.\nSet the minute field on a <code>Time</code>.\nSet the rounding mode.\nSet the rounding mode.\nSet the rounding mode.\nSet the rounding mode.\nSet the rounding mode.\nReturns the month for this date.\nSet the month field on a <code>Date</code>.\nReturns the month for this datetime.\nSet the month field on a <code>DateTime</code>.\nReturns the “nanosecond” component of this datetime.\nSet the nanosecond field on a <code>DateTime</code>.\nReturns the “nanosecond” component of this time.\nSet the nanosecond field on a <code>Time</code>.\nCreates a new <code>Date</code> value from its component year, month …\nCreate a new default configuration for computing the span …\nCreates a new <code>DateTime</code> value from its component year, …\nCreate a new default configuration for computing the span …\nCreate a new default configuration for rounding a <code>DateTime</code>.\nCreate a new ISO week date from it constituent parts.\nCreates a new <code>Time</code> value from its component hour, minute, …\nCreate a new default configuration for computing the span …\nCreate a new default configuration for rounding a <code>Time</code>.\nReturns the next weekday, wrapping around at the end of …\nReturns the “nth” weekday from this date, not …\nReturns the “nth” weekday from this datetime, not …\nReturns the “nth” weekday from the beginning or end of …\nReturns the “nth” weekday from the beginning or end of …\nA convenience function for constructing a <code>DateTime</code> from …\nReturns the previous weekday, wrapping around at the …\nRounds this datetime according to the <code>DateTimeRound</code> …\nRounds this time according to the <code>TimeRound</code> configuration …\nThis routine is identical to <code>Date::checked_add</code>, except the …\nThis routine is identical to <code>DateTime::checked_add</code>, except …\nThis routine is identical to <code>Time::checked_add</code>, except the …\nThis routine is identical to <code>Date::saturating_add</code> with the …\nThis routine is identical to <code>DateTime::saturating_add</code> with …\nThis routine is identical to <code>Time::saturating_add</code> with the …\nReturns the “second” component of this datetime.\nSet the second field on a <code>DateTime</code>.\nReturns the “second” component of this time.\nSet the second field on a <code>Time</code>.\nReturn an iterator of periodic dates determined by the …\nReturn an iterator of periodic datetimes determined by the …\nReturn an iterator of periodic times determined by the …\nThis routine is identical to <code>Date::until</code>, but the order of …\nThis routine is identical to <code>DateTime::until</code>, but the …\nThis routine is identical to <code>Time::until</code>, but the order of …\nReturns the number of days from <code>other</code> to this weekday.\nSet the smallest units allowed in the span returned.\nSet the smallest units allowed in the span returned.\nSet the smallest units allowed in the datetime returned …\nSet the smallest units allowed in the span returned.\nSet the smallest units allowed in the time returned after …\nReturns the beginning of the day that this datetime …\nFormats this civil date according to the given <code>format</code>.\nFormats this civil datetime according to the given <code>format</code>.\nFormats this civil time according to the given <code>format</code>.\nParses a civil date in <code>input</code> matching the given <code>format</code>.\nParses a civil datetime in <code>input</code> matching the given <code>format</code>.\nParses a civil time in <code>input</code> matching the given <code>format</code>.\nReturns the fractional nanosecond for this <code>DateTime</code> value.\nSet the subsecond nanosecond field on a <code>DateTime</code>.\nReturns the fractional nanosecond for this <code>Time</code> value.\nSet the subsecond nanosecond field on a <code>Time</code>.\nCreates a new <code>Time</code> value in a <code>const</code> context.\nReturns the time component of this datetime.\nSet the hour, minute, second, millisecond, microsecond and …\nGiven a <code>Time</code>, this constructs a <code>DateTime</code> value with its …\nGiven a <code>Date</code>, this constructs a <code>DateTime</code> value with its …\nReturns this weekday as an offset.\nReturns this weekday as an offset.\nReturns this weekday as an offset.\nReturns this weekday as an offset.\nConverts a civil datetime to a <code>Zoned</code> datetime by adding …\nConverts a civil datetime to a <code>Zoned</code> datetime by adding …\nReturns the date immediately following this one.\nReturns the datetime with a date immediately following …\nReturns the ISO 8601 date immediately following this one.\nReturns a span representing the elapsed time from this …\nReturns a span representing the elapsed time from this …\nReturns a span representing the elapsed time from this …\nReturns the number of days until <code>other</code> from this weekday.\nReturns the week component of this ISO 8601 week date.\nReturns the weekday corresponding to this date.\nReturns the weekday corresponding to this datetime.\nReturns the day component of this ISO 8601 week date.\nReturns the total number of weeks in the year of this ISO …\nCreate a builder for constructing a <code>Date</code> from the fields …\nCreate a builder for constructing a new <code>DateTime</code> from the …\nCreate a builder for constructing a <code>Time</code> from the fields …\nAdd the given span to this time and wrap around on …\nAdd the given number of days to this weekday, using …\nThis routine is identical to <code>Time::wrapping_add</code> with the …\nSubtract the given number of days from this weekday, using …\nReturns the year for this date.\nSet the year field on a <code>Date</code>.\nReturns the year for this datetime.\nSet the year field on a <code>DateTime</code>.\nReturns the year component of this ISO 8601 week date.\nReturns the date immediately preceding this one.\nReturns the datetime with a date immediately preceding …\nReturns the ISO 8601 week date immediately preceding this …\nAn adapter for using <code>std::fmt::Write</code> implementations with …\nAn adapter for using <code>std::io::Write</code> implementations with …\nA trait for printing datetimes or spans into …\nA bespoke but easy to read format for <code>Span</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSupport for printing and parsing instants using the RFC …\nSupport for “printf”-style parsing and formatting.\nA hybrid format derived from RFC 3339, RFC 9557 and ISO …\nWrite the given character to this writer, returning …\nWrite the given string to this writer, returning whether …\nSets the sign format based on other configuration options.\nInserts one ASCII whitespace between the unit designator …\nInserts one ASCII whitespace between the unit value and …\nThis writes out the shortest possible label for each unit …\nConfiguration for <code>SpanPrinter::designator</code>.\nConfiguration for <code>SpanPrinter::direction</code>.\nA sign is always written, with <code>-</code> for negative spans and <code>+</code> …\nConfiguration for <code>SpanPrinter::fractional</code>.\nThe smallest whole integer unit allowed is hours.\nA special mode that uses designator labels that are known …\nThe smallest whole integer unit allowed is microseconds.\nThe smallest whole integer unit allowed is milliseconds.\nThe smallest whole integer unit allowed is minutes.\nDoes not insert any ASCII whitespace.\nThe smallest whole integer unit allowed is seconds.\nThis writes out a short but not minimal label for each …\nWhen set, a sign is only written when the span or duration …\nConfiguration for <code>SpanPrinter::spacing</code>.\nA parser for Jiff’s “friendly” duration format.\nA printer for Jiff’s “friendly” duration format.\nWhen set, a sign is only written when the span or duration …\nThis writes out the full word of each unit designation. …\nWhen enabled, commas are written after unit designators.\nConfigures the kind of unit designators to use.\nConfigures how and when the sign for the duration is …\nFormat a <code>SignedDuration</code> into a string using the “friendly…\nEnable fractional formatting for the given unit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFormats the span or duration into a <code>HH:MM:SS[.fffffffff]</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new parser for the “friendly” duration …\nCreates a new printer for the “friendly” duration …\nThe padding to use when writing unit values.\nRun the parser on the given string (which may be plain …\nRun the parser on the given string (which may be plain …\nThe precision to use when writing fractional unit values.\nPrint a <code>SignedDuration</code> to the given writer using the “…\nPrint a <code>Span</code> to the given writer using the “friendly” …\nConfigures the spacing between the units and the …\nFormat a <code>Span</code> into a string using the “friendly” …\nSets the unit to use when printing a duration that is zero.\nA parser for RFC 2822 datetimes.\nA printer for RFC 2822 datetimes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new RFC 2822 datetime parser with the default …\nCreate a new RFC 2822 datetime printer with the default …\nParse an RFC 2822 datetime string into a <code>Zoned</code>.\nParse an RFC 2822 datetime string into a <code>Timestamp</code>.\nParse a datetime string into a <code>Zoned</code> value.\nPrint a <code>Timestamp</code> datetime to the given writer.\nPrint a <code>Timestamp</code> datetime to the given writer in a way …\nPrint a <code>Zoned</code> datetime to the given writer.\nWhen enabled, parsing will permit the weekday to be …\nFormat a <code>Timestamp</code> datetime into a string in a way that is …\nFormat a <code>Timestamp</code> datetime into a string.\nConvert a <code>Zoned</code> to an RFC 2822 datetime string.\nFormat a <code>Zoned</code> datetime into a string.\n“ante meridiem” or “before midday.”\nThe “broken down time” used by parsing and formatting.\nConfiguration for customizing the behavior of formatting …\nAn interface for customizing <code>strtime</code>-style parsing and …\nThe default trait implementation of <code>Custom</code>.\nA “lazy” implementation of <code>std::fmt::Display</code> for …\nThese are “extensions” to the standard <code>strftime</code> …\nA label to disambiguate hours on a 12-hour clock.\n“post meridiem” or “after midday.”\nA POSIX locale implementation of <code>Custom</code>.\nSet the implementation of <code>Custom</code> to use in <code>strtime</code>-style …\nReturns the parsed day, if available.\nReturns the parsed day of the year (1-366), if available.\nFormat the given broken down time using the format string …\nFormat this broken down time using the format string given.\nCalled when formatting a datetime with the <code>%r</code> flag.\nCalled when formatting a datetime with the <code>%x</code> flag.\nCalled when formatting a datetime with the <code>%c</code> flag.\nCalled when formatting a datetime with the <code>%X</code> flag.\nFormat this broken down time with a specific configuration …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the parsed hour, if available.\nReturns the time zone IANA identifier, if available.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the parsed ISO 8601 week-based number, if …\nReturns the parsed ISO 8601 week-based year, if available.\nEnable lenient formatting.\nReturns the parsed meridiem, if available.\nReturns the parsed minute, if available.\nReturns the Monday based week number.\nReturns the parsed month, if available.\nCreate a new default <code>Config</code> that uses <code>DefaultCustom</code>.\nCreate a new instance of this default customization.\nCreate a new instance of this POSIX customization.\nReturns the parsed offset, if available.\nParse the given <code>input</code> according to the given <code>format</code> string.\nParse the given <code>input</code> according to the given <code>format</code> string.\nParse a prefix of the given <code>input</code> according to the given …\nReturns the parsed second, if available.\nSet the day on this broken down time.\nSet the day of year on this broken down time.\nSet the hour on this broken down time.\nSet the IANA time zone identifier on this broken down time.\nSet the ISO 8601 week-based number on this broken down …\nSet the ISO 8601 week-based year on this broken down time.\nSet the minute on this broken down time.\nSet the Monday based week number.\nSet the month on this broken down time.\nSet the time zone offset on this broken down time.\nSet the second on this broken down time.\nSet the subsecond nanosecond on this broken down time.\nSet the Sunday based week number.\nSet the weekday on this broken down time.\nSet the year on this broken down time.\nReturns the parsed subsecond nanosecond, if available.\nReturns the Sunday based week number.\nExtracts a civil date from this broken down time.\nExtracts a civil datetime from this broken down time.\nFormat this broken down time using the format string given …\nFormat this broken down time with a specific configuration …\nExtracts a civil time from this broken down time.\nExtracts a timestamp from this broken down time.\nExtracts a zoned datetime from this broken down time.\nExtracts a zoned datetime from this broken down time and …\nReturns the parsed weekday, if available.\nReturns the parsed year, if available.\nA parser for Temporal datetimes.\nA printer for Temporal datetimes.\nThe time zone annotation is a name, usually an IANA time …\nA specific numeric offset, including whether the parsed …\nThe time zone annotation is an offset. For example, <code>-05:00</code>.\nA low level representation of a parsed Temporal ISO 8601 …\nA specific numeric offset, including the sign of the …\nAn offset parsed from a Temporal ISO 8601 datetime string, …\nA parser for Temporal durations.\nA printer for Temporal durations.\nAn RFC 9557 time zone annotation, for use with <code>Pieces</code>.\nThe kind of time zone found in an RFC 9557 timestamp, for …\nA time zone annotation parsed from a datetime string.\nThe “Zulu” offset, corresponding to UTC in a context …\nReturns the name of this time zone annotation as a string …\nReturns the civil date in this <code>Pieces</code>.\nFormat a <code>civil::Date</code> into a string.\nFormat a <code>civil::DateTime</code> into a string.\nSet the disambiguation strategy for when a datetime falls …\nFormat a <code>SignedDuration</code> into a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>Pieces</code> into an “owned” value whose …\nConverts this time zone annotation into an “owned” …\nConverts this time zone annotation kind into an “owned”…\nConverts this time zone annotation name into an “owned”…\nReturns true when this time zone is marked as “critical.…\nReturns whether the sign of the offset is negative or not.\nReturns the “kind” of this annotation. The kind is …\nUse lowercase for the datetime separator and the <code>Z</code> (Zulu) …\nUse lowercase for unit designator labels.\nCreate a new Temporal datetime parser with the default …\nCreate a new Temporal datetime printer with the default …\nCreate a new Temporal datetime printer with the default …\nCreate a new Temporal span printer with the default …\nReturns the offset in this <code>Pieces</code>.\nReturns the numeric offset.\nSet the conflict resolution strategy for when an offset in …\nParses a Temporal ISO 8601 datetime string into a <code>Pieces</code>.\nParse a civil date string into a <code>civil::Date</code>.\nParse a civil datetime string into a <code>civil::DateTime</code>.\nParse an ISO 8601 duration string into a <code>SignedDuration</code> …\nParse a Temporal datetime string into <code>Pieces</code>.\nParse a span string into a <code>Span</code> value.\nParse a civil time string into a <code>civil::Time</code>.\nParses a string representing a time zone into a <code>TimeZone</code>.\nParses a string representing a time zone into a <code>TimeZone</code> …\nParse a datetime string into a <code>Timestamp</code>.\nParse a datetime string with a time zone annotation into a …\nParse a datetime string with a time zone annotation into a …\nFormat <code>Pieces</code> of a Temporal datetime.\nSet the precision to use for formatting the fractional …\nPrint a <code>civil::Date</code> to the given writer.\nPrint a <code>civil::DateTime</code> to the given writer.\nPrint a <code>SignedDuration</code> to the given writer.\nPrint the <code>Pieces</code> of a Temporal datetime.\nPrint a <code>Span</code> to the given writer.\nPrint a <code>civil::Time</code> to the given writer.\nPrint a <code>TimeZone</code>.\nPrint a <code>Timestamp</code> datetime to the given writer.\nPrint a <code>Timestamp</code> datetime to the given writer with the …\nPrint a <code>Zoned</code> datetime to the given writer.\nUse the given ASCII character to separate the date and …\nFormat a <code>Span</code> into a string.\nReturns the civil time in this <code>Pieces</code>.\nFormat a <code>civil::Time</code> into a string.\nReturns the time zone annotation in this <code>Pieces</code>.\nFormat a <code>TimeZone</code> into a string.\nFormat a <code>Timestamp</code> datetime into a string.\nFormat a <code>Timestamp</code> datetime into a string with the given …\nA convenience routine for converting an offset on this …\nConverts this offset to a concrete numeric offset in all …\nA convenience routine for converting a time zone …\nA convenience routine for converting this annotation into …\nA convenience routine for converting a time zone …\nThis is like <code>TimeZoneAnnotation::to_time_zone</code>, but permits …\nSet the date on this <code>Pieces</code> to the one given.\nSets this numeric offset to use <code>-00:00</code> if and only if the …\nSet the offset on this <code>Pieces</code> to the one given.\nSet the time on this <code>Pieces</code> to the one given.\nReturns a new <code>Pieces</code> with the given time zone annotation.\nSets the time zone annotation on this <code>Pieces</code> to the given …\nSets the time zone annotation on this <code>Pieces</code> to the given …\nFormat a <code>Zoned</code> datetime into a string.\nWhen the offset and time zone are in conflict, this will …\nWhen the offset and time zone are in conflict, this will …\nA possibly ambiguous <code>Offset</code>.\nA possibly ambiguous <code>Timestamp</code>, created by …\nA possibly ambiguous <code>Zoned</code>, created by …\nIn a backward transition, the earlier time is selected. In …\nConfiguration for resolving ambiguous datetimes in a …\nAn enum indicating whether a particular datetime  is in …\nThe earlier time is always selected.\nThe offset for a particular civil datetime and time zone …\nThe offset for a particular civil datetime and time zone …\nThe later time is always selected.\nThe maximum possible time zone offset.\nThe minimum possible time zone offset.\nDST is not in effect. In other words, standard time is in …\nRepresents a fixed time zone offset.\nOptions for <code>Offset::checked_add</code> and <code>Offset::checked_sub</code>.\nConfiguration for resolving disparities between an offset …\nOptions for <code>Offset::round</code>.\nAlways attempt to use the offset to resolve a datetime to …\nWhen an ambiguous datetime is encountered, this strategy …\nWhen the offset and time zone are in conflict, this …\nA representation of a time zone.\nA handle to a IANA Time Zone Database.\nAn iterator over time zone transitions going forward in …\nA name for a time zone yield by the <code>TimeZoneNameIter</code> …\nAn iterator over the time zone identifiers in a …\nAn offset along with DST status and a time zone …\nAn iterator over time zone transitions going backward in …\nA representation a single time zone transition.\nThe offset corresponding to UTC. That is, no offset at all.\nThe UTC time zone.\nThe offset for a particular civil datetime and time zone is\nDST is in effect.\nThe offset corresponding to no offset at all.\nReturns the time zone abbreviation corresponding to this …\nReturns the time zone abbreviation corresponding to this …\nReturns this time zone name as a borrowed string.\nReturns a list of all available time zone identifiers from …\nReturns a time zone database initialized from the bundled …\nAdds the given span of time to this offset.\nThis routine is identical to <code>Offset::checked_add</code> with the …\nDisambiguates this timestamp according to the …\nDisambiguates this zoned datetime according to the …\nCreates a new time zone offset in a <code>const</code> context from a …\nReturns the civil datetime that was used to create this …\nReturns the civil datetime that was used to create this …\nReturns a copy of the global <code>TimeZoneDatabase</code>.\nDisambiguates this (possibly ambiguous) timestamp into a …\nDisambiguates this (possibly ambiguous) timestamp into a …\nReturns whether daylight saving time is enabled for this …\nReturns whether daylight saving time is enabled for this …\nThis routine is identical to <code>Offset::duration_until</code>, but …\nReturns an absolute duration representing the difference …\nDisambiguates this timestamp according to the …\nDisambiguates this zoned datetime according to the …\nReturns a time zone with a fixed offset.\nReturns an iterator of time zone transitions following the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a time zone database initialized from a path …\nReturns a time zone database initialized from the given …\nReturns a time zone database initialized from the current …\nCreates a new time zone offset from a given number of …\nCreates a new time zone offset in a <code>const</code> context from a …\nReturns a <code>TimeZone</code> corresponding to the IANA time zone …\nA convenience function for performing a time zone database …\nWhen this time zone was loaded from an IANA time zone …\nSet the rounding increment for the smallest unit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a civil datetime to a possibly ambiguous zoned …\nConsumes this ambiguous zoned datetime and returns the …\nReturns true if and only if this possibly ambiguous …\nReturns true if and only if this possibly ambiguous zoned …\nReturns true if it is known that this time zone database …\nReturns true when this value is equal to <code>Dst::Yes</code>.\nReturns true if and only if this offset is less than zero.\nReturns true if and only if this offset is positive.\nReturns true when this value is equal to <code>Dst::No</code>.\nReturns true if and only if this time zone is unknown.\nReturns true if and only if this offset is zero.\nDisambiguates this timestamp according to the …\nDisambiguates this zoned datetime according to the …\nSet the rounding mode.\nReturns the negation of this offset.\nCreate a new default configuration for rounding a time …\nReturns a database for which all time zone lookups fail.\nCreates a new time zone offset in a <code>const</code> context from a …\nReturns the possibly ambiguous offset that is the ultimate …\nReturns the possibly ambiguous offset that is the ultimate …\nReturns the offset corresponding to this time zone …\nReturns the offset.\nCreates a time zone from a POSIX TZ rule string.\nReturns an iterator of time zone transitions preceding the …\nResets the internal cache of this database.\nResolve a potential conflict between an <code>Offset</code> and a …\nResolve a potential conflict between an <code>Offset</code> and a …\nReturns a new offset that is rounded according to the given\nThis routine is identical to <code>Offset::checked_add</code>, except …\nThis routine is identical to <code>Offset::saturating_add</code> with …\nReturns the total number of seconds in this offset.\nReturns the “sign number” or “signum” of this …\nReturns the span of time since the other offset given from …\nSet the smallest units allowed in the offset returned. …\nReturns the system configured time zone, if available.\nReturns a reference to the time zone that was used to …\nReturns the timestamp at which this transition began.\nConverts a civil datetime to a possibly ambiguous …\nConverts a civil datetime to a possibly ambiguous zoned …\nConverts the given timestamp to a civil datetime using …\nReturns the civil datetime corresponding to the given …\nIf this time zone is a fixed offset, then this returns the …\nReturns the offset corresponding to the given timestamp in …\nReturns the offset information corresponding to the given …\nConverts this offset into a <code>TimeZone</code>.\nConverts the given civil datetime to a timestamp using …\nConverts a civil datetime to a <code>Timestamp</code> in this time zone.\nConverts a civil datetime to a <code>Zoned</code> in this time zone.\nReturns the system configured time zone, if available.\nCreates a time zone from TZif binary data, whose format is …\nDisambiguates this timestamp according to the …\nDisambiguates this zoned datetime according to the …\nReturns a <code>TimeZone</code> that is specifially marked as “…\nReturns the span of time from this offset until the other …\nThe offset corresponding to the later time in a gap.\nThe offset corresponding to the earlier time in a fold.\nThe offset corresponding to the time before a gap.\nThe offset corresponding to the earlier time in a fold.\nThe offset from UTC for the corresponding civil datetime …")