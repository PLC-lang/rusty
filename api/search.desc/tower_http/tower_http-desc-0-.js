searchState.loadedDescShard("tower_http", 0, "<code>async fn(HttpRequest) -&gt; Result&lt;HttpResponse, Error&gt;</code>\nAlias for a type-erased error type.\nThe latency unit used to report latencies by middleware.\nUse microseconds.\nUse milliseconds.\nUse nanoseconds.\nUse seconds.\nBody types.\nTools for classifying responses as either success or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Service</code>s that return responses without wrapping other …\nMiddleware to override status codes.\nMiddleware that adds high level tracing to a <code>Service</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe operation was aborted.\nSome entity that we attempted to create already exists.\nThe operation was cancelled.\nResult of doing a classification.\nThe response classifier produced.\nTrait for classifying end of streams (EOS) as either …\nThe type used to classify the response end of stream (EOS).\nThe type used to classify the response end of stream (EOS).\nTrait for classifying responses as either success or …\nA gRPC response was classified as a failure with the …\nUnrecoverable data loss or corruption.\nDeadline expired before operation could complete.\nA gRPC response was classified as an error with the …\nA response was classified as an error with the …\nA response was classified as an error with the …\nThe system is not in a state required for the operation’…\nThe type of failure classifications.\nThe type returned when a response is classified as a …\nThe type of failure classifications.\ngRPC status codes.\nThe <code>ClassifyEos</code> for <code>GrpcErrorsAsFailures</code>.\nResponse classifier for gRPC responses.\nThe failure class for <code>GrpcErrorsAsFailures</code>.\nInternal error.\nClient specified an invalid argument.\nTrait for producing response classifiers from a request.\nResponse classifier that transforms the failure class of …\nA <code>ClassifyEos</code> type that can be used in <code>ClassifyResponse</code> …\nSome requested entity was not found.\nThe operation completed successfully.\nOperation was attempted past the valid range.\nThe caller does not have permission to execute the …\nThe response was able to be classified immediately.\nWe have to wait until the end of a streaming response to …\nSome resource has been exhausted.\nThe default classifier used for normal HTTP responses.\nThe failure class for <code>ServerErrorsAsFailures</code>.\nA <code>MakeClassifier</code> that produces new classifiers by cloning …\nA response was classified as a failure with the …\nA response was classified as a failure with the …\nResponse classifier that considers responses with a status …\nThe failure class for <code>StatusInRangeAsFailures</code>.\nThe request does not have valid authentication credentials\nThe service is currently unavailable.\nOperation is not implemented or not supported.\nUnknown error.\nPerform the classification from response trailers.\nClassify an error.\nClassify an error.\nAttempt to classify the beginning of a response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>StatusInRangeAsFailures</code> into a <code>MakeClassifier</code>.\nReturns a response classifier for this request\nReturns a <code>MakeClassifier</code> that produces <code>GrpcErrorsAsFailures</code>…\nReturns a <code>MakeClassifier</code> that produces …\nTransform the failure classification using a function.\nTransform the failure classification using a function.\nCreate a new <code>GrpcErrorsAsFailures</code>.\nCreates a new <code>StatusInRangeAsFailures</code>.\nCreate a new <code>SharedClassifier</code> from the given classifier.\nCreate a new <code>ServerErrorsAsFailures</code>.\nCreates a new <code>StatusInRangeAsFailures</code> that classifies …\nChange which gRPC codes are considered success.\nService that serves files from a given directory and all …\nService that serves a file.\nIf the requested path is a directory append <code>index.html</code>.\nCustomize whether or not to call the fallback for requests …\nSet the fallback service.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFile system related services.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ServeDir</code>.\nCreate a new <code>ServeFile</code>.\nCreate a new <code>ServeFile</code> with a specific mime type.\nSet the fallback service and override the fallback’s …\nInforms the service that it should also look for a …\nInforms the service that it should also look for a …\nInforms the service that it should also look for a …\nInforms the service that it should also look for a …\nInforms the service that it should also look for a …\nInforms the service that it should also look for a …\nInforms the service that it should also look for a …\nInforms the service that it should also look for a …\nCall the service and get a future that contains any …\nCall the service and get a future that contains any …\nSet a specific read buffer chunk size.\nSet a specific read buffer chunk size.\nAdapter that turns an <code>impl AsyncRead</code> to an <code>impl Body</code>.\nThe default fallback service used with <code>ServeDir</code>.\nService that serves files from a given directory and all …\nService that serves a file.\nResponse body for <code>ServeDir</code> and <code>ServeFile</code>.\nResponse future of <code>ServeDir::try_call()</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResponse future for <code>SetStatus</code>.\nMiddleware to override status codes.\nLayer that applies <code>SetStatus</code> which overrides the status …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying service.\nGets a reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a <code>SetStatus</code> …\nCreate a new <code>SetStatusLayer</code>.\nCreate a new <code>SetStatus</code>.\nThe default way <code>Span</code>s will be created for <code>Trace</code>.\nThe default <code>OnBodyChunk</code> implementation used by <code>Trace</code>.\nThe default <code>OnEos</code> implementation used by <code>Trace</code>.\nThe default <code>OnFailure</code> implementation used by <code>Trace</code>.\nThe default <code>OnRequest</code> implementation used by <code>Trace</code>.\nThe default <code>OnResponse</code> implementation used by <code>Trace</code>.\nMakeClassifier for gRPC requests.\nMakeClassifier for HTTP requests.\nTrait used to generate <code>Span</code>s from requests. <code>Trace</code> wraps …\nTrait used to tell <code>Trace</code> what to do when a body chunk has …\nTrait used to tell <code>Trace</code> what to do when a stream closes.\nTrait used to tell <code>Trace</code> what to do when a request fails.\nTrait used to tell <code>Trace</code> what to do when a request is …\nTrait used to tell <code>Trace</code> what to do when a response has …\nResponse body for <code>Trace</code>.\nResponse future for <code>Trace</code>.\nMiddleware that adds high level tracing to a <code>Service</code>.\n<code>Layer</code> that adds high level tracing to a <code>Service</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying service.\nGets a reference to the underlying service.\nInclude request headers on the <code>Span</code>.\nInclude response headers on the <code>Event</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nSet the <code>LatencyUnit</code> latencies will be reported in.\nSet the <code>LatencyUnit</code> latencies will be reported in.\nSet the <code>LatencyUnit</code> latencies will be reported in.\nReturns a new <code>Layer</code> that wraps services with a <code>TraceLayer</code> …\nSet the <code>Level</code> used for the tracing span.\nSet the <code>Level</code> used for tracing events.\nSet the <code>Level</code> used for tracing events.\nSet the <code>Level</code> used for tracing events.\nSet the <code>Level</code> used for tracing events.\nMake a span from a request.\nCustomize how to make <code>Span</code>s that all request handling will …\nCustomize how to make <code>Span</code>s that all request handling will …\nCreate a new <code>TraceLayer</code> using the given <code>MakeClassifier</code>.\nCreate a new <code>DefaultMakeSpan</code>.\nCreate a new <code>DefaultOnBodyChunk</code>.\nCreate a new <code>DefaultOnEos</code>.\nCreate a new <code>DefaultOnFailure</code>.\nCreate a new <code>DefaultOnRequest</code>.\nCreate a new <code>DefaultOnResponse</code>.\nCreate a new <code>Trace</code> using the given <code>MakeClassifier</code>.\nCreate a new <code>TraceLayer</code> using <code>GrpcErrorsAsFailures</code> which …\nCreate a new <code>Trace</code> using <code>GrpcErrorsAsFailures</code> which …\nCreate a new <code>TraceLayer</code> using <code>ServerErrorsAsFailures</code> which …\nCreate a new <code>Trace</code> using <code>ServerErrorsAsFailures</code> which …\nDo the thing.\nCustomize what to do when a body chunk has been sent.\nCustomize what to do when a body chunk has been sent.\nDo the thing.\nCustomize what to do when a streaming response has closed.\nCustomize what to do when a streaming response has closed.\nDo the thing.\nCustomize what to do when a response has been classified …\nCustomize what to do when a response has been classified …\nDo the thing.\nCustomize what to do when a request is received.\nCustomize what to do when a request is received.\nDo the thing.\nCustomize what to do when a response has been produced.\nCustomize what to do when a response has been produced.")