searchState.loadedDescShard("ignore", 0, "The ignore crate provides a fast recursive directory …\nContinue walking as normal.\nA directory entry with a possible error attached.\nRepresents an error that can occur when parsing a …\nAn error that occurs when trying to parse a glob.\nThe highest precedent glob matched indicates the path …\nA user specified file type definition could not be parsed.\nAn error that occurs when doing I/O, such as reading an …\nAn error that occurs when a file loop is detected when …\nThe result of a glob match.\nThe path didn’t match any glob.\nReceives files and directories for the current thread.\nA builder for constructing a visitor when using …\nA collection of “soft” errors. These occur when adding …\nQuit the entire iterator as soon as possible.\nIf the directory entry given is a directory, don’t …\nA type selection for a file type that is not defined.\nWalk is a recursive directory iterator over file paths in …\nWalkBuilder builds a recursive directory iterator.\nWalkParallel is a parallel recursive directory iterator …\nWalkState is used in the parallel recursive directory …\nThe highest precedent glob matched indicates the path …\nAn error associated with a particular directory depth when …\nAn error associated with a specific line number.\nAn error associated with a particular file path.\nAdd a file path to the iterator.\nAdd a custom ignore file name\nAdd a global ignore file to the matcher.\nCreate per-thread <code>ParallelVisitor</code>s for <code>WalkParallel</code>.\nBuild a new <code>Walk</code> iterator.\nBuild a new <code>WalkParallel</code> iterator.\nReturns the depth at which this entry was created relative …\nReturns a depth associated with recursively walking a …\nReturns an error, if one exists, associated with …\nReturn the file name of this entry.\nReturn the file type for the file that this entry points …\nYields only entries which satisfy the given predicate and …\nWhether to follow symbolic links or not.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnables reading <code>.git/info/exclude</code> files.\nEnables reading a global gitignore file, whose path is …\nEnables reading <code>.gitignore</code> files.\nThe gitignore module provides a way to match globs from a …\nEnables ignoring hidden files.\nEnables reading <code>.ignore</code> files.\nProcess ignore files case insensitively\nReturn the value inside this match if it exists.\nReturns the underlying inode number if one exists.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar to <code>io_error</code> except consumes self to convert to the …\nThe full path that this entry represents. Analogous to …\nInverts the match so that <code>Ignore</code> becomes <code>Whitelist</code> and …\nInspect the original <code>std::io::Error</code> if there is one.\nReturns true if the match result implies the path should …\nReturns true if this error is exclusively an I/O error.\nReturns true if the match result didn’t match any globs.\nReturns true if this is a partial error.\nReturns true if and only if this entry corresponds to …\nReturns true if the match result implies the path should be\nApply the given function to the value inside this match.\nThe maximum depth to recurse.\nWhether to ignore files above the specified limit.\nReturn the metadata for the file that this entry points to.\nCreates a new recursive directory iterator for the file …\nCreate a new builder for a recursive directory iterator …\nReturn the match if it is not none. Otherwise, return …\nThe overrides module provides a way to specify a set of …\nAdd an override matcher.\nEnables reading ignore files from parent directories.\nThe full path that this entry represents.\nWhether this entry corresponds to a symbolic link or not.\nWhether a git repository is required to apply git-related …\nExecute the parallel recursive directory iterator. <code>mkf</code> is …\nDo not cross file system boundaries.\nDo not yield directory entries that are believed to …\nSet a function for sorting directory entries by file name.\nSet a function for sorting directory entries by their path.\nEnables all the standard ignore filters.\nThe number of threads to use for traversal.\nThe types module provides a way of associating globs on …\nAdd a file type matcher.\nReceives files and directories for the current thread. …\nExecute the parallel recursive directory iterator using a …\nThe ancestor file path in the loop.\nThe child file path in the loop.\nThe directory depth.\nThe underlying error.\nThe underlying error.\nThe underlying error.\nThe underlying glob error as a string.\nThe original glob that caused this error. This glob, when …\nThe line number.\nThe file path.\nGitignore is a matcher for the globs in one or more …\nBuilds a matcher for a single set of globs from a …\nGlob represents a single glob in a gitignore file.\nThe actual glob that was compiled to respect gitignore …\nAdd each glob from the file path given.\nAdd a line from a gitignore file to this builder.\nBuilds a new matcher from the globs added so far.\nBuild a global gitignore matcher using the configuration …\nToggle whether the globs should be matched case …\nCreates a new empty gitignore matcher that never matches …\nReturns the argument unchanged.\nReturns the file path that defined this glob.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the file path of the current environment’s global …\nCreates a new gitignore matcher from the global ignore …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this gitignore has zero globs, …\nWhether this glob must match a directory or not.\nWhether this was a whitelisted glob or not.\nReturns the total number of globs, which should be …\nReturns whether the given path (file or directory) matched …\nReturns whether the given path (file or directory, and …\nCreates a new gitignore matcher from the gitignore file …\nCreate a new builder for a gitignore file.\nReturns the total number of ignore globs.\nReturns the total number of whitelisted globs.\nThe original glob as it was defined in a gitignore file.\nReturns the directory containing this gitignore matcher.\nGlob represents a single glob in an override matcher.\nManages a set of overrides provided explicitly by the end …\nBuilds a matcher for a set of glob overrides.\nAdd a glob to the set of overrides.\nBuilds a new override matcher from the globs added so far.\nToggle whether the globs should be matched case …\nReturns an empty matcher that never matches any file path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this matcher is empty.\nReturns whether the given file path matched a pattern in …\nCreate a new override builder.\nReturns the total number of ignore globs.\nReturns the total number of whitelisted globs.\nReturns the directory of this override set.\nA single file type definition.\nGlob represents a single glob in a set of file type …\nTypes is a file type matcher.\nTypesBuilder builds a type matcher from a set of file type …\nAdd a new file type definition. <code>name</code> can be arbitrary and …\nAdd a new file type definition specified in string form. …\nAdd a set of default file type definitions.\nBuild the current set of file type definitions <em>and</em> …\nClear any file type definitions for the type name given.\nReturn the set of current file type definitions.\nReturn the set of current file type definitions.\nCreates a new file type matcher that never matches any …\nReturn the file type definition that matched, if one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the globs used to recognize this file type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this matcher has zero …\nReturns the number of selections used in this matcher.\nReturns a match for the given path against this file type …\nReturn the name of this file type.\nIgnore the file type given by <code>name</code>.\nCreate a new builder for a file type matcher.\nSelect the file type given by <code>name</code>.")