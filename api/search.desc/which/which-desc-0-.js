searchState.loadedDescShard("which", 0, "which\nAn owned, immutable wrapper around a <code>PathBuf</code> containing …\nContains the error value\nContains the success value\nAn owned, immutable wrapper around a <code>PathBuf</code> containing …\nA wrapper containing all functionality in this crate.\nReturns the paths of all executable binaries by a name.\nReturns the canonical paths of an executable binary by …\nReturns all paths of an executable binary by name in the …\nReturns all of the canonical paths of an executable binary …\nFinishes configuring, runs the query and returns all …\nReturns a reference to a <code>std::path::Path</code>.\nReturns a reference to a <code>std::path::Path</code>.\nSets the path name to search for. You <em><strong>MUST</strong></em> call this, or …\nSets a custom path for resolving relative paths.\nUses the given string instead of the <code>PATH</code> env variable.\nFinishes configuring, runs the query and returns the first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>which::Path</code>, yielding its underlying …\nConsumes the <code>which::CanonicalPath</code>, yielding its underlying …\nReturns the path of an executable binary by name.\nReturns the canonical path of an executable binary by name.\nReturns the path of an executable binary by name in the …\nReturns the canonical path of an executable binary by name …\nSets the path name regex to search for. You <em><strong>MUST</strong></em> call …\nWhether or not to use the current working directory. <code>true</code> …\nUses the <code>PATH</code> env variable. Enabled by default.\nFind an executable binary’s path by name.\nFind all binaries with <code>binary_name</code> using <code>cwd</code> to resolve …\nFind all binaries with <code>binary_name</code> ignoring <code>cwd</code>.\nFind an executable binary’s path by name, ignoring <code>cwd</code>.\nFind <code>binary_name</code> in the path list <code>paths</code>, using <code>cwd</code> to …\nFind all binaries with <code>binary_name</code> in the path list <code>paths</code>, …\nFind all binaries with <code>binary_name</code> in the path list <code>paths</code>, …")