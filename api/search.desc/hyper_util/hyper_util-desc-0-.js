searchState.loadedDescShard("hyper_util", 0, "Utilities for working with hyper.\nRuntime utilities\nServer utilities.\nService utilities.\n<code>tokio</code> runtime components integration for <code>hyper</code>.\nFuture executor that utilises <code>tokio</code> threads.\nA wrapper that implements Tokio’s IO traits for an inner …\nA Timer that uses the tokio runtime.\nExtends an underlying <code>tokio</code> I/O with <code>hyper</code> I/O …\nExtends an underlying <code>hyper</code> I/O with <code>tokio</code> I/O …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the inner type.\nReturns a reference to the inner type.\nBorrow the inner type.\nReturns a mutable reference to the inner type.\nReturns a mutable reference to the inner type.\nMut borrow the inner type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this wrapper and returns the inner type.\nConsumes this wrapper and returns the inner type.\nConsume this wrapper and get the inner type.\nWraps the inner I/O in an <code>WithHyperIo&lt;I&gt;</code>\nWraps the inner I/O in an <code>WithTokioIo&lt;I&gt;</code>\nCreate new executor that relies on <code>tokio::spawn</code> to execute …\nWrap a type implementing Tokio’s or hyper’s IO traits.\nCreate a new TokioTimer\nConnection utilities.\nHttp1 or Http2 connection.\nHttp1 or Http2 connection builder.\nA <code>Future</code> representing an HTTP/1 connection, returned from …\nHttp1 part of builder.\nExactly equivalent to [<code>Http2ServerConnExec</code>].\nAn upgradable <code>Connection</code>, returned by …\nSet whether the <code>date</code> header should be included in HTTP …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart a graceful shutdown process for this connection.\nStart a graceful shutdown process for this connection.\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nHttp1 configuration.\nOnly accepts HTTP/1\nSet whether HTTP/1 connections will silently ignored …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake this Connection static, instead of borrowing from …\nMake this Connection static, instead of borrowing from …\nReturns <code>true</code> if this builder can serve an HTTP/1.1-based …\nReturns <code>true</code> if this builder can serve an HTTP/2-based …\nEnables or disables HTTP/1 keep-alive.\nSet the maximum buffer size for the connection.\nSet the maximum number of headers.\nCreate a new auto connection builder.\nAggregates flushes to better support pipelined responses.\nSet whether to support preserving original header cases.\nSet whether HTTP/1 connections will preserve the original …\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>.\nBind a connection together with a <code>Service</code>, with the …\nSet the timer used in background tasks.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections will write header names as …\nUpgrade utilities.\nSet whether HTTP/1 connections should try to use vectored …\nThe deconstructed parts of an <code>Upgraded</code> type.\nTries to downcast the internal trait object to the type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe original IO object used before the upgrade.\nA buffer of bytes that have been read but not processed as …\nA tower <code>Service</code> converted into a hyper <code>Service</code>.\nResponse future for <code>TowerToHyperService</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TowerToHyperService</code> from a tower service.")