searchState.loadedDescShard("log", 0, "A lightweight logging facade.\nThe “debug” level.\nCorresponds to the <code>Debug</code> log level.\nThe “error” level.\nCorresponds to the <code>Error</code> log level.\nThe “info” level.\nCorresponds to the <code>Info</code> log level.\nAn enum representing the available verbosity levels of the …\nAn enum representing the available verbosity level filters …\nA trait encapsulating the operations required of a logger.\nMetadata about a log message.\nBuilder for <code>Metadata</code>.\nA level lower than all log levels.\nThe type returned by <code>from_str</code> when the string doesn’t …\nThe “payload” of a log message.\nBuilder for <code>Record</code>.\nThe statically resolved maximum log level.\nThe type returned by <code>set_logger</code> if <code>set_logger</code> has already …\nThe “trace” level.\nCorresponds to the <code>Trace</code> log level.\nThe “warn” level.\nCorresponds to the <code>Warn</code> log level.\nThe message body.\nSet <code>args</code>.\nGet a value from a type implementing <code>std::fmt::Debug</code>.\nGet a value from a type implementing <code>std::fmt::Display</code>.\nReturns the string representation of the <code>Level</code>.\nReturns the string representation of the <code>LevelFilter</code>.\nInvoke the builder and return a <code>Record</code>\nReturns a <code>Metadata</code> object.\nReturns a new builder.\nReturns a new builder.\nLogs a message at the debug level.\nDetermines if a log message with the specified metadata …\nLogs a message at the error level.\nThe source file containing the message.\nSet <code>file</code>\nThe source file containing the message, if it is a <code>&#39;static</code> …\nSet <code>file</code> to a <code>&#39;static</code> string.\nFlushes any buffered records.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogs a message at the info level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nThe structured key-value pairs associated with the message.\nSet <code>key_values</code>\nStructured logging.\nThe verbosity level of the message.\nSet <code>Metadata::level</code>.\nThe verbosity level of the message.\nSetter for <code>level</code>.\nThe line containing the message.\nSet <code>line</code>\nLogs the <code>Record</code>.\nThe standard logging macro.\nDetermines if a message logged at the specified level in …\nReturns a reference to the logger.\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nReturns the current maximum log level.\nMetadata about the log directive.\nSet <code>metadata</code>. Construct a <code>Metadata</code> object with …\nThe module path of the message.\nSet <code>module_path</code>\nThe module path of the message, if it is a <code>&#39;static</code> string.\nSet <code>module_path</code> to a <code>&#39;static</code> string\nConstruct new <code>RecordBuilder</code>.\nConstruct a new <code>MetadataBuilder</code>.\nSets the global logger to a <code>Box&lt;Log&gt;</code>.\nSets the global logger to a <code>&amp;&#39;static Log</code>.\nA thread-unsafe version of <code>set_logger</code>.\nSets the global maximum log level.\nA thread-unsafe version of <code>set_max_level</code>.\nThe name of the target of the directive.\nSet <code>Metadata::target</code>\nThe name of the target of the directive.\nSetter for <code>target</code>.\nCreate a new <code>RecordBuilder</code> based on this record.\nConverts <code>self</code> to the equivalent <code>Level</code>.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nLogs a message at the trace level.\nLogs a message at the warn level.\nAn error encountered while working with structured data.\nA key in a key-value.\nA type that can be converted into a <code>Key</code>.\nGet a borrowed string from this key.\nCreate an error from a standard error type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a key from a borrowed string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an error from a message.\nSources for key-values.\nPerform the conversion.\nStructured values.\nA source of key-values.\nA visitor for the key-value pairs in a <code>Source</code>.\nCount the number of key-values that can be visited.\nGet the value for a given key.\nVisit key-values.\nVisit a key-value pair.\nA type that can be converted into a <code>Value</code>.\nA value in a key-value.\nA visitor for a <code>Value</code>.\nGet a value from a type implementing <code>std::fmt::Debug</code>.\nGet a value from a type implementing <code>std::fmt::Display</code>.\nTry downcast this value to <code>T</code>.\nReturns the argument unchanged.\nGet a value from a type implementing <code>ToValue</code>.\nGet a value from a type implementing <code>std::fmt::Debug</code>.\nGet a value from a type implementing <code>std::fmt::Display</code>.\nGet a value from a dynamic <code>std::fmt::Debug</code>.\nGet a value from a dynamic <code>std::fmt::Display</code>.\nCalls <code>U::from(self)</code>.\nCheck whether this value can be downcast to <code>T</code>.\nGet a <code>null</code> value.\nTry convert this value into a <code>bool</code>.\nTry convert this value into a borrowed string.\nTry convert this value into a <code>char</code>.\nTry convert this value into a <code>f64</code>.\nTry convert this value into a <code>i128</code>.\nTry convert this value into a <code>i64</code>.\nTry convert this value into a <code>u128</code>.\nTry convert this value into a <code>u64</code>.\nPerform the conversion.\nInspect this value using a simple visitor.\nVisit a <code>Value</code>.\nVisit a boolean.\nVisit a string.\nVisit a Unicode character.\nVisit a floating point.\nVisit a big signed integer.\nVisit a signed integer.\nVisit an empty value.\nVisit a string.\nVisit a big unsigned integer.\nVisit an unsigned integer.")