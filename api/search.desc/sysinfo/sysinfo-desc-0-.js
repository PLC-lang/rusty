searchState.loadedDescShard("sysinfo", 0, "sysinfo  \nAbort signal from C abort function.\nTimer signal from C alarm function.\nBus error (bad memory access).\nChild stopped or terminated.\nStruct containing a component information (temperature and …\nGetting a component temperature information.\nContinue if stopped.\nStruct containing information of a CPU.\nContains all the methods of the <code>Cpu</code> struct.\nUsed to determine what you want to refresh specifically on …\nLinux\nStruct containing a disk information.\nContains all the methods of the <code>Disk</code> struct.\nEnum containing the different supported kinds of disks.\nType containing read and written bytes.\nFloating point exception.\nA group id wrapping a platform specific type.\nHDD type.\nHangup detected on controlling terminal or death of …\nI/O now possible.\nIOT trap. A synonym for SIGABRT.\nReturns <code>true</code> if this OS is supported. Please refer to the …\nLinux\nIllegal instruction.\nInterrupt from keyboard.\nKill signal.\nA struct representing system load average value.\nFreeBSD\nThis is the minimum interval time used internally by …\nMAC address for network interface.\nContains network interface information.\nGetting volume of received and transmitted data.\nNetworks interfaces.\nInteracting with network interfaces.\nIterator over network interfaces.\nLinux\nProcess ID.\nTrait to have a common conversions for the <code>Pid</code> type.\nBroken pipe: write to pipe with no readers.\nPollable event (Sys V). Synonym for IO\nPower failure (System V).\nStruct containing information of a process.\nContains all the methods of the <code>Process</code> struct.\nUsed to determine what you want to refresh specifically on …\nEnum describing the different status of a process.\nProfiling time expired.\nQuit from keyboard.\nUsed to determine what you want to refresh specifically on …\nRunning.\nSSD type.\nReturns the list of the supported signals on this system …\nInvalid memory reference.\nAn enum representing signals on UNIX-like systems.\nLinux\nStop process.\nLinux\nBad argument to routine (SVr4).\nStructs containing system’s information.\nContains all the methods of the <code>System</code> type.\nStop typed at terminal.\nTerminal input for background process.\nTerminal output for background process.\nTermination signal.\nLinux\nTrace/breakpoint trap.\nA <code>MacAddr</code> with all bytes set to <code>0</code>.\nA user id wrapping a platform specific type.\nLinux\nUnknown type.\nUnknown.\nUrgent condition on socket.\nType containing user information.\nUser-defined signal 1.\nUser-defined signal 2.\nGetting information for a user.\nVirtual alarm clock.\nLinux\nLinux\nWindows resize signal.\nCPU time limit exceeded.\nFile size limit exceeded.\nLinux/FreeBSD/macOS\nAllows to convert <code>Pid</code> into <code>u32</code>.\nReturns the amount of available RAM in bytes.\nReturns the available disk size, in bytes.\nReturns the time (in seconds) when the system booted since …\nReturns the CPU’s brand.\nReturns the command line.\nReturns the components list.\nReturns the value of the “components” refresh kind.\nReturns the value of the “components_list” refresh …\nReturns a mutable components list.\nReturns the value of the “cpu” refresh kind.\nReturns the value of the “cpu” refresh kind.\nReturns the total CPU usage (in %). Notice that it might …\nReturns this CPU’s usage.\nReturns the value of the “cpu_usage” refresh kind.\nReturns the list of the CPUs.\nReturns the highest temperature before the component halts …\nReturns the current working directory.\nReturns number of bytes read and written to disk.\nReturns the value of the “disk_usage” refresh kind.\nReturns the disks list.\nReturns the value of the “disks” refresh kind.\nReturns the value of the “disks_list” refresh kind.\nReturns the disks list.\nReturns the distribution id as defined by os-release, or …\nReturns the effective group ID of the process.\nReturns the user ID of the effective owner of this process …\nReturns the environment variables of the process.\nReturns the number of incoming errors since the last …\nReturns the number of outcoming errors since the last …\nCreates a new <code>ProcessRefreshKind</code> with every refresh set to …\nCreates a new <code>CpuRefreshKind</code> with every refresh set to <code>true</code>…\nCreates a new <code>RefreshKind</code> with every refresh set to <code>true</code>/…\nReturns the path to the process.\nAverage load within fifteen minutes.\nReturns the file system used on this disk (so for example: …\nAverage load within five minutes.\nReturns the amount of free RAM in bytes.\nReturns the amount of free SWAP in bytes.\nReturns the CPU’s frequency.\nReturns the CPU frequency in MHz.\nReturns the value of the “frequency” refresh kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllows to convert a <code>u32</code> into <code>Pid</code>.\nReturns the pid for the current process.\nReturns the <code>User</code> matching the given <code>user_id</code>.\nReturns the <code>User</code> matching the given <code>user_id</code>.\nReturns “global” CPUs information (aka the addition of …\nReturns the process group ID of the process.\nReturn the group id of the user.\nReturns the groups of the user.\nReturns the system hostname based off DNS\nReturn the user id of the user.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the disk is removable.\nChecks if this <code>MacAddr</code> has all bytes equal to <code>0</code>.\nReturns an iterator over the network interfaces.\nReturns the system’s kernel version.\nSends <code>Signal::Kill</code> to the process (which is the only …\nSends <code>Signal::Kill</code> to the process (which is the only …\nSends the given <code>signal</code> to the process. If the signal doesn…\nReturns the kind of disk.\nReturns the label of the component.\nReturns the system load average value.\nReturns the system long os version (e.g “MacOS 11.2 …\nReturns the MAC address associated to current interface.\nReturns the maximum temperature of the component (in …\nReturns the memory usage (in bytes).\nReturns the value of the “memory” refresh kind.\nReturns the mount point of the disk (<code>/</code> for example).\nReturns the disk name.\nReturns the name of the process.\nReturns this CPU’s name.\nReturns the system name.\nReturns the name of the user.\nReturns the network interfaces object.\nReturns the value of the “networks” refresh kind.\nReturns the value of the “networks_list” refresh kind.\nReturns a mutable access to network interfaces.\nCreates a new <code>System</code> instance with nothing loaded. If you …\nCreates a new <code>System</code> instance with nothing loaded. If you …\nCreates a new <code>ProcessRefreshKind</code> with every refresh set to …\nCreates a new <code>CpuRefreshKind</code> with every refresh set to …\nCreates a new <code>RefreshKind</code> with every refresh set to <code>false</code>/…\nCreates a new <code>System</code> instance with everything loaded.\nCreates a new <code>System</code> instance with everything loaded.\nCreates a new <code>System</code> instance and refresh the data …\nAverage load within one minute.\nReturns the system version (e.g. for MacOS this will …\nReturns the number of incoming packets since the last …\nReturns the number of outcoming packets since the last …\nReturns the parent PID.\nReturns the number of physical cores on the CPU or <code>None</code> if …\nReturns the PID of the process.\nReturns the process corresponding to the given <code>pid</code> or <code>None</code> …\nReturns the process list.\nReturns the value of the “processes” refresh kind.\nReturns an iterator of processes with exactly the given …\nReturns an iterator of processes with exactly the given …\nReturns an iterator of process containing the given <code>name</code>.\nReturns an iterator of process containing the given <code>name</code>.\nNumber of read bytes since the last refresh.\nReturns the number of received bytes since the last …\nUpdates the disk’ information.\nRefreshes the network interfaces’ content.\nRefreshes component.\nRefreshes all system, processes, disks and network …\nRefreshes all system, processes, disks and network …\nRefreshes components’ temperature.\nRefreshes components’ temperature.\nRefreshes components list.\nRefreshes CPUs information.\nRefreshes CPUs information.\nRefreshes CPUs specific information.\nRefreshes the listed disks’ information.\nRefreshes the listed disks’ information.\nThe disk list will be emptied then completely recomputed.\nRefreshes RAM and SWAP usage.\nRefreshes networks data.\nRefreshes networks data.\nRefreshes the network interfaces list.\nThe network list will be updated: removing not existing …\nThe network list will be updated: removing not existing …\nRefreshes <em>only</em> the process corresponding to <code>pid</code>. Returns …\nRefreshes <em>only</em> the process corresponding to <code>pid</code>. Returns …\nRefreshes <em>only</em> the process corresponding to <code>pid</code>. Returns …\nGets all processes and updates their information.\nGets all processes and updates their information.\nGets all processes and updates the specified information.\nRefreshes according to the given <code>RefreshKind</code>. It calls the …\nRefreshes according to the given <code>RefreshKind</code>. It calls the …\nRefreshes system information (RAM, swap, CPU usage and …\nRefreshes system information (RAM, swap, CPU usage and …\nRefreshes users list.\nReturns the path of the root directory.\nReturns for how much time the process has been running (in …\nReturns the session ID for the current process or <code>None</code> if …\nThis function is only used on Linux targets, on the other …\nSort the disk list with the provided callback.\nReturns the time where the process was started (in …\nReturns the status of the process.\nTasks run by this process.\nReturns the temperature of the component (in celsius …\nReturns the total number of incoming errors.\nReturns the total number of outcoming errors.\nReturns the RAM size in bytes.\nReturns the total number of incoming packets.\nReturns the total number of outcoming packets.\nTotal number of read bytes.\nReturns the total number of received bytes.\nReturns the total disk size, in bytes.\nReturns the SWAP size in bytes.\nReturns the total number of transmitted bytes.\nTotal number of written bytes.\nReturns the number of transmitted bytes since the last …\nReturns system uptime (in seconds).\nReturns the amount of used RAM in bytes.\nReturns the amount of used SWAP in bytes.\nReturns the value of the “user” refresh kind. This …\nReturns the ID of the owner user of this process or <code>None</code> …\nReturns the users list.\nReturns the value of the “users_list” refresh kind.\nReturns the CPU’s vendor id.\nReturns the virtual memory usage (in bytes).\nWait for process termination.\nSets the value of the “components” refresh kind to <code>true</code>…\nSets the value of the “components_list” refresh kind …\nSets the value of the “cpu” refresh kind to <code>true</code>.\nSets the value of the “cpu” refresh kind to <code>true</code>.\nSets the value of the “cpu_usage” refresh kind to <code>true</code>.\nSets the value of the “disk_usage” refresh kind to <code>true</code>…\nSets the value of the “disks” refresh kind to <code>true</code>.\nSets the value of the “disks_list” refresh kind to <code>true</code>…\nSets the value of the “frequency” refresh kind to <code>true</code>.\nSets the value of the “memory” refresh kind to <code>true</code>.\nSets the value of the “networks” refresh kind to <code>true</code>.\nSets the value of the “networks_list” refresh kind to …\nSets the value of the “processes” refresh kind to <code>true</code>.\nSets the value of the “user” refresh kind to <code>true</code>.\nSets the value of the “users_list” refresh kind to <code>true</code>…\nSets the value of the “components” refresh kind to …\nSets the value of the “components_list” refresh kind …\nSets the value of the “cpu” refresh kind to <code>false</code>.\nSets the value of the “cpu” refresh kind to <code>false</code>.\nSets the value of the “cpu_usage” refresh kind to <code>false</code>…\nSets the value of the “disk_usage” refresh kind to …\nSets the value of the “disks” refresh kind to <code>false</code>.\nSets the value of the “disks_list” refresh kind to …\nSets the value of the “frequency” refresh kind to <code>false</code>…\nSets the value of the “memory” refresh kind to <code>false</code>.\nSets the value of the “networks” refresh kind to <code>false</code>.\nSets the value of the “networks_list” refresh kind to …\nSets the value of the “processes” refresh kind to <code>false</code>…\nSets the value of the “user” refresh kind to <code>false</code>.\nSets the value of the “users_list” refresh kind to …\nNumber of written bytes since the last refresh.")