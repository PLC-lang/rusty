searchState.loadedDescShard("markup5ever", 0, "Represents a set of “small characters”, those with …\nThe <code>BufferQueue</code> struct and helper types.\nData that is known at compile-time and hard-coded into the …\nHelper to quickly create an expanded name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTypes for tag and attribute names, and tree-builder …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes a local name as a string and returns its key in the …\nTakes a namespace prefix string and returns its key in a …\nTakes a namespace url string and returns its key in a …\nMaps the input of <code>namespace_prefix!</code> to  the output of …\nTraits for serializing elements. The serializer expects …\nCreate a <code>SmallCharSet</code>, with each space-separated number …\nThis module contains a single struct <code>SmallCharSet</code>. See its …\nA queue of owned string buffers, which supports …\nA character from the <code>SmallCharSet</code>.\nA string buffer containing no characters from the …\nResult from <code>pop_except_from</code> containing either a character …\nCreate an empty BufferQueue.\nConsume bytes matching the pattern, using a custom …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the queue is empty.\nGet the next character if one is available, removing it …\nLook at the next available character without removing it, …\nPops and returns either a single character from the given …\nGet the buffer at the beginning of the queue.\nAdd a buffer to the end of the queue.\nAdd a buffer to the beginning of the queue.\nThe spec replaces most characters in the ISO-2022 C1 …\nA map of entity names to their codepoints. The second …\nA tag attribute, e.g. <code>class=&quot;test&quot;</code> in …\nAn expanded name, containing the tag and the namespace.\nA fully qualified name (with a namespace), used to depict …\nTake a reference of <code>self</code> as an <code>ExpandedName</code>, dropping the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe local name (e.g. <code>table</code> in <code>&lt;furn:table&gt;</code> above).\nThe name of the attribute (e.g. the <code>class</code> in …\nBasic constructor function.\nThe namespace after resolution (e.g. <code>https://furniture.rs</code> …\nThe prefix of qualified (e.g. <code>furn</code> in <code>&lt;furn:table&gt;</code> above). …\nThis module contains functionality for managing the DOM, …\nThe value of the attribute (e.g. the <code>&quot;test&quot;</code> in …\nContinue without interruptions.\nSpecial properties of an element, useful for tagging …\n<code>Handle</code> is a reference to a DOM node.  The tree builder …\nAlmost standards mode\nWhether to interrupt further parsing of the current input …\nStandards mode\nSomething which can be inserted into the DOM.\nThe overall result of parsing.\nFull quirks mode\nA document’s quirks mode, for compatibility with old …\nStop further parsing.\nTrace hooks for a garbage-collected DOM.\nMethods a parser can use to create the DOM. The DOM …\nAdd each attribute to the given element, if no attribute …\nAppend a node as the last child of the given node.  If …\nWhen the insertion point is decided by the existence of a …\nAppend a node as the sibling immediately before the given …\nAppend a <code>DOCTYPE</code> element to the <code>Document</code> node.\nAssociate the given form-associatable element with the …\nIndicate that a <code>script</code> element is complete.\nCreate a comment node.\nA constructor for an element.\nCreate an element.\nCreate a Processing Instruction node.\nWhat is the name of this element?\nConsume this sink and return the overall result of parsing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a handle to the <code>Document</code> node.\nGet a handle to a template’s template contents. The tree …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the adjusted current node is an HTML …\nMark a HTML <code>&lt;script&gt;</code> as “already started”.\nThis boolean should be recorded with the element and …\nSignal a parse error.\nIndicate that a node was popped off the stack of open …\nDetach the given node from its parent.\nRemove all the children from node and append them to …\nDo two handles refer to the same node?\nCalled whenever the line number changes.\nSet the document’s quirks mode.\nA document fragment should be created, associated with the …\nUpon a call to <code>trace_handles</code>, the tree builder will call …\nA type alias for an attribute name and value (e.g. the …\nOnly serialize the children of the node, treating any …\nInclude the parent node when serializing.\nTypes that can be serialized (according to the xml-like …\nTypes that are capable of serializing implement this trait\nUsed as a parameter to <code>serialize</code>, telling it if we want to …\nSerialize the end of an element, for example <code>&lt;/div&gt;</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTake the serializer and call its methods to serialize this …\nSerialize the start of an element, for example …\nSerialize a comment node, for example <code>&lt;!-- comment --&gt;</code>.\nSerialize a doctype node, for example <code>&lt;!doctype html&gt;</code>.\nSerialize a processing instruction node, for example …\nSerialize a plain text node.\nRepresents a set of “small characters”, those with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCount the number of bytes of characters at the beginning …")