searchState.loadedDescShard("tower", 0, "<code>async fn(Request) -&gt; Result&lt;Response, Error&gt;</code>\nAlias for a type-erased error type.\nErrors produced by the service.\nErrors produced by the service\nThe future response value.\nThe future of the <code>Service</code> instance.\nDecorates a <code>Service</code>, transforming either the request or …\nErrors produced while building a service.\nCreates new <code>Service</code> values.\nResponses given by the service.\nResponses given by the service\nAn asynchronous function from a <code>Request</code> to a <code>Response</code>.\nThe <code>Service</code> value created by this factory\nThe wrapped service\nDeclaratively construct <code>Service</code> values.\nAn extension trait for <code>Service</code>s that provides a variety of …\nExecutes a new future after this service’s future …\nConvert this <code>MakeService</code> into a <code>Service</code> without consuming …\nConvert this <code>MakeService</code> into a <code>Service</code> without consuming …\nConvert the service into a <code>Service</code> + <code>Send</code> trait object.\nConvert the service into a <code>Service</code> + <code>Clone</code> + <code>Send</code> trait …\nBuilder types to compose layers and services\nProcess the request and return the response asynchronously.\nProcess all requests from the given <code>Stream</code>, and produce a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsume this <code>MakeService</code> and convert it into a <code>Service</code>.\nConsume this <code>MakeService</code> and convert it into a <code>Service</code>.\nA collection of <code>Layer</code> based tower services\nWrap the given service with the middleware, returning a …\nTrait aliases for Services that produce specific types of …\nCreate and return a new service value asynchronously.\nMaps this service’s error value to a different value. …\nComposes a function that transforms futures produced by …\nComposes a function <em>in front of</em> the service.\nMaps this service’s response value to a different value. …\nMaps this service’s result type (…\nConsume this <code>Service</code>, calling it with the provided request …\nReturns <code>Poll::Ready(Ok(()))</code> when the service is able to …\nReturns <code>Poll::Ready</code> when the factory is able to create …\nYields a mutable reference to the service when it is ready …\nYields the service when it is ready to accept a request.\nReturns a new <code>ServiceFn</code> with the given closure.\nComposes an asynchronous function <em>after</em> this service.\nVarious utility types and functions that are generally …\nDeclaratively construct <code>Service</code> values.\nExecutes a new future after this service’s future …\nThis wraps the inner service with the <code>Layer</code> returned by …\nThis wraps the inner service with the <code>Layer</code> returned by …\nCheck that the builder implements <code>Clone</code>.\nCheck that the builder when given a service of type <code>S</code> …\nCheck that the builder when given a service of type <code>S</code> …\nReturns the underlying <code>Layer</code> implementation.\nAdd a new layer <code>T</code> into the <code>ServiceBuilder</code>.\nAdd a <code>Layer</code> built from a function that accepts a service …\nMap one error type to another.\nComposes a function that transforms futures produced by …\nMap one request type to another.\nMap one response type to another.\nMaps this service’s result type (…\nCreate a new <code>ServiceBuilder</code>.\nOptionally add a new layer <code>T</code> into the <code>ServiceBuilder</code>.\nWrap the service <code>S</code> with the middleware provided by this …\nWrap the async function <code>F</code> with the middleware provided by …\nApply an asynchronous function after the service, …\nDecorates a <code>Service</code>, transforming either the request or …\nA <code>Layer</code> implemented by a closure. See the docs for <code>layer_fn</code>…\nThe wrapped service\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap the given service with the middleware, returning a …\nReturns a new <code>LayerFn</code> that implements <code>Layer</code> by calling the …\nUtilities for combining layers\nA no-op middleware.\nTwo middlewares chained together.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Identity</code> value\nCreate a new <code>Stack</code>.\nService returned by <code>MakeService::as_service</code>.\nThe transport provided by this service\nErrors produced by the connecting service\nErrors produced by the service\nThe future that eventually produces the transport\nThe future of the <code>Service</code> instance.\nService returned by <code>MakeService::into_service</code>.\nThe <code>MakeConnection</code> trait is used to create transports.\nErrors produced while building a service.\nCreates new <code>Service</code> values.\nResponses given by the service\nThe <code>Service</code> value created by this factory\nA <code>MakeService</code> that produces services by cloning an inner …\nConvert this <code>MakeService</code> into a <code>Service</code> without consuming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this <code>MakeService</code> and convert it into a <code>Service</code>.\nConnect and return a transport asynchronously\nCreate and return a new service value asynchronously.\nCreate a new <code>Shared</code> from a service.\nReturns <code>Poll::Ready(Ok(()))</code> when it is able to make more …\nReturns <code>Poll::Ready</code> when the factory is able to create …\nResponse future from <code>Shared</code> services.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nService returned by the <code>and_then</code> combinator.\nA <code>Layer</code> that produces a <code>AndThen</code> service.\nA <code>Clone</code> + <code>Send</code> boxed <code>Service</code>.\nA <code>Clone</code> + <code>Send</code> boxed <code>Layer</code>.\nA <code>Clone</code> + <code>Send</code> + <code>Sync</code> boxed <code>Service</code>.\nA <code>Clone</code> + <code>Send</code> + <code>Sync</code> boxed <code>Layer</code>.\nA boxed <code>Layer</code> trait object.\nA boxed <code>Service + Send</code> trait object.\nThis is a <code>Stream</code> of responses resulting from calling the …\nA stream of responses received from the inner service in …\nCombine two different service types into a single type.\nA type that implements <code>Service</code> for a <code>Future</code> that produces …\nService returned by the <code>map_err</code> combinator.\nA <code>Layer</code> that produces <code>MapErr</code> services.\n<code>Service</code> returned by the <code>map_future</code> combinator.\nA <code>Layer</code> that produces a <code>MapFuture</code> service.\nService returned by the <code>MapRequest</code> combinator.\nA <code>Layer</code> that produces <code>MapRequest</code> services.\nService returned by the <code>map_response</code> combinator.\nA <code>Layer</code> that produces a <code>MapResponse</code> service.\nService returned by the <code>map_result</code> combinator.\nA <code>Layer</code> that produces a <code>MapResult</code> service.\nA <code>Future</code> consuming a <code>Service</code> and request, waiting until …\nOptionally forwards requests to an inner service.\nA future that yields a mutable reference to the service …\nA <code>Future</code> that yields the service when it is ready to …\nAn extension trait for <code>Service</code>s that provides a variety of …\nA <code>Service</code> implemented by a closure.\n<code>Service</code> returned by the <code>then</code> combinator.\nA <code>Layer</code> that produces a <code>Then</code> service.\nA boxed <code>Service</code> trait object.\nExecutes a new future after this service’s future …\nConvert the service into a <code>Service</code> + <code>Send</code> trait object.\nConvert the service into a <code>Service</code> + <code>Clone</code> + <code>Send</code> trait …\nProcess all requests from the given <code>Stream</code>, and produce a …\nError types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types\nReturns a new <code>FutureService</code> for the given future.\nGet a mutable reference to the inner service\nGet a reference to the inner service\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the wrapped <code>Service</code>.\nExtract the wrapped <code>Service</code>.\nConsume <code>self</code>, returning the inner service\nReturns a <code>Layer</code> for wrapping a <code>Service</code> in a <code>BoxService</code> …\nReturns a <code>Layer</code> for wrapping a <code>Service</code> in an …\nReturns a <code>Layer</code> for wrapping a <code>Service</code> in a <code>BoxCloneService</code>\nReturns a <code>Layer</code> for wrapping a <code>Service</code> in a …\nReturns a new <code>Layer</code> that produces <code>AndThen</code> services.\nReturns a new <code>Layer</code> that produces <code>MapErr</code> services.\nReturns a new <code>Layer</code> that produces <code>MapRequest</code> services.\nReturns a new <code>Layer</code> that produces <code>MapResponse</code> services.\nReturns a new <code>Layer</code> that produces <code>MapResult</code> services.\nReturns a new <code>Layer</code> that produces <code>MapFuture</code> services.\nReturns a new <code>Layer</code> that produces <code>Then</code> services.\nMaps this service’s error value to a different value. …\nComposes a function that transforms futures produced by …\nComposes a function <em>in front of</em> the service.\nMaps this service’s response value to a different value. …\nMaps this service’s result type (…\nCreate a new <code>BoxLayer</code>.\nCreate a new <code>BoxCloneServiceLayer</code>.\nCreate a new <code>BoxCloneSyncServiceLayer</code>.\nCreate a new <code>BoxCloneService</code>.\nCreate a new <code>BoxCloneSyncService</code>.\nCreates a new <code>AndThen</code> service.\nCreates a new <code>AndThenLayer</code> layer.\nCreate new <code>CallAll</code> combinator.\nCreate new <code>CallAllUnordered</code> combinator.\nReturns a new <code>FutureService</code> for the given future.\nCreates a new <code>MapErr</code> service.\nCreates a new <code>MapErrLayer</code>.\nCreates a new <code>MapRequest</code> service.\nCreates a new <code>MapRequestLayer</code>.\nCreates a new <code>MapResponse</code> service.\nCreates a new <code>MapResponseLayer</code> layer.\nCreates a new <code>MapResult</code> service.\nCreates a new <code>MapResultLayer</code> layer.\nCreates a new <code>MapFuture</code> service.\nCreates a new <code>MapFutureLayer</code> layer.\nCreate a new <code>Optional</code>.\nCreates a new <code>Then</code> service.\nCreates a new <code>ThenLayer</code> layer.\nConsume this <code>Service</code>, calling it with the provided request …\nConvert an <code>Option&lt;Layer&gt;</code> into a <code>Layer</code>.\nYields a mutable reference to the service when it is ready …\nYields the service when it is ready to accept a request.\nPRNG utilities for tower middleware.\nReturns a new <code>ServiceFn</code> with the given closure.\nExtract the wrapped <code>Service</code>.\nExtract the wrapped <code>Service</code>.\nComposes an asynchronous function <em>after</em> this service.\nReturn responses as they are ready, regardless of the …\nError types for <code>Optional</code>.\nError returned if the inner <code>Service</code> has not been set.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResponse future from <code>AndThen</code> services.\nResponse future for <code>Either</code>.\nResponse future from <code>MapErr</code> services.\nResponse future from <code>MapResponse</code> services.\nResponse future from <code>MapResult</code> services.\nResponse future from <code>Then</code> services.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture types for <code>Optional</code>.\nResponse future returned by <code>Optional</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>Rng</code> implementation that uses a <code>Hasher</code> to generate the …\nA simple PRNG trait for use within tower middleware.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new default <code>HasherRng</code>.\nGenerate a random <code>f64</code> between <code>[0, 1)</code>.\nRandomly pick a value within the range.\nGenerate a random <code>u64</code>.\nCreate a new <code>HasherRng</code> with the provided hasher.")