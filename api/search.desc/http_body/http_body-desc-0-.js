searchState.loadedDescShard("http_body", 0, "Asynchronous HTTP request or response body.\nTrait representing a streaming body of a Request or …\nA collected body produced by <code>Body::collect</code> which collects …\nFuture that resolves to the next data chunk from <code>Body</code>\nValues yielded by the <code>Body</code>.\nA body that is always empty.\nThe error type this <code>Body</code> might generate.\nA body that consists of a single chunk.\nAn error returned when body length exceeds the configured …\nA length limited body.\nA <code>Body</code> size hint\nFuture that resolves to the optional trailers from <code>Body</code>\nAggregate this buffered into a <code>Buf</code>.\nTurn this body into a boxed trait object.\nTurn this body into a boxed trait object that is !Sync.\nTurn this body into <code>Collected</code> body which will collect all …\nCombinators for the <code>Body</code> trait.\nReturns future that resolves to next data chunk, if any.\nCreate an empty <code>Full</code>.\nReturns the exact size of data that will be yielded <strong>if</strong> the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> when the end of stream has been reached.\nReturns the lower bound of data that the <code>Body</code> will yield …\nMaps this body’s data value to a different value.\nMaps this body’s error value to a different value.\nCreate a new <code>Empty</code>.\nCreate a new <code>Full</code>.\nCreate a new <code>Limited</code>.\nReturns a new <code>SizeHint</code> with default values\nAttempt to pull out the next data buffer of this stream.\nPoll for an optional <strong>single</strong> <code>HeaderMap</code> of trailers.\nSet the value of the <code>lower</code> and <code>upper</code> bounds to exactly the …\nSet the value of the <code>lower</code> hint.\nSet the value of the <code>upper</code> hint value.\nReturns the bounds on the remaining length of the stream.\nConvert this body into a <code>Bytes</code>.\nReturns future that resolves to trailers, if any.\nIf there is a trailers frame buffered, returns a reference …\nReturns the upper bound of data the <code>Body</code> will yield before …\nReturns a new <code>SizeHint</code> with both upper and lower bounds …\nA boxed <code>Body</code> trait object.\nBody returned by the <code>map_data</code> combinator.\nBody returned by the <code>map_err</code> combinator.\nA boxed <code>Body</code> trait object that is !Sync.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner body\nGet a mutable reference to the inner body\nGet a pinned mutable reference to the inner body\nGet a pinned mutable reference to the inner body\nGet a reference to the inner body\nGet a reference to the inner body\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code>, returning the inner body\nConsume <code>self</code>, returning the inner body\nCreate a new <code>BoxBody</code>.\nCreate a new <code>BoxBody</code>.")