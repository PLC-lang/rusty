searchState.loadedDescShard("iec61131std", 0, "Defines shift operations\n. Calculates the arc cosine of the given value in radiants\n. Calculates the arc cosine of the given value in radiants\n. Calculates the arc sine of the given value in radiants\n. Calculates the arc sine of the given value in radiants\n. Calculates the arc tangent of the given value in radiants\n. Calculates the four quadrant arc tangent of the value …\n. Calculates the arc tangent of the given value in radiants\n. Calculates the arc tangent of the given value in radiants\n. Calculates the cosine of the given value in radiants\n. Calculates the cosine of the given value in radiants\n. The natural exponential function (e)\n. The natural exponential function (e)\n. Calculates the natural logarithm of the given (f64) value\n. Calculates the natural logarithm of the given (f32) value\n. Calculates the natural logarithm of the given (f64) value\n. Calculates the base 10 logarithm of the given (f32) value\n. Calculates the sine of the given value in radiants\n. Calculates the sine of the given value in radiants\n. Calculates the square root of the given (f64) value\n. Calculates the square root of the given (f32) value\n. Calculates the tangent of the given value in radiants\n. Calculates the tangent of the given value in radiants\n. Bistable function, reset dominant\n. Bistable function, set dominant\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n. Converts DWORD to REAL\n. Converts LREAL to LWORD\n. Converts LWORD to LREAL\n. Converts REAL to DWORD\nRotate left operation on bytes\nRotate left operation on dword\nRotate left operation on lword\nRotate left operation on word\nRotate right operation on bytes\nRotate right operation on dword\nRotate right operation on lword\nRotate right operation on word\nShift left operation on bytes\nShift left operation on dword\nShift left operation on lword\nShift left operation on word\nShift right operation on bytes\nShift right operation on dword\nShift right operation on lword\nShift right operation on word\n. Counter down for INT\n. Counter down for DINT\n. Counter down for INT\n. Counter down for LINT\n. Counter down for UDINT\n. Counter down for ULINT\n. Counter up for INT\n. Counter up and down for INT\n. Counter up and down for DINT\n. Counter up and down for INT\n. Counter up and down for LINT\n. Counter up and down for UDINT\n. Counter up and down for ULINT\n. Counter up for DINT\n. Counter up for INT\n. Counter up for LINT\n. Counter up for DINT\n. Counter up for ULINT\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n. Converts DT/LDT to DATE\n. Converts DT/LDT to TOD/LTOD\n. Concatenates DATE and TOD to DT\n. Concatenates year, month and day of type DINT to DATE\n. Concatenates year, month and day of type INT to DATE\n. Concatenates year, month and day of type LINT to DATE\n. Concatenates year, month and day of type UDINT to DATE\n. Concatenates year, month and day of type UINT to DATE\n. Concatenates year, month and day of type ULINT to DATE\n. Concatenates hour, minute, second, millisecond of type …\n. Concatenates hour, minute, second, millisecond of type …\n. Concatenates hour, minute, second, millisecond of type …\n. Concatenates hour, minute, second, millisecond of type …\n. Concatenates hour, minute, second, millisecond of type …\n. Concatenates hour, minute, second, millisecond of type …\n. Concatenates hour, minute, second, millisecond of type …\n. Concatenates hour, minute, second, millisecond of type …\n. Returns day of week for given DATE of type SINT\n. Splits DATE into year, month, day of type DINT\n. Splits DATE into year, month, day of type INT\n. Splits DATE into year, month, day of type LINT\n. Splits DATE into year, month, day of type UDINT\n. Splits DATE into year, month, day of type UINT Panics on …\n. Splits DATE into year, month, day of type ULINT Panics …\n. Splits DT into year, month, day, hour, minute, second, …\n. Splits DT into year, month, day, hour, minute, second, …\n. Splits DT into year, month, day, hour, minute, second, …\n. Splits DT into year, month, day, hour, minute, second, …\n. Splits DT into year, month, day, hour, minute, second, …\n. Splits DT into year, month, day, hour, minute, second, …\n. Splits TOD into hour, minute, second, millisecond of …\n. Splits TOD into hour, minute, second, millisecond of …\n. Splits TOD into hour, minute, second, millisecond of …\n. Splits TOD into hour, minute, second, millisecond of …\n. Splits TOD into hour, minute, second, millisecond of …\n. Splits TOD into hour, minute, second, millisecond of …\n. Concatenates year, month and day to DATE\n. Concatenates hour, minute, second, millisecond to TOD\n. This operator returns the value of adding up DT and TIME.\n. This operator returns the value of adding up two TIME …\n. This operator returns the value of adding up TOD and …\n. Divide LTIME by DINT Panic on overflow or division by …\n. Divide LTIME by INT Panic on overflow or division by zero\n. Divide LTIME by LINT Panic on overflow or division by …\n. Divide LTIME by LREAL Panic on overflow or division by …\n. Divide LTIME by REAL Panic on overflow or division by …\n. Divide LTIME by SINT Panic on overflow or division by …\n. Divide LTIME by UDINT Panic on overflow or division by …\n. Divide LTIME by UINT Panic on overflow or division by …\n. Divide LTIME by ULINT Panic on overflow or division by …\n. Divide LTIME by USINT Panic on overflow or division by …\n. Divide TIME by DINT Panic on overflow or division by zero\n. Divide TIME by INT Panic on overflow or division by zero\n. Divide TIME by LINT Panic on overflow or division by zero\n. Divide TIME by LREAL Panic on overflow or division by …\n. Divide TIME by REAL Panic on overflow or division by zero\n. Divide TIME by SINT Panic on overflow or division by zero\n. Divide TIME by UDINT Panic on overflow or division by …\n. Divide TIME by UINT Panic on overflow or division by zero\n. Divide TIME by ULINT Panic on overflow or division by …\n. Divide TIME by USINT Panic on overflow or division by …\n. Divide TIME by DINT Panic on overflow or division by zero\n. Divide TIME by INT Panic on overflow or division by zero\n. Divide TIME by LINT Panic on overflow or division by zero\n. Divide TIME by LREAL Panic on overflow or division by …\n. Divide TIME by REAL Panic on overflow or division by zero\n. Divide TIME by SINT Panic on overflow or division by zero\n. Divide TIME by UDINT Panic on overflow or division by …\n. Divide TIME by UINT Panic on overflow or division by zero\n. Divide TIME by ULINT Panic on overflow or division by …\n. Divide TIME by USINT Panic on overflow or division by …\n. Multiply LTIME with DINT Panic on overflow\n. Multiply LTIME with INT Panic on overflow\n. Multiply LTIME with LINT Panic on overflow\n. Multiply LTIME with LREAL Panic on overflow\n. Multiply LTIME with REAL Panic on overflow\n. Multiply LTIME with SINT Panic on overflow\n. Multiply LTIME with UDINT Panic on overflow\n. Multiply LTIME with UINT Panic on overflow\n. Multiply LTIME with ULINT Panic on overflow\n. Multiply LTIME with USINT Panic on overflow\n. Multiply TIME with DINT Panic on overflow\n. Multiply TIME with INT Panic on overflow\n. Multiply TIME with LINT Panic on overflow\n. Multiply TIME with LREAL Panic on overflow\n. Multiply TIME with REAL Panic on overflow\n. Multiply TIME with SINT Panic on overflow\n. Multiply TIME with UDINT Panic on overflow\n. Multiply TIME with UINT Panic on overflow\n. Multiply TIME with ULINT Panic on overflow\n. Multiply TIME with USINT Panic on overflow\n. Multiply TIME with DINT Panic on overflow\n. Multiply TIME with INT Panic on overflow\n. Multiply TIME with LINT Panic on overflow\n. Multiply TIME with LREAL Panic on overflow\n. Multiply TIME with REAL Panic on overflow\n. Multiply TIME with SINT Panic on overflow\n. Multiply TIME with UDINT Panic on overflow\n. Multiply TIME with UINT Panic on overflow\n. Multiply TIME with ULINT Panic on overflow\n. Multiply TIME with USINT Panic on overflow\n. This operator produces the subtraction of two DATE …\n. This operator produces the subtraction of two DT operands\n. This operator produces the subtraction of DT and TIME …\n. This operator produces the subtraction of two TIME …\n. This operator produces the subtraction of TOD and TIME …\n. This operator produces the subtraction of two TOD …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given f64 from big endian data format to native …\n. Converts given integer type from big endian data format …\n. Converts given f32 from big endian data format to native …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from big endian data format …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given f64 from little endian data format to …\n. Converts given integer type from little endian data …\n. Converts given f32 from little endian data format to …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from little endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given f64 from native endian data format to big …\n. Converts given integer type from native endian data …\n. Converts given f32 from native endian data format to big …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given f64 from native endian data format to …\n. Converts given integer type from native endian data …\n. Converts given f32 from native endian data format to …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\n. Converts given integer type from native endian data …\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n. Rounds a LREAL (f64) value\n. Rounds a REAL (f32) value\n. Converts CHAR to STRING\n. Converts CHAR to WCHAR\n. Converts STRING to CHAR\n. Converts STRING to WSTRING Limited by a return type of …\n. Converts WCHAR to CHAR\n. Converts WCHAR to WSTRING\n. Converts WSTRING to STRING Limited by a return type of …\n. Converts WSTRING to WCHAR\nConcatenates all given strings in the order in which they …\nConcatenates all given strings in the order in which they …\nConcatenates all given strings in the order in which they …\nConcatenates all given strings in the order in which they …\nDeletes the given amount of characters in a string, …\nDeletes the given amount of characters in a string, …\nFinds the first occurance of the second string (in2) in …\nFinds the first occurance of the second string (src2) …\nInserts a string into another string at the specified …\nInserts a string into another string at the specified …\nWrites a substring of a specified length from the given …\nWrites a substring of a specified length from the given …\nGets length of the given character string. Encoding: UTF-8\nGets length of the given string. Encoding: UTF-16\nWrites a substring of a specified length from the given …\nWrites a substring of a specified length from the given …\nReplaces the given amount of characters in a string, …\nReplaces the given amount of characters in a string, …\nWrites a substring of a specified length from the given …\nWrites a substring of a specified length from the given …\nExtensible “equal” comparison function. Encoding: UTF-8\nExtensible “greater than” comparison function. …\nExtensible “less than” comparison function. Encoding: …\nExtensible “equal” comparison function. Encoding: …\nExtensible “greater than” comparison function. …\nExtensible “less than” comparison function. Encoding: …\nDecodes raw UTF-8 or UTF-16 codepoints into a character …\nEncodes UTF-8 or UTF-16 character iterator. Its raw …\nReturns the argument unchanged.\nHelper function\nCalls <code>U::from(self)</code>.\nHelper function\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nReturns true if the value is false and the previous value …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the value is true, and the previous value …\n. Check if input as a valid BCD\n. Check if input as a valid BCD\n. Check if input as a valid BCD\n. Check if input as a valid BCD\n. Check if input is a valid LREAL NaN or infinite will …\n. Check if input is a valid REAL NaN or infinite will …")