searchState.loadedDescShard("xtask", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommit hash on which the benchmark ran.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHost information, see <code>Host</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollected benchmarks, where the first tuple element …\nPersists the benchmark data into a database\nUnix timestamp of when this xtask was called.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBenchmarks the current task and returns the avarage …\nExecutes the task to be measured and returns the time it …\nReturns the name of the task being benchmarked\nReturns a DurationWrapper with its inner type being the …\nBenchmark task for <code>oscat</code>\nExecutes any actions required before time measurement …\nBenchmark task for <code>res/sieve.c</code>\nBenchmark task for <code>res/sieve.st</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")