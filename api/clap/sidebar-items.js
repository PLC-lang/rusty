initSidebarItems({"enum":[["AppSettings","Application level settings, which affect how `Command` operates"],["ArgSettings","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods `Arg::setting`, `Arg::unset_setting`, and `Arg::is_set`. This is what the `Arg` methods which accept a `bool` use internally."],["ColorChoice","Represents the color preferences for program output"],["ErrorKind","Command line argument parser kind of error"],["ValueHint","Provide shell with hint on how to complete an argument."],["ValueSource","Origin of the argumentâ€™s value"]],"macro":[["arg","Create an `Arg` from a usage string."],["command","Requires `cargo` feature flag to be enabled."]],"mod":[["error","Error reporting"]],"struct":[["App","Deprecated, replaced with [`Command`]"],["Arg","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program."],["ArgGroup","Family of related arguments."],["ArgMatches","Container for parse results."],["Indices","Iterate over indices for where an argument appeared when parsing, via `ArgMatches::indices_of`"],["OsValues","Iterate over multiple values for an argument via `ArgMatches::values_of_os`."],["PossibleValue","A possible value of an argument."],["Values","Iterate over multiple values for an argument via `ArgMatches::values_of`."]],"trait":[["ArgEnum","Parse arguments into enums."],["Args","Parse a set of arguments into a user-defined container."],["CommandFactory","Create an [`Command`] relevant for a user-defined container."],["FromArgMatches","Converts an instance of [`ArgMatches`] to a user-defined container."],["IntoApp","Create an [`Command`] relevant for a user-defined container."],["Parser","Parse command-line arguments into `Self`."],["Subcommand","Parse a sub-command into a user-defined enum."]],"type":[["Command","Build a command-line interface."]]});