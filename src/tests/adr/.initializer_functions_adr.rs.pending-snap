{"run_id":"1737017381-988137738","line":805,"new":{"module_name":"rusty__tests__adr__initializer_functions_adr","snapshot_name":"initializing_method_variables","metadata":{"source":"src/tests/adr/initializer_functions_adr.rs","assertion_line":805,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0) {\nentry:\n  %x = alloca i32, align 4\n  %px = alloca i32*, align 8\n  store i32 10, i32* %x, align 4\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__tests__adr__initializer_functions_adr","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n%foo.bar = type { i32, i32* }\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0, %foo.bar* %1) {\nentry:\n  %x = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 0\n  %px = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 1\n  store i32 10, i32* %x, align 4\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
