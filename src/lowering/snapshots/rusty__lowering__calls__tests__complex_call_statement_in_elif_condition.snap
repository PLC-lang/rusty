---
source: src/lowering/calls.rs
expression: "unit.implementations[1]"
---
Implementation {
    name: "main",
    type_name: "main",
    linkage: Internal,
    pou_type: Function,
    statements: [
        ExpressionList {
            expressions: [
                Allocation {
                    name: "__complexFunc0",
                    reference_type: "STRING",
                },
                CallStatement {
                    operator: ReferenceExpr {
                        kind: Member(
                            Identifier {
                                name: "complexFunc",
                            },
                        ),
                        base: None,
                    },
                    parameters: Some(
                        ExpressionList {
                            expressions: [
                                ReferenceExpr {
                                    kind: Member(
                                        Identifier {
                                            name: "__complexFunc0",
                                        },
                                    ),
                                    base: None,
                                },
                            ],
                        },
                    ),
                },
                IfStatement {
                    blocks: [
                        ConditionalBlock {
                            condition: LiteralBool {
                                value: true,
                            },
                            body: [],
                        },
                        ConditionalBlock {
                            condition: BinaryExpression {
                                operator: Equal,
                                left: ReferenceExpr {
                                    kind: Member(
                                        Identifier {
                                            name: "__complexFunc0",
                                        },
                                    ),
                                    base: None,
                                },
                                right: LiteralString {
                                    value: "hello",
                                    is_wide: false,
                                },
                            },
                            body: [],
                        },
                    ],
                    else_block: [],
                },
            ],
        },
    ],
    location: SourceLocation {
        span: Range(
            TextLocation {
                line: 7,
                column: 8,
                offset: 155,
            }..TextLocation {
                line: 11,
                column: 14,
                offset: 335,
            },
        ),
        file: Some(
            "<internal>",
        ),
    },
    name_location: SourceLocation {
        span: Range(
            TextLocation {
                line: 5,
                column: 17,
                offset: 110,
            }..TextLocation {
                line: 5,
                column: 21,
                offset: 114,
            },
        ),
        file: Some(
            "<internal>",
        ),
    },
    overriding: false,
    generic: false,
    access: None,
}
