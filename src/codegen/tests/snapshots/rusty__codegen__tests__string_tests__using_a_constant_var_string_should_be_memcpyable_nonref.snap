---
source: src/codegen/tests/string_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@__FSTRING_TO_DT.ignore__init = unnamed_addr constant [2 x i8] c"*\00"
@__FSTRING_TO_DT.fchar__init = unnamed_addr constant [2 x i8] c"#\00"

define i8 @STRING_EQUAL(i8* %0, i8* %1) section "fn-STRING_EQUAL:u8[s8u1025][s8u1025]" {
entry:
  %STRING_EQUAL = alloca i8, align 1
  %op1 = alloca [1025 x i8], align 1
  %bitcast = bitcast [1025 x i8]* %op1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %bitcast, i8 0, i64 1025, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %bitcast, i8* align 1 %0, i64 1024, i1 false)
  %op2 = alloca [1025 x i8], align 1
  %bitcast1 = bitcast [1025 x i8]* %op2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %bitcast1, i8 0, i64 1025, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %bitcast1, i8* align 1 %1, i64 1024, i1 false)
  store i8 0, i8* %STRING_EQUAL, align 1
  %STRING_EQUAL_ret = load i8, i8* %STRING_EQUAL, align 1
  ret i8 %STRING_EQUAL_ret
}

define i64 @FSTRING_TO_DT() section "fn-FSTRING_TO_DT:i64" {
entry:
  %FSTRING_TO_DT = alloca i64, align 8
  %ignore = alloca [2 x i8], align 1
  %fchar = alloca [2 x i8], align 1
  %c = alloca [2 x i8], align 1
  %0 = bitcast [2 x i8]* %ignore to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__FSTRING_TO_DT.ignore__init, i32 0, i32 0), i64 ptrtoint ([2 x i8]* getelementptr ([2 x i8], [2 x i8]* null, i32 1) to i64), i1 false)
  %1 = bitcast [2 x i8]* %fchar to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__FSTRING_TO_DT.fchar__init, i32 0, i32 0), i64 ptrtoint ([2 x i8]* getelementptr ([2 x i8], [2 x i8]* null, i32 1) to i64), i1 false)
  %2 = bitcast [2 x i8]* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 ptrtoint ([2 x i8]* getelementptr ([2 x i8], [2 x i8]* null, i32 1) to i64), i1 false)
  store i64 0, i64* %FSTRING_TO_DT, align 4
  %3 = bitcast [2 x i8]* %c to i8*
  %4 = bitcast [2 x i8]* %ignore to i8*
  %call = call i8 @STRING_EQUAL(i8* %3, i8* %4)
  %5 = icmp ne i8 %call, 0
  br i1 %5, label %condition_body, label %continue

condition_body:                                   ; preds = %entry
  br label %continue

continue:                                         ; preds = %condition_body, %entry
  %FSTRING_TO_DT_ret = load i64, i64* %FSTRING_TO_DT, align 4
  ret i64 %FSTRING_TO_DT_ret
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nounwind willreturn }
