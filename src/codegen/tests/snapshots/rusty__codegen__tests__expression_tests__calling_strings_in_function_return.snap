---
source: src/codegen/tests/expression_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { [81 x i8] }

@main_instance = global %main zeroinitializer
@utf08_literal_0 = private unnamed_addr constant [6 x i8] c"hello\00"

define void @func(i8* %0) {
entry:
  %func = alloca i8*, align 8
  store i8* %0, i8** %func, align 8
  %deref = load i8*, i8** %func, align 8
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %deref, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @utf08_literal_0, i32 0, i32 0), i32 6, i1 false)
  ret void
}

define void @main(%main* %0) {
entry:
  %x = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %__func0 = alloca [81 x i8], align 1
  %1 = bitcast [81 x i8]* %__func0 to i8*
  call void @func(i8* %1)
  %2 = bitcast [81 x i8]* %x to i8*
  %3 = bitcast [81 x i8]* %__func0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 %3, i32 80, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type { [81 x i8] }

@main_instance = external global %main

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { [81 x i8] }

@main_instance = external global %main
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)
