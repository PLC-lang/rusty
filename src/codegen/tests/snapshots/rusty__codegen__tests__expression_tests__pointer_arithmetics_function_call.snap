---
source: src/codegen/tests/expression_tests.rs
assertion_line: 372
expression: result

---
; ModuleID = 'main'
source_filename = "main"

%main_interface = type { i16*, i16, i8 }
%foo_interface = type {}

@main_instance = global %main_interface zeroinitializer

define i64 @foo(%foo_interface* %0) {
entry:
  %foo = alloca i64, align 8
  store i64 0, i64* %foo, align 4
  %foo_ret = load i64, i64* %foo, align 4
  ret i64 %foo_ret
}

define void @main(%main_interface* %0) {
entry:
  %pt = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 0
  %x = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 1
  %comp = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 2
  store i16* %x, i16** %pt, align 8
  %load_pt = load i16*, i16** %pt, align 8
  %foo_instance = alloca %foo_interface, align 8
  br label %input

input:                                            ; preds = %entry
  br label %call

call:                                             ; preds = %input
  %call1 = call i64 @foo(%foo_interface* %foo_instance)
  br label %output

output:                                           ; preds = %call
  br label %continue

continue:                                         ; preds = %output
  %access___main_pt = getelementptr inbounds i16, i16* %load_pt, i64 %call1
  store i16* %access___main_pt, i16** %pt, align 8
  %load_pt2 = load i16*, i16** %pt, align 8
  %load_pt3 = load i16*, i16** %pt, align 8
  store i8 zext (i1 icmp eq (i64 ptrtoint (i16* %load_pt2 to i64), i64 ptrtoint (i16* %load_pt3 to i64)) to i8), i8* %comp, align 1
  %load_pt4 = load i16*, i16** %pt, align 8
  %foo_instance5 = alloca %foo_interface, align 8
  br label %input6

input6:                                           ; preds = %continue
  br label %call7

call7:                                            ; preds = %input6
  %call10 = call i64 @foo(%foo_interface* %foo_instance5)
  br label %output8

output8:                                          ; preds = %call7
  br label %continue9

continue9:                                        ; preds = %output8
  %tmpVar = icmp ne i64 ptrtoint (i16* %load_pt4 to i64), %call10
  %1 = zext i1 %tmpVar to i8
  store i8 %1, i8* %comp, align 1
  %load_pt11 = load i16*, i16** %pt, align 8
  %load_pt12 = load i16*, i16** %pt, align 8
  store i8 zext (i1 icmp slt (i64 ptrtoint (i16* %load_pt11 to i64), i64 ptrtoint (i16* %load_pt12 to i64)) to i8), i8* %comp, align 1
  %load_pt13 = load i16*, i16** %pt, align 8
  %foo_instance14 = alloca %foo_interface, align 8
  br label %input15

input15:                                          ; preds = %continue9
  br label %call16

call16:                                           ; preds = %input15
  %call19 = call i64 @foo(%foo_interface* %foo_instance14)
  br label %output17

output17:                                         ; preds = %call16
  br label %continue18

continue18:                                       ; preds = %output17
  %tmpVar20 = icmp sgt i64 ptrtoint (i16* %load_pt13 to i64), %call19
  %2 = zext i1 %tmpVar20 to i8
  store i8 %2, i8* %comp, align 1
  %load_pt21 = load i16*, i16** %pt, align 8
  %load_pt22 = load i16*, i16** %pt, align 8
  store i8 zext (i1 icmp sle (i64 ptrtoint (i16* %load_pt21 to i64), i64 ptrtoint (i16* %load_pt22 to i64)) to i8), i8* %comp, align 1
  %foo_instance23 = alloca %foo_interface, align 8
  br label %input24

input24:                                          ; preds = %continue18
  br label %call25

call25:                                           ; preds = %input24
  %call28 = call i64 @foo(%foo_interface* %foo_instance23)
  br label %output26

output26:                                         ; preds = %call25
  br label %continue27

continue27:                                       ; preds = %output26
  %load_pt29 = load i16*, i16** %pt, align 8
  %tmpVar30 = icmp sge i64 %call28, ptrtoint (i16* %load_pt29 to i64)
  %3 = zext i1 %tmpVar30 to i8
  store i8 %3, i8* %comp, align 1
  ret void
}

