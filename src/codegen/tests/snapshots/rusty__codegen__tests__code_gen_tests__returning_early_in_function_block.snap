---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%abcdef = type { i8 }

@__abcdef__init = unnamed_addr constant %abcdef zeroinitializer

define void @abcdef(%abcdef* %0) {
entry:
  %n = getelementptr inbounds %abcdef, %abcdef* %0, i32 0, i32 0
  %load_n = load i8, i8* %n, align 1
  %1 = sext i8 %load_n to i32
  %tmpVar = icmp slt i32 %1, 10
  %2 = zext i1 %tmpVar to i8
  %3 = icmp ne i8 %2, 0
  br i1 %3, label %condition_body, label %continue

condition_body:                                   ; preds = %entry
  ret void

buffer_block:                                     ; No predecessors!
  br label %continue

continue:                                         ; preds = %buffer_block, %entry
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%abcdef = type { i8 }

@__abcdef__init = external global %abcdef

define void @__init_abcdef(%abcdef* %0) {
entry:
  %self = alloca %abcdef*, align 8
  store %abcdef* %0, %abcdef** %self, align 8
  ret void
}

declare void @abcdef(%abcdef*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

define void @__init___testproject() {
entry:
  ret void
}
