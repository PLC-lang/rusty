---
source: src/codegen/tests/string_tests.rs
expression: program
---
; ModuleID = 'main'
source_filename = "main"

%main = type { [81 x i8] }

@main_instance = global %main zeroinitializer
@utf08_literal_0 = private unnamed_addr constant [154 x i8] c"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\00"

define void @read_string([81 x i8]* %0, [81 x i8] %1) section "fn-read_string:s8u81[s8u81]" {
entry:
  %read_string = alloca [81 x i8]*, align 8
  store [81 x i8]* %0, [81 x i8]** %read_string, align 8
  %to_read = alloca [81 x i8], align 1
  store [81 x i8] %1, [81 x i8]* %to_read, align 1
  %deref = load [81 x i8]*, [81 x i8]** %read_string, align 8
  %2 = bitcast [81 x i8]* %deref to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 ptrtoint ([81 x i8]* getelementptr ([81 x i8], [81 x i8]* null, i32 1) to i64), i1 false)
  %deref1 = load [81 x i8]*, [81 x i8]** %read_string, align 8
  %3 = bitcast [81 x i8]* %deref1 to i8*
  %4 = bitcast [81 x i8]* %to_read to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %4, i32 80, i1 false)
  ret void
}

define void @main(%main* %0) section "fn-main:v" {
entry:
  %text1 = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %1 = alloca [81 x i8], align 1
  %2 = bitcast [81 x i8]* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 ptrtoint ([81 x i8]* getelementptr ([81 x i8], [81 x i8]* null, i32 1) to i64), i1 false)
  %3 = bitcast [81 x i8]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 getelementptr inbounds ([154 x i8], [154 x i8]* @utf08_literal_0, i32 0, i32 0), i32 80, i1 false)
  %4 = load [81 x i8], [81 x i8]* %1, align 1
  %5 = alloca [81 x i8], align 1
  call void @read_string([81 x i8]* %5, [81 x i8] %4)
  %6 = bitcast [81 x i8]* %text1 to i8*
  %7 = bitcast [81 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 80, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nounwind willreturn }
