---
source: src/codegen/tests/code_gen_tests.rs
assertion_line: 1548
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%MyClass = type {}

@__MyClass__init = unnamed_addr constant %MyClass zeroinitializer

define void @MyClass(%MyClass* %0) {
entry:
  ret void
}

define i16 @MyClass.testMethod(%MyClass* %0, i16 %1) {
entry:
  %MyClass.testMethod = alloca i16, align 2
  %myMethodArg = alloca i16, align 2
  store i16 %1, i16* %myMethodArg, align 2
  store i16 0, i16* %MyClass.testMethod, align 2
  store i16 1, i16* %MyClass.testMethod, align 2
  %MyClass.testMethod_ret = load i16, i16* %MyClass.testMethod, align 2
  ret i16 %MyClass.testMethod_ret
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%MyClass = type {}

@__MyClass__init = external global %MyClass

define void @__init_myclass(%MyClass* %0) {
entry:
  %self = alloca %MyClass*, align 8
  store %MyClass* %0, %MyClass** %self, align 8
  ret void
}

declare void @MyClass(%MyClass*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  ret void
}
