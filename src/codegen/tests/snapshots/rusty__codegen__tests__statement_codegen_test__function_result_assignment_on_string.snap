---
source: src/codegen/tests/statement_codegen_test.rs
assertion_line: 129
expression: result

---
; ModuleID = 'main'
source_filename = "main"

%CONCAT_interface = type { [1025 x i8], [1025 x i8] }
%LIST_ADD_interface = type { [1001 x i8], [2 x i8] }

declare [1025 x i8] @CONCAT(%CONCAT_interface*)

define i8 @LIST_ADD(%LIST_ADD_interface* %0) {
entry:
  %INS = getelementptr inbounds %LIST_ADD_interface, %LIST_ADD_interface* %0, i32 0, i32 0
  %sx = getelementptr inbounds %LIST_ADD_interface, %LIST_ADD_interface* %0, i32 0, i32 1
  %LIST_ADD = alloca i8, align 1
  %CONCAT_instance = alloca %CONCAT_interface, align 8
  br label %input

input:                                            ; preds = %entry
  %1 = getelementptr inbounds %CONCAT_interface, %CONCAT_interface* %CONCAT_instance, i32 0, i32 0
  %load_sx = load [2 x i8], [2 x i8]* %sx, align 1
  store [2 x i8] %load_sx, [1025 x i8]* %1, align 1
  %2 = getelementptr inbounds %CONCAT_interface, %CONCAT_interface* %CONCAT_instance, i32 0, i32 1
  %load_INS = load [1001 x i8], [1001 x i8]* %INS, align 1
  store [1001 x i8] %load_INS, [1025 x i8]* %2, align 1
  br label %call

call:                                             ; preds = %input
  %call1 = call [1025 x i8] @CONCAT(%CONCAT_interface* %CONCAT_instance)
  br label %output

output:                                           ; preds = %call
  br label %continue

continue:                                         ; preds = %output
  %3 = alloca [1025 x i8], align 1
  store [1025 x i8] %call1, [1025 x i8]* %3, align 1
  %4 = bitcast [1001 x i8]* %INS to i8*
  %5 = bitcast [1025 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %4, i8* align 1 %5, i32 1001, i1 false)
  %LIST_ADD_ret = load i8, i8* %LIST_ADD, align 1
  ret i8 %LIST_ADD_ret
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nosync nounwind willreturn }

