---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i32 }

@prg_instance = global %prg zeroinitializer

define i32 @bar() {
entry:
  %bar = alloca i32, align 4
  store i32 0, i32* %bar, align 4
  store i32 1, i32* %bar, align 4
  %bar_ret = load i32, i32* %bar, align 4
  ret i32 %bar_ret
}

define i32 @foo(i32 %0) {
entry:
  %foo = alloca i32, align 4
  %in = alloca i32, align 4
  store i32 %0, i32* %in, align 4
  store i32 0, i32* %foo, align 4
  store i32 1, i32* %foo, align 4
  %foo_ret = load i32, i32* %foo, align 4
  ret i32 %foo_ret
}

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %call = call i32 @bar()
  %call1 = call i32 @foo(i32 %call)
  store i32 %call1, i32* %x, align 4
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i32 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i32 }

@prg_instance = external global %prg

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
