---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%Main = type { i16 }

@Main_instance = global %Main zeroinitializer, section "var-$RUSTY$Main_instance:r1i16"

define i16 @CheckRangeSigned(i16 %0, i16 %1, i16 %2) section "fn-$RUSTY$CheckRangeSigned:i16[i16][i16][i16]" {
entry:
  %CheckRangeSigned = alloca i16, align 2
  %value = alloca i16, align 2
  store i16 %0, i16* %value, align 2
  %lower = alloca i16, align 2
  store i16 %1, i16* %lower, align 2
  %upper = alloca i16, align 2
  store i16 %2, i16* %upper, align 2
  store i16 0, i16* %CheckRangeSigned, align 2
  %load_value = load i16, i16* %value, align 2
  store i16 %load_value, i16* %CheckRangeSigned, align 2
  %CheckRangeSigned_ret = load i16, i16* %CheckRangeSigned, align 2
  ret i16 %CheckRangeSigned_ret
}

define void @Main(%Main* %0) section "fn-$RUSTY$Main:v" {
entry:
  %x = getelementptr inbounds %Main, %Main* %0, i32 0, i32 0
  %call = call i16 @CheckRangeSigned(i16 7, i16 0, i16 100)
  store i16 %call, i16* %x, align 2
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%Main = type { i16 }

@Main_instance = external global %Main, section "var-$RUSTY$Main_instance:r1i16"

define void @__init_main(%Main* %0) section "fn-$RUSTY$__init_main:v[pr1i16]" {
entry:
  %self = alloca %Main*, align 8
  store %Main* %0, %Main** %self, align 8
  ret void
}

declare void @Main(%Main*) section "fn-$RUSTY$Main:v"
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%Main = type { i16 }

@Main_instance = external global %Main, section "var-$RUSTY$Main_instance:r1i16"

define void @__init___testproject() section "fn-$RUSTY$__init___testproject:v" {
entry:
  call void @__init_main(%Main* @Main_instance)
  ret void
}

declare void @__init_main(%Main*) section "fn-$RUSTY$__init_main:v[pr1i16]"

declare void @Main(%Main*) section "fn-$RUSTY$Main:v"
