---
source: src/codegen/tests/code_gen_tests.rs
assertion_line: 1027
expression: prg
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%fb = type {}

@__fb__init = unnamed_addr constant %fb zeroinitializer

define void @fb(%fb* %0) {
entry:
  %call = call i32 @fb.meth(%fb* %0, i32 5)
  %call1 = call i32 @fb.meth(%fb* %0, i32 4)
  ret void
}

define i32 @fb.meth(%fb* %0, i32 %1) {
entry:
  %fb.meth = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 %1, i32* %a, align 4
  store i32 0, i32* %fb.meth, align 4
  %fb.meth_ret = load i32, i32* %fb.meth, align 4
  ret i32 %fb.meth_ret
}

define i32 @foo() {
entry:
  %foo = alloca i32, align 4
  store i32 0, i32* %foo, align 4
  %foo_ret = load i32, i32* %foo, align 4
  ret i32 %foo_ret
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%fb = type {}

@__fb__init = external global %fb

define void @__init_fb(%fb* %0) {
entry:
  %self = alloca %fb*, align 8
  store %fb* %0, %fb** %self, align 8
  ret void
}

declare void @fb(%fb*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  ret void
}
