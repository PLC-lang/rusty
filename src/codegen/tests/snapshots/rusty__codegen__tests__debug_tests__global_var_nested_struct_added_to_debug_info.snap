---
source: src/codegen/tests/debug_tests.rs
expression: codegen
---
; ModuleID = '<internal>'
source_filename = "<internal>"
target datalayout = "[filtered]"
target triple = "[filtered]"

%myStruct = type { i32, %myStruct2 }
%myStruct2 = type { i32, double }

@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___Test, i8* null }]
@llvm.used = appending global [2 x i8*] [i8* bitcast (void ()* @__init___Test to i8*), i8* bitcast ([1 x { i32, void ()*, i8* }]* @llvm.global_ctors to i8*)]
@__myStruct__init = unnamed_addr constant %myStruct zeroinitializer, !dbg !0
@__myStruct2__init = unnamed_addr constant %myStruct2 zeroinitializer, !dbg !14
@gStruct = global %myStruct zeroinitializer, !dbg !17

define void @__init_mystruct(%myStruct* %0) {
entry:
  %self = alloca %myStruct*, align 8
  store %myStruct* %0, %myStruct** %self, align 8
  %deref = load %myStruct*, %myStruct** %self, align 8
  %b = getelementptr inbounds %myStruct, %myStruct* %deref, i32 0, i32 1
  call void @__init_mystruct2(%myStruct2* %b)
  ret void
}

define void @__init_mystruct2(%myStruct2* %0) {
entry:
  %self = alloca %myStruct2*, align 8
  store %myStruct2* %0, %myStruct2** %self, align 8
  ret void
}

define void @__user_init_myStruct(%myStruct* %0) {
entry:
  %self = alloca %myStruct*, align 8
  store %myStruct* %0, %myStruct** %self, align 8
  %deref = load %myStruct*, %myStruct** %self, align 8
  %b = getelementptr inbounds %myStruct, %myStruct* %deref, i32 0, i32 1
  call void @__user_init_myStruct2(%myStruct2* %b)
  ret void
}

define void @__user_init_myStruct2(%myStruct2* %0) {
entry:
  %self = alloca %myStruct2*, align 8
  store %myStruct2* %0, %myStruct2** %self, align 8
  ret void
}

define void @__init___Test() {
entry:
  call void @__init_mystruct(%myStruct* @gStruct)
  call void @__user_init_myStruct(%myStruct* @gStruct)
  ret void
}

!llvm.module.flags = !{!19, !20}
!llvm.dbg.cu = !{!21}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "__myStruct__init", scope: !2, file: !2, line: 2, type: !3, isLocal: false, isDefinition: true)
!2 = !DIFile(filename: "<internal>", directory: "")
!3 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
!4 = !DICompositeType(tag: DW_TAG_structure_type, name: "myStruct", scope: !2, file: !2, line: 2, size: 192, align: 64, flags: DIFlagPublic, elements: !5, identifier: "myStruct")
!5 = !{!6, !8}
!6 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2, file: !2, line: 3, baseType: !7, size: 32, align: 32, flags: DIFlagPublic)
!7 = !DIBasicType(name: "DINT", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)
!8 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2, file: !2, line: 4, baseType: !9, size: 128, align: 64, offset: 64, flags: DIFlagPublic)
!9 = !DICompositeType(tag: DW_TAG_structure_type, name: "myStruct2", scope: !2, file: !2, line: 8, size: 128, align: 64, flags: DIFlagPublic, elements: !10, identifier: "myStruct2")
!10 = !{!11, !12}
!11 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2, file: !2, line: 9, baseType: !7, size: 32, align: 32, flags: DIFlagPublic)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2, file: !2, line: 10, baseType: !13, size: 64, align: 64, offset: 64, flags: DIFlagPublic)
!13 = !DIBasicType(name: "LREAL", size: 64, encoding: DW_ATE_float, flags: DIFlagPublic)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "__myStruct2__init", scope: !2, file: !2, line: 8, type: !16, isLocal: false, isDefinition: true)
!16 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "gStruct", scope: !2, file: !2, line: 15, type: !4, isLocal: false, isDefinition: true)
!19 = !{i32 2, !"Dwarf Version", i32 5}
!20 = !{i32 2, !"Debug Info Version", i32 3}
!21 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !22, splitDebugInlining: false)
!22 = !{!17, !0, !14}
