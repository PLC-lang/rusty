---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { [3 x i32] }

@prg_instance = global %prg zeroinitializer

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %tmpVar = getelementptr inbounds [3 x i32], [3 x i32]* %x, i32 0, i32 0
  store i32 3, i32* %tmpVar, align 4
  %tmpVar1 = getelementptr inbounds [3 x i32], [3 x i32]* %x, i32 0, i32 1
  %tmpVar2 = getelementptr inbounds [3 x i32], [3 x i32]* %x, i32 0, i32 2
  %load_tmpVar = load i32, i32* %tmpVar2, align 4
  %tmpVar3 = add i32 %load_tmpVar, 3
  store i32 %tmpVar3, i32* %tmpVar1, align 4
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { [3 x i32] }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { [3 x i32] }

@prg_instance = external global %prg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
