---
source: src/codegen/tests/expression_tests.rs
assertion_line: 80
expression: result

---
; ModuleID = 'main'
source_filename = "main"

%STRING_EQUAL_interface = type { [1025 x i8], [1025 x i8] }
%baz_interface = type { [81 x i8], [81 x i8], i8 }

@utf08_literal_0 = unnamed_addr constant [2 x i8] c"a\00"
@utf08_literal_1 = unnamed_addr constant [2 x i8] c"b\00"

define i8 @STRING_EQUAL(%STRING_EQUAL_interface* %0) {
entry:
  %op1 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %0, i32 0, i32 0
  %op2 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %0, i32 0, i32 1
  %STRING_EQUAL = alloca i8, align 1
  store i8 0, i8* %STRING_EQUAL, align 1
  %STRING_EQUAL_ret = load i8, i8* %STRING_EQUAL, align 1
  ret i8 %STRING_EQUAL_ret
}

define i16 @baz(%baz_interface* %0) {
entry:
  %a = getelementptr inbounds %baz_interface, %baz_interface* %0, i32 0, i32 0
  %b = getelementptr inbounds %baz_interface, %baz_interface* %0, i32 0, i32 1
  %result = getelementptr inbounds %baz_interface, %baz_interface* %0, i32 0, i32 2
  %baz = alloca i16, align 2
  %1 = bitcast [81 x i8]* %a to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 mul nuw (i64 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64), i64 81), i1 false)
  %2 = bitcast [81 x i8]* %b to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 mul nuw (i64 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64), i64 81), i1 false)
  store i8 0, i8* %result, align 1
  store i16 0, i16* %baz, align 2
  %STRING_EQUAL_instance = alloca %STRING_EQUAL_interface, align 8
  %3 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %STRING_EQUAL_instance, i32 0, i32 0
  %4 = bitcast [1025 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %4, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @utf08_literal_0, i32 0, i32 0), i32 2, i1 false)
  %5 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %STRING_EQUAL_instance, i32 0, i32 1
  %6 = bitcast [1025 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @utf08_literal_1, i32 0, i32 0), i32 2, i1 false)
  %call = call i8 @STRING_EQUAL(%STRING_EQUAL_interface* %STRING_EQUAL_instance)
  store i8 %call, i8* %result, align 1
  %STRING_EQUAL_instance1 = alloca %STRING_EQUAL_interface, align 8
  %7 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %STRING_EQUAL_instance1, i32 0, i32 0
  %8 = bitcast [1025 x i8]* %7 to i8*
  %9 = bitcast [81 x i8]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %8, i8* align 1 %9, i32 81, i1 false)
  %10 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %STRING_EQUAL_instance1, i32 0, i32 1
  %11 = bitcast [1025 x i8]* %10 to i8*
  %12 = bitcast [81 x i8]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %11, i8* align 1 %12, i32 81, i1 false)
  %call2 = call i8 @STRING_EQUAL(%STRING_EQUAL_interface* %STRING_EQUAL_instance1)
  store i8 %call2, i8* %result, align 1
  %baz_ret = load i16, i16* %baz, align 2
  ret i16 %baz_ret
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #1

attributes #0 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }

