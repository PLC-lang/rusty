---
source: src/codegen/tests/constants_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { [81 x i8] }

@const_str = unnamed_addr constant [81 x i8] c"global constant string\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", section "$RUSTY$var-const_str:s8u81"
@main_instance = global %main zeroinitializer, section "$RUSTY$var-main_instance:r1s8u81"

define void @main(%main* %0) {
entry:
  %str = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %1 = bitcast [81 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([81 x i8], [81 x i8]* @const_str, i32 0, i32 0), i32 80, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type { [81 x i8] }

@main_instance = external global %main, section "$RUSTY$var-main_instance:r1s8u81"

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { [81 x i8] }

@main_instance = external global %main, section "$RUSTY$var-main_instance:r1s8u81"

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)
