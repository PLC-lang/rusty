---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%MyStruct = type { i32, i16 }
%__global_y = type { i8, i8 }

@x = global %MyStruct zeroinitializer
@__MyStruct__init = unnamed_addr constant %MyStruct zeroinitializer
@y = global %__global_y zeroinitializer
@____global_y__init = unnamed_addr constant %__global_y zeroinitializer
; ModuleID = '__initializers'
source_filename = "__initializers"

%MyStruct = type { i32, i16 }
%__global_y = type { i8, i8 }

@__MyStruct__init = external global %MyStruct
@____global_y__init = external global %__global_y

define void @__init_mystruct(%MyStruct* %0) {
entry:
  %self = alloca %MyStruct*, align 8
  store %MyStruct* %0, %MyStruct** %self, align 8
  ret void
}

define void @__init___global_y(%__global_y* %0) {
entry:
  %self = alloca %__global_y*, align 8
  store %__global_y* %0, %__global_y** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%MyStruct = type { i32, i16 }
%__global_y = type { i8, i8 }

@__MyStruct__init = external global %MyStruct
@x = external global %MyStruct
@____global_y__init = external global %__global_y
@y = external global %__global_y
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_mystruct(%MyStruct* @x)
  call void @__init___global_y(%__global_y* @y)
  ret void
}

declare void @__init_mystruct(%MyStruct*)

declare void @__init___global_y(%__global_y*)
