---
source: src/codegen/tests/string_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%prg = type { [16 x i8], [4 x i8], [16 x i16], [4 x i16] }

@prg_instance = global %prg { [16 x i8] zeroinitializer, [4 x i8] c"xyz\00", [16 x i16] zeroinitializer, [4 x i16] [i16 120, i16 121, i16 122, i16 0] }, section "var-prg_instance:v"
@__prg.z__init = unnamed_addr constant [4 x i8] c"xyz\00"
@__prg.wz__init = unnamed_addr constant [4 x i16] [i16 120, i16 121, i16 122, i16 0]
@utf08_literal_0 = private unnamed_addr constant [12 x i8] c"im a genius\00"
@utf16_literal_0 = private unnamed_addr constant [12 x i16] [i16 105, i16 109, i16 32, i16 97, i16 32, i16 103, i16 101, i16 110, i16 105, i16 117, i16 115, i16 0]

define void @prg(%prg* %0) section "fn-prg:v" {
entry:
  %y = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %z = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %wy = getelementptr inbounds %prg, %prg* %0, i32 0, i32 2
  %wz = getelementptr inbounds %prg, %prg* %0, i32 0, i32 3
  %1 = bitcast [16 x i8]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @utf08_literal_0, i32 0, i32 0), i32 12, i1 false)
  %2 = bitcast [16 x i16]* %wy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 2 %2, i8* align 2 bitcast ([12 x i16]* @utf16_literal_0 to i8*), i32 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }
