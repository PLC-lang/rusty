---
source: src/codegen/tests/typesystem_test.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%main = type {}

@main_instance = global %main zeroinitializer
@__main.s__init = unnamed_addr constant [81 x i8] c"\0A numbers: %f %f %f %d \0A \0A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"

declare i32 @printf([81 x i8]*, ...)

define void @main(%main* %0) {
entry:
  %s = alloca [81 x i8], align 1
  %float = alloca float, align 4
  %double = alloca double, align 8
  %integer = alloca i16, align 2
  %1 = bitcast [81 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 getelementptr inbounds ([81 x i8], [81 x i8]* @__main.s__init, i32 0, i32 0), i64 ptrtoint ([81 x i8]* getelementptr ([81 x i8], [81 x i8]* null, i32 1) to i64), i1 false)
  store float 3.000000e+00, float* %float, align 4
  store double 3.000000e+00, double* %double, align 8
  store i16 3, i16* %integer, align 2
  %load_float = load float, float* %float, align 4
  %2 = fpext float %load_float to double
  %load_double = load double, double* %double, align 8
  %load_integer = load i16, i16* %integer, align 2
  %3 = sext i16 %load_integer to i32
  %call = call i32 ([81 x i8]*, ...) @printf([81 x i8]* %s, double 3.000000e+00, double %2, double %load_double, i32 %3)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }

