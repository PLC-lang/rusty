---
source: src/codegen/tests/code_gen_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%aaa = type { i16, i16, [5 x i8], [3 x i8] }

@a = unnamed_addr constant i16 0
@b = unnamed_addr constant i16 2
@c = unnamed_addr constant i16 5
@aaa_instance = global %aaa { i16 3, i16 7, [5 x i8] zeroinitializer, [3 x i8] zeroinitializer }

define void @aaa(%aaa* %0) {
entry:
  %a = getelementptr inbounds %aaa, %aaa* %0, i32 0, i32 0
  %b = getelementptr inbounds %aaa, %aaa* %0, i32 0, i32 1
  %arr = getelementptr inbounds %aaa, %aaa* %0, i32 0, i32 2
  %arr2 = getelementptr inbounds %aaa, %aaa* %0, i32 0, i32 3
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%aaa = type { i16, i16, [5 x i8], [3 x i8] }

@aaa_instance = external global %aaa

define void @__init_aaa(%aaa* %0) {
entry:
  %self = alloca %aaa*, align 8
  store %aaa* %0, %aaa** %self, align 8
  ret void
}

declare void @aaa(%aaa*)

define void @__user_init_aaa(%aaa* %0) {
entry:
  %self = alloca %aaa*, align 8
  store %aaa* %0, %aaa** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%aaa = type { i16, i16, [5 x i8], [3 x i8] }

@aaa_instance = external global %aaa
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_aaa(%aaa* @aaa_instance)
  call void @__user_init_aaa(%aaa* @aaa_instance)
  ret void
}

declare void @__init_aaa(%aaa*)

declare void @aaa(%aaa*)

declare void @__user_init_aaa(%aaa*)
