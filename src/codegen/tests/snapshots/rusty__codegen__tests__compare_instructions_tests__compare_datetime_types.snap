---
source: src/codegen/tests/compare_instructions_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { i64, i64, i64, i64 }

@main_instance = global %main zeroinitializer

define void @main(%main* %0) {
entry:
  %var_time = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %var_time_of_day = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  %var_date = getelementptr inbounds %main, %main* %0, i32 0, i32 2
  %var_date_and_time = getelementptr inbounds %main, %main* %0, i32 0, i32 3
  %load_var_time = load i64, i64* %var_time, align 4
  %load_var_time_of_day = load i64, i64* %var_time_of_day, align 4
  %tmpVar = icmp sgt i64 %load_var_time, %load_var_time_of_day
  br i1 %tmpVar, label %1, label %2

1:                                                ; preds = %entry
  %load_var_time_of_day1 = load i64, i64* %var_time_of_day, align 4
  %load_var_date = load i64, i64* %var_date, align 4
  %tmpVar2 = icmp sgt i64 %load_var_time_of_day1, %load_var_date
  br label %2

2:                                                ; preds = %1, %entry
  %3 = phi i1 [ %tmpVar, %entry ], [ %tmpVar2, %1 ]
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  %load_var_date3 = load i64, i64* %var_date, align 4
  %load_var_date_and_time = load i64, i64* %var_date_and_time, align 4
  %tmpVar4 = icmp sgt i64 %load_var_date3, %load_var_date_and_time
  br label %5

5:                                                ; preds = %4, %2
  %6 = phi i1 [ %3, %2 ], [ %tmpVar4, %4 ]
  %7 = zext i1 %6 to i8
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type { i64, i64, i64, i64 }

@main_instance = external global %main

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)

define void @__user_init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { i64, i64, i64, i64 }

@main_instance = external global %main
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  call void @__user_init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)

declare void @__user_init_main(%main*)
