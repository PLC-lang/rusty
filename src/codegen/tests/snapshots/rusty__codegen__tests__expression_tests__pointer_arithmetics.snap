---
source: src/codegen/tests/expression_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { i16, i16, i16* }

@main_instance = global %main { i16 10, i16 20, i16* null }

define void @main(%main* %0) {
entry:
  %x = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %y = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  %pt = getelementptr inbounds %main, %main* %0, i32 0, i32 2
  store i16* %x, i16** %pt, align 8
  %load_pt = load i16*, i16** %pt, align 8
  %access___main_pt = getelementptr inbounds i16, i16* %load_pt, i32 1
  store i16* %access___main_pt, i16** %pt, align 8
  %load_pt1 = load i16*, i16** %pt, align 8
  %access___main_pt2 = getelementptr inbounds i16, i16* %load_pt1, i32 1
  %access___main_pt3 = getelementptr inbounds i16, i16* %access___main_pt2, i32 1
  store i16* %access___main_pt3, i16** %pt, align 8
  %load_pt4 = load i16*, i16** %pt, align 8
  %access___main_pt5 = getelementptr inbounds i16, i16* %load_pt4, i32 1
  store i16* %access___main_pt5, i16** %pt, align 8
  %load_pt6 = load i16*, i16** %pt, align 8
  %load_y = load i16, i16* %y, align 2
  %1 = sub i16 0, %load_y
  %access___main_pt7 = getelementptr inbounds i16, i16* %load_pt6, i16 %1
  store i16* %access___main_pt7, i16** %pt, align 8
  %load_pt8 = load i16*, i16** %pt, align 8
  %access___main_pt9 = getelementptr inbounds i16, i16* %load_pt8, i32 1
  %access___main_pt10 = getelementptr inbounds i16, i16* %access___main_pt9, i32 1
  store i16* %access___main_pt10, i16** %pt, align 8
  %load_pt11 = load i16*, i16** %pt, align 8
  %load_y12 = load i16, i16* %y, align 2
  %2 = sub i16 0, %load_y12
  %access___main_pt13 = getelementptr inbounds i16, i16* %load_pt11, i16 %2
  %access___main_pt14 = getelementptr inbounds i16, i16* %access___main_pt13, i32 -1
  store i16* %access___main_pt14, i16** %pt, align 8
  %load_pt15 = load i16*, i16** %pt, align 8
  %access___main_pt16 = getelementptr inbounds i16, i16* %load_pt15, i32 2
  store i16* %access___main_pt16, i16** %pt, align 8
  %load_y17 = load i16, i16* %y, align 2
  %load_pt18 = load i16*, i16** %pt, align 8
  %access___main_pt19 = getelementptr inbounds i16, i16* %load_pt18, i16 %load_y17
  %load_y20 = load i16, i16* %y, align 2
  %3 = sub i16 0, %load_y20
  %access___main_pt21 = getelementptr inbounds i16, i16* %access___main_pt19, i16 %3
  store i16* %access___main_pt21, i16** %pt, align 8
  %load_y22 = load i16, i16* %y, align 2
  %4 = sext i16 %load_y22 to i32
  %load_y23 = load i16, i16* %y, align 2
  %5 = sext i16 %load_y23 to i32
  %tmpVar = add i32 %4, %5
  %load_pt24 = load i16*, i16** %pt, align 8
  %access___main_pt25 = getelementptr inbounds i16, i16* %load_pt24, i32 %tmpVar
  store i16* %access___main_pt25, i16** %pt, align 8
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type { i16, i16, i16* }

@main_instance = external global %main

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { i16, i16, i16* }

@main_instance = external global %main
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)
