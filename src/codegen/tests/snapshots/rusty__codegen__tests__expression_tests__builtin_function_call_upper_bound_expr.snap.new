---
source: src/codegen/tests/expression_tests.rs
assertion_line: 461
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%main = type { [16 x i32], i32 }
%__foo_vla = type { i32*, [2 x i32] }

@MY_CONST = unnamed_addr constant i32 10
@main_instance = global %main zeroinitializer
@____foo_vla__init = unnamed_addr constant %__foo_vla zeroinitializer

define void @main(%main* %0) {
entry:
  %a = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %b = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  %auto_deref = load [16 x i32], [16 x i32]* %a, align 4
  %outer_arr_gep = getelementptr inbounds [16 x i32], [16 x i32]* %a, i32 0, i32 0
  %vla_struct = alloca %__foo_vla, align 8
  %vla_array_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 0
  %vla_dimensions_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 1
  store [8 x i32] [i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4], [2 x i32]* %vla_dimensions_gep, align 4
  store i32* %outer_arr_gep, i32** %vla_array_gep, align 8
  %1 = load %__foo_vla, %__foo_vla* %vla_struct, align 8
  %vla_struct_ptr = alloca %__foo_vla, align 8
  store %__foo_vla %1, %__foo_vla* %vla_struct_ptr, align 8
  %call = call i32 @foo(%__foo_vla* %vla_struct_ptr)
  store i32 %call, i32* %b, align 4
  ret void
}

define i32 @foo(%__foo_vla* %0) {
entry:
  %foo = alloca i32, align 4
  %vla = alloca %__foo_vla*, align 8
  store %__foo_vla* %0, %__foo_vla** %vla, align 8
  store i32 0, i32* %foo, align 4
  %deref = load %__foo_vla*, %__foo_vla** %vla, align 8
  %dim = getelementptr inbounds %__foo_vla, %__foo_vla* %deref, i32 0, i32 1
  %load_MY_CONST = load i32, i32* @MY_CONST, align 4
  %tmpVar = sub i32 %load_MY_CONST, 6
  %1 = sub i32 %tmpVar, 1
  %2 = mul i32 2, %1
  %3 = add i32 %2, 1
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %dim, i32 0, i32 %3
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %foo, align 4
  %foo_ret = load i32, i32* %foo, align 4
  ret i32 %foo_ret
}

