---
source: src/codegen/tests/generics_test.rs
expression: prg
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i16, i16 }

@prg_instance = global %prg zeroinitializer

define i32 @MAX__DINT(i32 %0, i32 %1) {
entry:
  %MAX__DINT = alloca i32, align 4
  %in1 = alloca i32, align 4
  store i32 %0, i32* %in1, align 4
  %in2 = alloca i32, align 4
  store i32 %1, i32* %in2, align 4
  store i32 0, i32* %MAX__DINT, align 4
  %MAX__DINT_ret = load i32, i32* %MAX__DINT, align 4
  ret i32 %MAX__DINT_ret
}

define void @prg(%prg* %0) {
entry:
  %a = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %b = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %call = call i32 @MAX__DINT(i32 1, i32 2)
  %load_a = load i16, i16* %a, align 2
  %load_b = load i16, i16* %b, align 2
  %call1 = call i16 @MAX__INT(i16 %load_a, i16 %load_b)
  ret void
}

declare i16 @MAX__INT(i16, i16)
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i16, i16 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i16, i16 }

@prg_instance = external global %prg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
