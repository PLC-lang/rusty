---
source: src/codegen/tests/string_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prog = type { [81 x i8], [81 x i16] }
%main = type { [7 x i8], [8 x i16] }

@prog_instance = global %prog zeroinitializer, section "$RUSTY$var-prog_instance:r2s8u81s16u81"
@main_instance = global %main zeroinitializer, section "$RUSTY$var-main_instance:r2s8u7s16u8"
@utf08_literal_0 = private unnamed_addr constant [7 x i8] c"string\00"
@utf16_literal_0 = private unnamed_addr constant [8 x i16] [i16 119, i16 115, i16 116, i16 114, i16 105, i16 110, i16 103, i16 0]

define void @prog(%prog* %0) {
entry:
  %output1 = getelementptr inbounds %prog, %prog* %0, i32 0, i32 0
  %output2 = getelementptr inbounds %prog, %prog* %0, i32 0, i32 1
  %1 = bitcast [81 x i8]* %output1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @utf08_literal_0, i32 0, i32 0), i32 7, i1 false)
  %2 = bitcast [81 x i16]* %output2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 2 %2, i8* align 2 bitcast ([8 x i16]* @utf16_literal_0 to i8*), i32 16, i1 false)
  ret void
}

define void @main(%main* %0) {
entry:
  %x = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %y = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  call void @prog(%prog* @prog_instance)
  %1 = bitcast [7 x i8]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds (%prog, %prog* @prog_instance, i32 0, i32 0, i32 0), i32 6, i1 false)
  %2 = bitcast [8 x i16]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 2 %2, i8* align 2 bitcast ([81 x i16]* getelementptr inbounds (%prog, %prog* @prog_instance, i32 0, i32 1) to i8*), i32 14, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }
; ModuleID = '__initializers'
source_filename = "__initializers"

%prog = type { [81 x i8], [81 x i16] }
%main = type { [7 x i8], [8 x i16] }

@prog_instance = external global %prog, section "$RUSTY$var-prog_instance:r2s8u81s16u81"
@main_instance = external global %main, section "$RUSTY$var-main_instance:r2s8u7s16u8"

define void @__init_prog(%prog* %0) {
entry:
  %self = alloca %prog*, align 8
  store %prog* %0, %prog** %self, align 8
  ret void
}

declare void @prog(%prog*)

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prog = type { [81 x i8], [81 x i16] }
%main = type { [7 x i8], [8 x i16] }

@prog_instance = external global %prog, section "$RUSTY$var-prog_instance:r2s8u81s16u81"
@main_instance = external global %main, section "$RUSTY$var-main_instance:r2s8u7s16u8"

define void @__init___testproject() {
entry:
  call void @__init_prog(%prog* @prog_instance)
  call void @__init_main(%main* @main_instance)
  ret void
}

declare void @__init_prog(%prog*)

declare void @prog(%prog*)

declare void @__init_main(%main*)

declare void @main(%main*)
