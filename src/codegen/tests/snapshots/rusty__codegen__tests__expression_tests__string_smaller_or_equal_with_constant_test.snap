---
source: src/codegen/tests/expression_tests.rs
expression: result

---
; ModuleID = 'main'
source_filename = "main"

%STRING_LESS_interface = type { [1025 x i8], [1025 x i8] }
%STRING_EQUAL_interface = type { [1025 x i8], [1025 x i8] }
%baz_interface = type { [81 x i8], [81 x i8], i1 }

define i1 @STRING_LESS(%STRING_LESS_interface* %0) {
entry:
  %op1 = getelementptr inbounds %STRING_LESS_interface, %STRING_LESS_interface* %0, i32 0, i32 0
  %op2 = getelementptr inbounds %STRING_LESS_interface, %STRING_LESS_interface* %0, i32 0, i32 1
  %STRING_LESS = alloca i1, align 1
  %STRING_LESS_ret = load i1, i1* %STRING_LESS, align 1
  ret i1 %STRING_LESS_ret
}

define i1 @STRING_EQUAL(%STRING_EQUAL_interface* %0) {
entry:
  %op1 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %0, i32 0, i32 0
  %op2 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %0, i32 0, i32 1
  %STRING_EQUAL = alloca i1, align 1
  %STRING_EQUAL_ret = load i1, i1* %STRING_EQUAL, align 1
  ret i1 %STRING_EQUAL_ret
}

define i16 @baz(%baz_interface* %0) {
entry:
  %a = getelementptr inbounds %baz_interface, %baz_interface* %0, i32 0, i32 0
  %b = getelementptr inbounds %baz_interface, %baz_interface* %0, i32 0, i32 1
  %result = getelementptr inbounds %baz_interface, %baz_interface* %0, i32 0, i32 2
  %baz = alloca i16, align 2
  store [81 x i8] zeroinitializer, [81 x i8]* %a, align 1
  store [81 x i8] zeroinitializer, [81 x i8]* %b, align 1
  store i1 false, i1* %result, align 1
  %STRING_EQUAL_instance = alloca %STRING_EQUAL_interface, align 8
  br label %input

1:                                                ; preds = %continue
  %STRING_LESS_instance = alloca %STRING_LESS_interface, align 8
  br label %input2

2:                                                ; preds = %continue5, %continue
  %3 = phi i1 [ %call1, %continue ], [ %call7, %continue5 ]
  store i1 %3, i1* %result, align 1
  %baz_ret = load i16, i16* %baz, align 2
  ret i16 %baz_ret

input:                                            ; preds = %entry
  %4 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %STRING_EQUAL_instance, i32 0, i32 0
  %load_a = load [81 x i8], [81 x i8]* %a, align 1
  store [81 x i8] %load_a, [1025 x i8]* %4, align 1
  %5 = getelementptr inbounds %STRING_EQUAL_interface, %STRING_EQUAL_interface* %STRING_EQUAL_instance, i32 0, i32 1
  store [2 x i8] c"b\00", [1025 x i8]* %5, align 1
  br label %call

call:                                             ; preds = %input
  %call1 = call i1 @STRING_EQUAL(%STRING_EQUAL_interface* %STRING_EQUAL_instance)
  br label %output

output:                                           ; preds = %call
  br label %continue

continue:                                         ; preds = %output
  %6 = icmp ne i1 %call1, false
  br i1 %6, label %2, label %1

input2:                                           ; preds = %1
  %7 = getelementptr inbounds %STRING_LESS_interface, %STRING_LESS_interface* %STRING_LESS_instance, i32 0, i32 0
  %load_a6 = load [81 x i8], [81 x i8]* %a, align 1
  store [81 x i8] %load_a6, [1025 x i8]* %7, align 1
  %8 = getelementptr inbounds %STRING_LESS_interface, %STRING_LESS_interface* %STRING_LESS_instance, i32 0, i32 1
  store [2 x i8] c"b\00", [1025 x i8]* %8, align 1
  br label %call3

call3:                                            ; preds = %input2
  %call7 = call i1 @STRING_LESS(%STRING_LESS_interface* %STRING_LESS_instance)
  br label %output4

output4:                                          ; preds = %call3
  br label %continue5

continue5:                                        ; preds = %output4
  br label %2
}

