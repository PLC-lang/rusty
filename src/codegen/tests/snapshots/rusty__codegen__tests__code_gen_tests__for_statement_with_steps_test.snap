---
source: src/codegen/tests/code_gen_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i32 }

@prg_instance = global %prg zeroinitializer

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  store i32 3, i32* %x, align 4
  br i1 true, label %predicate_sle, label %predicate_sge

predicate_sle:                                    ; preds = %increment, %entry
  %1 = load i32, i32* %x, align 4
  %condition = icmp sle i32 %1, 10
  br i1 %condition, label %loop, label %continue

predicate_sge:                                    ; preds = %increment, %entry
  %2 = load i32, i32* %x, align 4
  %condition1 = icmp sge i32 %2, 10
  br i1 %condition1, label %loop, label %continue

loop:                                             ; preds = %predicate_sge, %predicate_sle
  %load_x = load i32, i32* %x, align 4
  br label %increment

increment:                                        ; preds = %loop
  %3 = load i32, i32* %x, align 4
  %next = add i32 7, %3
  store i32 %next, i32* %x, align 4
  br i1 true, label %predicate_sle, label %predicate_sge

continue:                                         ; preds = %predicate_sge, %predicate_sle
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i32 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)

define void @__user_init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i32 }

@prg_instance = external global %prg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  call void @__user_init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)

declare void @__user_init_prg(%prg*)
