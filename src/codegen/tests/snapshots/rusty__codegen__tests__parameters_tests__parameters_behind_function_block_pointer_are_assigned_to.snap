---
source: src/codegen/tests/parameters_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { %file_t, %file_t* }
%file_t = type { i8, i8 }

@main_instance = global %main zeroinitializer
@__file_t__init = unnamed_addr constant %file_t zeroinitializer

define void @main(%main* %0) {
entry:
  %file = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %FileOpen = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  store %file_t* %file, %file_t** %FileOpen, align 8
  %deref = load %file_t*, %file_t** %FileOpen, align 8
  %1 = getelementptr inbounds %file_t, %file_t* %deref, i32 0, i32 1
  store i8 1, i8* %1, align 1
  call void @file_t(%file_t* %deref)
  ret void
}

define void @file_t(%file_t* %0) {
entry:
  %var1 = getelementptr inbounds %file_t, %file_t* %0, i32 0, i32 0
  %var2 = getelementptr inbounds %file_t, %file_t* %0, i32 0, i32 1
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type { %file_t, %file_t* }
%file_t = type { i8, i8 }

@main_instance = external global %main
@__file_t__init = external global %file_t

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  %deref = load %main*, %main** %self, align 8
  %file = getelementptr inbounds %main, %main* %deref, i32 0, i32 0
  call void @__init_file_t(%file_t* %file)
  ret void
}

declare void @main(%main*)

declare void @file_t(%file_t*)

define void @__init_file_t(%file_t* %0) {
entry:
  %self = alloca %file_t*, align 8
  store %file_t* %0, %file_t** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { %file_t, %file_t* }
%file_t = type { i8, i8 }

@main_instance = external global %main
@__file_t__init = external global %file_t
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)

declare void @file_t(%file_t*)
