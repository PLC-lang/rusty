---
source: src/codegen/tests/expression_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%baz = type { [11 x i8], i8*, [10 x i8]* }

@baz_instance = global %baz zeroinitializer, section "var-$RUSTY$baz_instance:r3s8u11pu8pau8"

define void @baz(%baz* %0) section "fn-$RUSTY$baz:v" {
entry:
  %str = getelementptr inbounds %baz, %baz* %0, i32 0, i32 0
  %ptr = getelementptr inbounds %baz, %baz* %0, i32 0, i32 1
  %bytes = getelementptr inbounds %baz, %baz* %0, i32 0, i32 2
  %1 = bitcast [11 x i8]* %str to i8*
  store i8* %1, i8** %ptr, align 8
  %2 = bitcast [11 x i8]* %str to [10 x i8]*
  store [10 x i8]* %2, [10 x i8]** %bytes, align 8
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%baz = type { [11 x i8], i8*, [10 x i8]* }

@baz_instance = external global %baz, section "var-$RUSTY$baz_instance:r3s8u11pu8pau8"

define void @__init_baz(%baz* %0) section "fn-$RUSTY$__init_baz:v[pr3s8u11pu8pau8]" {
entry:
  %self = alloca %baz*, align 8
  store %baz* %0, %baz** %self, align 8
  ret void
}

declare void @baz(%baz*) section "fn-$RUSTY$baz:v"
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%baz = type { [11 x i8], i8*, [10 x i8]* }

@baz_instance = external global %baz, section "var-$RUSTY$baz_instance:r3s8u11pu8pau8"

define void @__init___testproject() section "fn-$RUSTY$__init___testproject:v" {
entry:
  call void @__init_baz(%baz* @baz_instance)
  ret void
}

declare void @__init_baz(%baz*) section "fn-$RUSTY$__init_baz:v[pr3s8u11pu8pau8]"

declare void @baz(%baz*) section "fn-$RUSTY$baz:v"
