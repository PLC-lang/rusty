---
source: src/codegen/tests/string_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@__FSTRING_TO_DT.ignore__init = unnamed_addr constant [2 x i8] c"*\00"
@__FSTRING_TO_DT.fchar__init = unnamed_addr constant [2 x i8] c"#\00"
@utf08_literal_0 = unnamed_addr constant [2 x i8] c"#\00"
@utf08_literal_1 = unnamed_addr constant [2 x i8] c"*\00"

define i64 @FSTRING_TO_DT() {
entry:
  %FSTRING_TO_DT = alloca i64, align 8
  %ignore = alloca [2 x i8], align 1
  %fchar = alloca [2 x i8], align 1
  %0 = bitcast [2 x i8]* %ignore to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__FSTRING_TO_DT.ignore__init, i32 0, i32 0), i64 ptrtoint ([2 x i8]* getelementptr ([2 x i8], [2 x i8]* null, i32 1) to i64), i1 false)
  %1 = bitcast [2 x i8]* %fchar to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__FSTRING_TO_DT.fchar__init, i32 0, i32 0), i64 ptrtoint ([2 x i8]* getelementptr ([2 x i8], [2 x i8]* null, i32 1) to i64), i1 false)
  store i64 0, i64* %FSTRING_TO_DT, align 4
  %2 = bitcast [2 x i8]* %fchar to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @utf08_literal_0, i32 0, i32 0), i32 1, i1 false)
  %3 = bitcast [2 x i8]* %ignore to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @utf08_literal_1, i32 0, i32 0), i32 1, i1 false)
  %FSTRING_TO_DT_ret = load i64, i64* %FSTRING_TO_DT, align 4
  ret i64 %FSTRING_TO_DT_ret
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }

