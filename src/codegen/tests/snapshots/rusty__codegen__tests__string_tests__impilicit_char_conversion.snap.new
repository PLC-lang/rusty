---
source: src/codegen/tests/string_tests.rs
assertion_line: 442
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%main = type { [81 x i8], [81 x i16], i8, i16, i8 }

@main_instance = global %main { [81 x i8] zeroinitializer, [81 x i16] zeroinitializer, i8 97, i16 98, i8 0 }
@utf08_literal_0 = unnamed_addr constant [2 x i8] c"c\00"
@utf16_literal_0 = unnamed_addr constant [2 x i16] [i16 100, i16 0]

define void @main(%main* %0) {
entry:
  %s = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %ws = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  %c = getelementptr inbounds %main, %main* %0, i32 0, i32 2
  %wc = getelementptr inbounds %main, %main* %0, i32 0, i32 3
  %i = getelementptr inbounds %main, %main* %0, i32 0, i32 4
  %load_c = load i8, i8* %c, align 1
  store i8 %load_c, [81 x i8]* %s, align 1
  %1 = bitcast [81 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @utf08_literal_0, i32 0, i32 0), i32 2, i1 false)
  %load_wc = load i16, i16* %wc, align 2
  store i16 %load_wc, [81 x i16]* %ws, align 2
  %2 = bitcast [81 x i16]* %ws to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 2 %2, i8* align 2 bitcast ([2 x i16]* @utf16_literal_0 to i8*), i32 4, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }

