---
source: src/codegen/tests/generics_test.rs
expression: codegen(src)
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i16, i16, i64 }

@prg_instance = global %prg zeroinitializer

define i16 @foo__INT(i64 %0, i16* %1) {
entry:
  %foo__INT = alloca i16, align 2
  %in1 = alloca i64, align 8
  store i64 %0, i64* %in1, align 4
  %out1 = alloca i16*, align 8
  store i16* %1, i16** %out1, align 8
  store i16 0, i16* %foo__INT, align 2
  %foo__INT_ret = load i16, i16* %foo__INT, align 2
  ret i16 %foo__INT_ret
}

define void @prg(%prg* %0) {
entry:
  %theInt = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %iResult = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %data = getelementptr inbounds %prg, %prg* %0, i32 0, i32 2
  %load_data = load i64, i64* %data, align 4
  %call = call i16 @foo__INT(i64 %load_data, i16* %theInt)
  store i16 %call, i16* %iResult, align 2
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i16, i16, i64 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i16, i16, i64 }

@prg_instance = external global %prg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
