---
source: src/codegen/tests/string_tests.rs
assertion_line: 165
expression: program

---
; ModuleID = 'main'
source_filename = "main"

%main_interface = type { [81 x i8], [81 x i8], [81 x i8] }
%read_string_interface = type { [81 x i8] }

@main_instance = global %main_interface zeroinitializer
@utf08_literal_0 = unnamed_addr constant [154 x i8] c"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\00"
@utf08_literal_1 = unnamed_addr constant [6 x i8] c"hello\00"

define [81 x i8] @read_string(%read_string_interface* %0) {
entry:
  %to_read = getelementptr inbounds %read_string_interface, %read_string_interface* %0, i32 0, i32 0
  %read_string = alloca [81 x i8], align 1
  %1 = bitcast [81 x i8]* %read_string to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 mul nuw (i64 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64), i64 81), i1 false)
  %2 = bitcast [81 x i8]* %read_string to i8*
  %3 = bitcast [81 x i8]* %to_read to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 %3, i32 80, i1 false)
  %read_string_ret = load [81 x i8], [81 x i8]* %read_string, align 1
  ret [81 x i8] %read_string_ret
}

define void @main(%main_interface* %0) {
entry:
  %text1 = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 0
  %text2 = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 1
  %text3 = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 2
  %read_string_instance = alloca %read_string_interface, align 8
  %1 = getelementptr inbounds %read_string_interface, %read_string_interface* %read_string_instance, i32 0, i32 0
  %2 = bitcast [81 x i8]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([154 x i8], [154 x i8]* @utf08_literal_0, i32 0, i32 0), i32 80, i1 false)
  %call = call [81 x i8] @read_string(%read_string_interface* %read_string_instance)
  %3 = alloca [81 x i8], align 1
  store [81 x i8] %call, [81 x i8]* %3, align 1
  %4 = bitcast [81 x i8]* %text1 to i8*
  %5 = bitcast [81 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %4, i8* align 1 %5, i32 80, i1 false)
  %read_string_instance1 = alloca %read_string_interface, align 8
  %6 = getelementptr inbounds %read_string_interface, %read_string_interface* %read_string_instance1, i32 0, i32 0
  %7 = bitcast [81 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %7, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @utf08_literal_1, i32 0, i32 0), i32 6, i1 false)
  %call2 = call [81 x i8] @read_string(%read_string_interface* %read_string_instance1)
  %8 = alloca [81 x i8], align 1
  store [81 x i8] %call2, [81 x i8]* %8, align 1
  %9 = bitcast [81 x i8]* %text3 to i8*
  %10 = bitcast [81 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %9, i8* align 1 %10, i32 80, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #1

attributes #0 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }

