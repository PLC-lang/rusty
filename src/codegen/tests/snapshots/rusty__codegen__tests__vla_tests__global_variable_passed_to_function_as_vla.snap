---
source: src/codegen/tests/vla_tests.rs
expression: res
---
; ModuleID = 'main'
source_filename = "main"

%__foo_vla = type { i16*, [2 x i32] }

@arr = global [2 x i16] zeroinitializer
@____foo_vla__init = unnamed_addr constant %__foo_vla zeroinitializer

define i16 @foo(%__foo_vla %0) {
entry:
  %foo = alloca i16, align 2
  %vla = alloca %__foo_vla, align 8
  store %__foo_vla %0, %__foo_vla* %vla, align 8
  store i16 0, i16* %foo, align 2
  %vla_arr_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla, i32 0, i32 0
  %vla_arr_ptr = load i16*, i16** %vla_arr_gep, align 8
  %dim_arr = getelementptr inbounds %__foo_vla, %__foo_vla* %vla, i32 0, i32 1
  %start_idx_ptr0 = getelementptr inbounds [2 x i32], [2 x i32]* %dim_arr, i32 0, i32 0
  %end_idx_ptr0 = getelementptr inbounds [2 x i32], [2 x i32]* %dim_arr, i32 0, i32 1
  %start_idx_value0 = load i32, i32* %start_idx_ptr0, align 4
  %end_idx_value0 = load i32, i32* %end_idx_ptr0, align 4
  %tmpVar = sub i32 0, %start_idx_value0
  %arr_val = getelementptr inbounds i16, i16* %vla_arr_ptr, i32 %tmpVar
  store i16 10, i16* %arr_val, align 2
  %foo_ret = load i16, i16* %foo, align 2
  ret i16 %foo_ret
}

define i32 @main() {
entry:
  %main = alloca i32, align 4
  store i32 0, i32* %main, align 4
  %load_arr = load [2 x i16], [2 x i16]* @arr, align 2
  %vla_struct = alloca %__foo_vla, align 8
  %vla_array_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 0
  %vla_dimensions_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 1
  store [2 x i32] [i32 0, i32 1], [2 x i32]* %vla_dimensions_gep, align 4
  store i16* getelementptr inbounds ([2 x i16], [2 x i16]* @arr, i32 0, i32 0), i16** %vla_array_gep, align 8
  %0 = load %__foo_vla, %__foo_vla* %vla_struct, align 8
  %call = call i16 @foo(%__foo_vla %0)
  %main_ret = load i32, i32* %main, align 4
  ret i32 %main_ret
}

