---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%prg = type { i64 }

@prg_instance = global %prg zeroinitializer

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  store i64 3, i64* %x, align 4
  br label %condition_check

condition_check:                                  ; preds = %increment, %entry
  %load_x = load i64, i64* %x, align 4
  %load_x1 = load i64, i64* %x, align 4
  %tmpVar = icmp sle i64 %load_x1, 10
  br i1 %tmpVar, label %1, label %2

for_body:                                         ; preds = %5
  %load_x8 = load i64, i64* %x, align 4
  br label %increment

increment:                                        ; preds = %for_body
  %tmpVar9 = add i64 %load_x, 1
  store i64 %tmpVar9, i64* %x, align 4
  br label %condition_check

continue:                                         ; preds = %5
  ret void

1:                                                ; preds = %condition_check
  %load_x2 = load i64, i64* %x, align 4
  %tmpVar3 = icmp sge i64 %load_x2, 3
  br label %2

2:                                                ; preds = %1, %condition_check
  %3 = phi i1 [ %tmpVar, %condition_check ], [ %tmpVar3, %1 ]
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  %load_x4 = load i64, i64* %x, align 4
  %tmpVar5 = icmp sge i64 %load_x4, 10
  br i1 %tmpVar5, label %7, label %8

5:                                                ; preds = %8, %2
  %6 = phi i1 [ %3, %2 ], [ %9, %8 ]
  br i1 %6, label %for_body, label %continue

7:                                                ; preds = %4
  %load_x6 = load i64, i64* %x, align 4
  %tmpVar7 = icmp sle i64 %load_x6, 3
  br label %8

8:                                                ; preds = %7, %4
  %9 = phi i1 [ %tmpVar5, %4 ], [ %tmpVar7, %7 ]
  br label %5
}

