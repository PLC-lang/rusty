---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i8 }

@prg_instance = global %prg zeroinitializer, section "$RUSTY$var-prg_instance:r1u8"

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  br label %while_body

condition_check:                                  ; preds = %while_body
  %load_x = load i8, i8* %x, align 1
  %1 = icmp ne i8 %load_x, 0
  %tmpVar = xor i1 %1, true
  br i1 %tmpVar, label %while_body, label %continue

while_body:                                       ; preds = %entry, %condition_check
  %load_x1 = load i8, i8* %x, align 1
  br label %condition_check

continue:                                         ; preds = %condition_check
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i8 }

@prg_instance = external global %prg, section "$RUSTY$var-prg_instance:r1u8"

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i8 }

@prg_instance = external global %prg, section "$RUSTY$var-prg_instance:r1u8"

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
