---
source: src/codegen/tests/parameters_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { i32 }

@main_instance = global %main zeroinitializer

define void @foo(i32* %0, i32* %1) {
entry:
  %out1 = alloca i32*, align 8
  store i32* %0, i32** %out1, align 8
  %out2 = alloca i32*, align 8
  store i32* %1, i32** %out2, align 8
  ret void
}

define void @main(%main* %0) {
entry:
  %x = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %1 = alloca i32, align 4
  call void @foo(i32* %x, i32* %1)
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type { i32 }

@main_instance = external global %main

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)

define void @__user_init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { i32 }

@main_instance = external global %main
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  call void @__user_init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)

declare void @__user_init_main(%main*)
