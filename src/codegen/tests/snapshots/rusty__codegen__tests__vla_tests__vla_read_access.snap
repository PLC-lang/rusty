---
source: src/codegen/tests/vla_tests.rs
expression: res
---
; ModuleID = 'main'
source_filename = "main"

%__foo_vla = type { i16*, [2 x i32] }

@____foo_vla__init = unnamed_addr constant %__foo_vla zeroinitializer, section "var-____foo_vla__init:v"

define i16 @foo(%__foo_vla* %0) section "fn-foo:i16[v]" {
entry:
  %foo = alloca i16, align 2
  %vla = alloca %__foo_vla, align 8
  %1 = bitcast %__foo_vla* %vla to i8*
  %2 = bitcast %__foo_vla* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 ptrtoint (%__foo_vla* getelementptr (%__foo_vla, %__foo_vla* null, i32 1) to i64), i1 false)
  store i16 0, i16* %foo, align 2
  %vla_arr_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla, i32 0, i32 0
  %vla_arr_ptr = load i16*, i16** %vla_arr_gep, align 8
  %dim_arr = getelementptr inbounds %__foo_vla, %__foo_vla* %vla, i32 0, i32 1
  %start_idx_ptr0 = getelementptr inbounds [2 x i32], [2 x i32]* %dim_arr, i32 0, i32 0
  %end_idx_ptr0 = getelementptr inbounds [2 x i32], [2 x i32]* %dim_arr, i32 0, i32 1
  %start_idx_value0 = load i32, i32* %start_idx_ptr0, align 4
  %end_idx_value0 = load i32, i32* %end_idx_ptr0, align 4
  %tmpVar = sub i32 0, %start_idx_value0
  %arr_val = getelementptr inbounds i16, i16* %vla_arr_ptr, i32 %tmpVar
  %load_tmpVar = load i16, i16* %arr_val, align 2
  store i16 %load_tmpVar, i16* %foo, align 2
  %foo_ret = load i16, i16* %foo, align 2
  ret i16 %foo_ret
}

define i32 @main() section "fn-main:i32" {
entry:
  %main = alloca i32, align 4
  %arr = alloca [2 x i16], align 2
  %0 = bitcast [2 x i16]* %arr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 ptrtoint ([2 x i16]* getelementptr ([2 x i16], [2 x i16]* null, i32 1) to i64), i1 false)
  store i32 0, i32* %main, align 4
  %auto_deref = load [2 x i16], [2 x i16]* %arr, align 2
  %outer_arr_gep = getelementptr inbounds [2 x i16], [2 x i16]* %arr, i32 0, i32 0
  %vla_struct = alloca %__foo_vla, align 8
  %vla_array_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 0
  %vla_dimensions_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 1
  store [2 x i32] [i32 0, i32 1], [2 x i32]* %vla_dimensions_gep, align 4
  store i16* %outer_arr_gep, i16** %vla_array_gep, align 8
  %1 = load %__foo_vla, %__foo_vla* %vla_struct, align 8
  %vla_struct_ptr = alloca %__foo_vla, align 8
  store %__foo_vla %1, %__foo_vla* %vla_struct_ptr, align 8
  %call = call i16 @foo(%__foo_vla* %vla_struct_ptr)
  %main_ret = load i32, i32* %main, align 4
  ret i32 %main_ret
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn }
attributes #1 = { argmemonly nofree nounwind willreturn writeonly }
