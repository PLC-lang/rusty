---
source: src/codegen/tests/statement_codegen_test.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i8, i8, i16, i16 }

@prg_instance = global %prg zeroinitializer

define void @prg(%prg* %0) {
entry:
  %a = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %b = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 2
  %y = getelementptr inbounds %prg, %prg* %0, i32 0, i32 3
  %load_x = load i16, i16* %x, align 2
  %load_y = load i16, i16* %y, align 2
  %shift = ashr i16 %load_x, %load_y
  %1 = trunc i16 %shift to i8
  %2 = and i8 %1, 1
  store i8 %2, i8* %a, align 1
  %load_x1 = load i16, i16* %x, align 2
  %load_y2 = load i16, i16* %y, align 2
  %3 = mul i16 %load_y2, 8
  %shift3 = ashr i16 %load_x1, %3
  %4 = trunc i16 %shift3 to i8
  store i8 %4, i8* %b, align 1
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i8, i8, i16, i16 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i8, i8, i16, i16 }

@prg_instance = external global %prg

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
