---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i32, i32, i32, i32 }

@prg_instance = global %prg zeroinitializer, section "$RUSTY$var-prg_instance:r4i32i32i32i32"

define void @prg(%prg* %0) {
entry:
  %step = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %y = getelementptr inbounds %prg, %prg* %0, i32 0, i32 2
  %z = getelementptr inbounds %prg, %prg* %0, i32 0, i32 3
  %load_y = load i32, i32* %y, align 4
  store i32 %load_y, i32* %x, align 4
  %load_step = load i32, i32* %step, align 4
  %is_incrementing = icmp sgt i32 %load_step, 0
  br i1 %is_incrementing, label %predicate_sle, label %predicate_sge

predicate_sle:                                    ; preds = %increment, %entry
  %1 = load i32, i32* %z, align 4
  %2 = load i32, i32* %x, align 4
  %condition = icmp sle i32 %2, %1
  br i1 %condition, label %loop, label %continue

predicate_sge:                                    ; preds = %increment, %entry
  %3 = load i32, i32* %z, align 4
  %4 = load i32, i32* %x, align 4
  %condition1 = icmp sge i32 %4, %3
  br i1 %condition1, label %loop, label %continue

loop:                                             ; preds = %predicate_sge, %predicate_sle
  %load_x = load i32, i32* %x, align 4
  br label %increment

increment:                                        ; preds = %loop
  %5 = load i32, i32* %x, align 4
  %load_step2 = load i32, i32* %step, align 4
  %next = add i32 %load_step2, %5
  store i32 %next, i32* %x, align 4
  br i1 %is_incrementing, label %predicate_sle, label %predicate_sge

continue:                                         ; preds = %predicate_sge, %predicate_sle
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i32, i32, i32, i32 }

@prg_instance = external global %prg, section "$RUSTY$var-prg_instance:r4i32i32i32i32"

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i32, i32, i32, i32 }

@prg_instance = external global %prg, section "$RUSTY$var-prg_instance:r4i32i32i32i32"

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
