---
source: src/codegen/tests/parameters_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%prog = type { i32, i32, i32* }
%main = type { i32, i32, i32 }

@prog_instance = global %prog zeroinitializer, section "var-$RUSTY$prog_instance:r3i32i32pi32"
@main_instance = global %main zeroinitializer, section "var-$RUSTY$main_instance:r3i32i32i32"

define void @prog(%prog* %0) section "fn-$RUSTY$prog:v[i32][i32][pi32]" {
entry:
  %input1 = getelementptr inbounds %prog, %prog* %0, i32 0, i32 0
  %output1 = getelementptr inbounds %prog, %prog* %0, i32 0, i32 1
  %inout1 = getelementptr inbounds %prog, %prog* %0, i32 0, i32 2
  ret void
}

define void @main(%main* %0) section "fn-$RUSTY$main:v" {
entry:
  %var1 = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %var2 = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  %var3 = getelementptr inbounds %main, %main* %0, i32 0, i32 2
  %load_var1 = load i32, i32* %var1, align 4
  store i32 %load_var1, i32* getelementptr inbounds (%prog, %prog* @prog_instance, i32 0, i32 0), align 4
  %empty_varinout = alloca i32, align 4
  store i32* %empty_varinout, i32** getelementptr inbounds (%prog, %prog* @prog_instance, i32 0, i32 2), align 8
  call void @prog(%prog* @prog_instance)
  %1 = load i32, i32* getelementptr inbounds (%prog, %prog* @prog_instance, i32 0, i32 1), align 4
  store i32 %1, i32* %var2, align 4
  ret void
}

define void @__init_prog(%prog* %0) section "fn-$RUSTY$__init_prog:v[pr3i32i32pi32]" {
entry:
  %self = alloca %prog*, align 8
  store %prog* %0, %prog** %self, align 8
  ret void
}

define void @__init_main(%main* %0) section "fn-$RUSTY$__init_main:v[pr3i32i32i32]" {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

define void @__init() section "fn-$RUSTY$__init:v" {
entry:
  call void @__init_prog(%prog* @prog_instance)
  call void @__init_main(%main* @main_instance)
  ret void
}
