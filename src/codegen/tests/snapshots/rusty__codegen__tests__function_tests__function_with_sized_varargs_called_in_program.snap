---
source: src/codegen/tests/function_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i32 }

@prg_instance = global %prg zeroinitializer

declare i32 @foo(i32, i32*)

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %load_x = load i32, i32* %x, align 4
  %tmpVar = add i32 %load_x, 1
  %1 = alloca [3 x i32], align 4
  %2 = getelementptr inbounds [3 x i32], [3 x i32]* %1, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds [3 x i32], [3 x i32]* %1, i32 0, i32 1
  store i32 3, i32* %3, align 4
  %4 = getelementptr inbounds [3 x i32], [3 x i32]* %1, i32 0, i32 2
  store i32 %tmpVar, i32* %4, align 4
  %5 = bitcast [3 x i32]* %1 to i32*
  %call = call i32 @foo(i32 3, i32* %5)
  store i32 %call, i32* %x, align 4
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i32 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i32 }

@prg_instance = external global %prg

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
