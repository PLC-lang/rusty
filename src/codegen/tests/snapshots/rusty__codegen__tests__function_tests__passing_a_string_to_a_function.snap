---
source: src/codegen/tests/function_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%main = type { [6 x i8] }

@main_instance = global %main zeroinitializer, section "var-$RUSTY$main_instance:r1s8u6"
@utf08_literal_0 = private unnamed_addr constant [6 x i8] c"12345\00"

define i32 @func(i8* %0) section "fn-$RUSTY$func:i32[s8u6]" {
entry:
  %func = alloca i32, align 4
  %x = alloca [6 x i8], align 1
  %bitcast = bitcast [6 x i8]* %x to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %bitcast, i8 0, i64 6, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %bitcast, i8* align 1 %0, i64 5, i1 false)
  store i32 0, i32* %func, align 4
  %func_ret = load i32, i32* %func, align 4
  ret i32 %func_ret
}

define void @main(%main* %0) section "fn-$RUSTY$main:v" {
entry:
  %a = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %1 = bitcast [6 x i8]* %a to i8*
  %call = call i32 @func(i8* %1)
  %call1 = call i32 @func(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @utf08_literal_0, i32 0, i32 0))
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nounwind willreturn }
