---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type {}

@cT = unnamed_addr constant i64 1000000000
@cT_SHORT = unnamed_addr constant i64 1000000000
@cLT = unnamed_addr constant i64 1000000000000
@cLT_SHORT = unnamed_addr constant i64 1000000000000
@cD = unnamed_addr constant i64 0
@cD_SHORT = unnamed_addr constant i64 161308800000000000
@cLD = unnamed_addr constant i64 161308800000000000
@cLD_SHORT = unnamed_addr constant i64 161308800000000000
@cTOD = unnamed_addr constant i64 0
@cTOD_SHORT = unnamed_addr constant i64 0
@cLTOD = unnamed_addr constant i64 86399999999999
@cLTOD_SHORT = unnamed_addr constant i64 86399999999999
@cDT = unnamed_addr constant i64 172799000000000
@cDT_SHORT = unnamed_addr constant i64 172799000000000
@cLDT = unnamed_addr constant i64 172799123000000
@cLDT_SHORT = unnamed_addr constant i64 172799123000000
@main_instance = global %main zeroinitializer

define void @main(%main* %0) {
entry:
  %t1 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %lt1 = alloca i64, align 8
  %lt2 = alloca i64, align 8
  %d1 = alloca i64, align 8
  %d2 = alloca i64, align 8
  %ld1 = alloca i64, align 8
  %ld2 = alloca i64, align 8
  %tod1 = alloca i64, align 8
  %tod2 = alloca i64, align 8
  %ltod1 = alloca i64, align 8
  %ltod2 = alloca i64, align 8
  %dt1 = alloca i64, align 8
  %dt2 = alloca i64, align 8
  %ldt1 = alloca i64, align 8
  %ldt2 = alloca i64, align 8
  store i64 0, i64* %t1, align 4
  store i64 0, i64* %t2, align 4
  store i64 0, i64* %lt1, align 4
  store i64 0, i64* %lt2, align 4
  store i64 0, i64* %d1, align 4
  store i64 0, i64* %d2, align 4
  store i64 0, i64* %ld1, align 4
  store i64 0, i64* %ld2, align 4
  store i64 0, i64* %tod1, align 4
  store i64 0, i64* %tod2, align 4
  store i64 0, i64* %ltod1, align 4
  store i64 0, i64* %ltod2, align 4
  store i64 0, i64* %dt1, align 4
  store i64 0, i64* %dt2, align 4
  store i64 0, i64* %ldt1, align 4
  store i64 0, i64* %ldt2, align 4
  store i64 1000000000, i64* %t1, align 4
  store i64 1000000000, i64* %t2, align 4
  store i64 1000000000000, i64* %lt1, align 4
  store i64 1000000000000, i64* %lt2, align 4
  store i64 0, i64* %d1, align 4
  store i64 161308800000000000, i64* %d2, align 4
  store i64 161308800000000000, i64* %ld1, align 4
  store i64 161308800000000000, i64* %ld2, align 4
  store i64 0, i64* %tod1, align 4
  store i64 0, i64* %tod2, align 4
  store i64 86399999999999, i64* %ltod1, align 4
  store i64 86399999999999, i64* %ltod2, align 4
  store i64 172799000000000, i64* %dt1, align 4
  store i64 172799000000000, i64* %dt2, align 4
  store i64 172799123000000, i64* %ldt1, align 4
  store i64 172799123000000, i64* %ldt2, align 4
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type {}

@main_instance = external global %main

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type {}

@main_instance = external global %main
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)
