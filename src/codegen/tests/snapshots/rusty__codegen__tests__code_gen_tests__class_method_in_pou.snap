---
source: src/codegen/tests/code_gen_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%MyClass = type { i16, i16 }
%prg = type { %MyClass, i16 }

@__MyClass__init = unnamed_addr constant %MyClass zeroinitializer
@prg_instance = global %prg zeroinitializer

define void @MyClass(%MyClass* %0) {
entry:
  %x = getelementptr inbounds %MyClass, %MyClass* %0, i32 0, i32 0
  %y = getelementptr inbounds %MyClass, %MyClass* %0, i32 0, i32 1
  ret void
}

define void @MyClass.testMethod(%MyClass* %0, i16 %1) {
entry:
  %x = getelementptr inbounds %MyClass, %MyClass* %0, i32 0, i32 0
  %y = getelementptr inbounds %MyClass, %MyClass* %0, i32 0, i32 1
  %myMethodArg = alloca i16, align 2
  store i16 %1, i16* %myMethodArg, align 2
  %myMethodLocalVar = alloca i16, align 2
  store i16 0, i16* %myMethodLocalVar, align 2
  %load_myMethodArg = load i16, i16* %myMethodArg, align 2
  store i16 %load_myMethodArg, i16* %x, align 2
  %load_x = load i16, i16* %x, align 2
  store i16 %load_x, i16* %y, align 2
  %load_myMethodLocalVar = load i16, i16* %myMethodLocalVar, align 2
  %2 = sext i16 %load_myMethodLocalVar to i32
  %load_y = load i16, i16* %y, align 2
  %3 = sext i16 %load_y to i32
  %tmpVar = icmp eq i32 %2, %3
  ret void
}

define void @prg(%prg* %0) {
entry:
  %cl = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %x1 = getelementptr inbounds %MyClass, %MyClass* %cl, i32 0, i32 0
  %load_x = load i16, i16* %x1, align 2
  store i16 %load_x, i16* %x, align 2
  %load_x2 = load i16, i16* %x, align 2
  call void @MyClass.testMethod(%MyClass* %cl, i16 %load_x2)
  %load_x3 = load i16, i16* %x, align 2
  call void @MyClass.testMethod(%MyClass* %cl, i16 %load_x3)
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%MyClass = type { i16, i16 }
%prg = type { %MyClass, i16 }

@__MyClass__init = external global %MyClass
@prg_instance = external global %prg

define void @__init_myclass(%MyClass* %0) {
entry:
  %self = alloca %MyClass*, align 8
  store %MyClass* %0, %MyClass** %self, align 8
  ret void
}

declare void @MyClass(%MyClass*)

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  %deref = load %prg*, %prg** %self, align 8
  %cl = getelementptr inbounds %prg, %prg* %deref, i32 0, i32 0
  call void @__init_myclass(%MyClass* %cl)
  ret void
}

declare void @prg(%prg*)

define void @__user_init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { %MyClass, i16 }
%MyClass = type { i16, i16 }

@prg_instance = external global %prg
@__MyClass__init = external global %MyClass
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  call void @__user_init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)

declare void @MyClass(%MyClass*)

declare void @__user_init_prg(%prg*)
