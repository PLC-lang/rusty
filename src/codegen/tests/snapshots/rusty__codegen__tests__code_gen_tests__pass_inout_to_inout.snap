---
source: src/codegen/tests/code_gen_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%foo2 = type { i32*, i32 }
%foo = type { i32* }
%prg = type { i32 }

@foo2_instance = global %foo2 zeroinitializer
@foo_instance = global %foo zeroinitializer
@prg_instance = global %prg zeroinitializer

define void @foo2(%foo2* %0) {
entry:
  %inout = getelementptr inbounds %foo2, %foo2* %0, i32 0, i32 0
  %in = getelementptr inbounds %foo2, %foo2* %0, i32 0, i32 1
  ret void
}

define void @foo(%foo* %0) {
entry:
  %inout = getelementptr inbounds %foo, %foo* %0, i32 0, i32 0
  %deref = load i32*, i32** %inout, align 8
  store i32* %deref, i32** getelementptr inbounds (%foo2, %foo2* @foo2_instance, i32 0, i32 0), align 8
  %deref1 = load i32*, i32** %inout, align 8
  %load_inout = load i32, i32* %deref1, align 4
  store i32 %load_inout, i32* getelementptr inbounds (%foo2, %foo2* @foo2_instance, i32 0, i32 1), align 4
  call void @foo2(%foo2* @foo2_instance)
  ret void
}

define void @prg(%prg* %0) {
entry:
  %baz = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  store i32* %baz, i32** getelementptr inbounds (%foo, %foo* @foo_instance, i32 0, i32 0), align 8
  call void @foo(%foo* @foo_instance)
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%foo = type { i32* }
%foo2 = type { i32*, i32 }
%prg = type { i32 }

@foo_instance = external global %foo
@foo2_instance = external global %foo2
@prg_instance = external global %prg

define void @__init_foo(%foo* %0) {
entry:
  %self = alloca %foo*, align 8
  store %foo* %0, %foo** %self, align 8
  ret void
}

declare void @foo(%foo*)

define void @__init_foo2(%foo2* %0) {
entry:
  %self = alloca %foo2*, align 8
  store %foo2* %0, %foo2** %self, align 8
  ret void
}

declare void @foo2(%foo2*)

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)

define void @__user_init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

define void @__user_init_foo2(%foo2* %0) {
entry:
  %self = alloca %foo2*, align 8
  store %foo2* %0, %foo2** %self, align 8
  ret void
}

define void @__user_init_foo(%foo* %0) {
entry:
  %self = alloca %foo*, align 8
  store %foo* %0, %foo** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%foo = type { i32* }
%foo2 = type { i32*, i32 }
%prg = type { i32 }

@foo_instance = external global %foo
@foo2_instance = external global %foo2
@prg_instance = external global %prg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_foo(%foo* @foo_instance)
  call void @__init_foo2(%foo2* @foo2_instance)
  call void @__init_prg(%prg* @prg_instance)
  call void @__user_init_foo(%foo* @foo_instance)
  call void @__user_init_foo2(%foo2* @foo2_instance)
  call void @__user_init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_foo(%foo*)

declare void @foo(%foo*)

declare void @__init_foo2(%foo2*)

declare void @foo2(%foo2*)

declare void @__init_prg(%prg*)

declare void @prg(%prg*)

declare void @__user_init_foo(%foo*)

declare void @__user_init_foo2(%foo2*)

declare void @__user_init_prg(%prg*)
