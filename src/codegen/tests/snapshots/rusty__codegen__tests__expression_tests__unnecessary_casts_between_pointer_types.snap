---
source: src/codegen/tests/expression_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%baz = type { i8*, i8, i8, i8 }

@baz_instance = global %baz zeroinitializer, section "$RUSTY$var-baz_instance:r4pu8u8i8u8"

define void @baz(%baz* %0) {
entry:
  %ptr = getelementptr inbounds %baz, %baz* %0, i32 0, i32 0
  %b = getelementptr inbounds %baz, %baz* %0, i32 0, i32 1
  %si = getelementptr inbounds %baz, %baz* %0, i32 0, i32 2
  %mb = getelementptr inbounds %baz, %baz* %0, i32 0, i32 3
  store i8* %b, i8** %ptr, align 8
  store i8* %si, i8** %ptr, align 8
  store i8* %mb, i8** %ptr, align 8
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%baz = type { i8*, i8, i8, i8 }

@baz_instance = external global %baz, section "$RUSTY$var-baz_instance:r4pu8u8i8u8"

define void @__init_baz(%baz* %0) {
entry:
  %self = alloca %baz*, align 8
  store %baz* %0, %baz** %self, align 8
  ret void
}

declare void @baz(%baz*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%baz = type { i8*, i8, i8, i8 }

@baz_instance = external global %baz, section "$RUSTY$var-baz_instance:r4pu8u8i8u8"

define void @__init___testproject() {
entry:
  call void @__init_baz(%baz* @baz_instance)
  ret void
}

declare void @__init_baz(%baz*)

declare void @baz(%baz*)
