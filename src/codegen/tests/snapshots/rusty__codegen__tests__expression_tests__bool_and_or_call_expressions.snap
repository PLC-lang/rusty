---
source: src/codegen/tests/expression_tests.rs
assertion_line: 438
expression: result

---
; ModuleID = 'main'
source_filename = "main"

%main_interface = type { i8, i8 }
%foo_interface = type {}

@main_instance = global %main_interface zeroinitializer

define i8 @foo(%foo_interface* %0) {
entry:
  %foo = alloca i8, align 1
  store i8 0, i8* %foo, align 1
  %foo_ret = load i8, i8* %foo, align 1
  ret i8 %foo_ret
}

define void @main(%main_interface* %0) {
entry:
  %c = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 0
  %d = getelementptr inbounds %main_interface, %main_interface* %0, i32 0, i32 1
  %foo_instance = alloca %foo_interface, align 8
  %call = call i8 @foo(%foo_interface* %foo_instance)
  %1 = icmp ne i8 %call, 0
  br i1 %1, label %2, label %4

2:                                                ; preds = %entry
  %foo_instance1 = alloca %foo_interface, align 8
  %call2 = call i8 @foo(%foo_interface* %foo_instance1)
  %3 = icmp ne i8 %call2, 0
  br label %4

4:                                                ; preds = %2, %entry
  %5 = phi i1 [ %1, %entry ], [ %3, %2 ]
  %6 = zext i1 %5 to i8
  store i8 %6, i8* %c, align 1
  %foo_instance3 = alloca %foo_interface, align 8
  %call4 = call i8 @foo(%foo_interface* %foo_instance3)
  %7 = icmp ne i8 %call4, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %foo_instance5 = alloca %foo_interface, align 8
  %call6 = call i8 @foo(%foo_interface* %foo_instance5)
  %9 = icmp ne i8 %call6, 0
  br label %10

10:                                               ; preds = %8, %4
  %11 = phi i1 [ %7, %4 ], [ %9, %8 ]
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %d, align 1
  ret void
}

