---
source: src/codegen/tests/statement_codegen_test.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i32, i64, i64 }

@prg_instance = global %prg zeroinitializer, section "$RUSTY$var-prg_instance:r3u32u64i64"

define void @prg(%prg* %0) {
entry:
  %a = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %y = getelementptr inbounds %prg, %prg* %0, i32 0, i32 2
  %load_x = load i64, i64* %x, align 4
  %shift = lshr i64 %load_x, 0
  %1 = trunc i64 %shift to i32
  store i32 %1, i32* %a, align 4
  %load_x1 = load i64, i64* %x, align 4
  %shift2 = lshr i64 %load_x1, 32
  %2 = trunc i64 %shift2 to i32
  store i32 %2, i32* %a, align 4
  %load_y = load i64, i64* %y, align 4
  %shift3 = ashr i64 %load_y, 32
  %3 = trunc i64 %shift3 to i32
  store i32 %3, i32* %a, align 4
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i32, i64, i64 }

@prg_instance = external global %prg, section "$RUSTY$var-prg_instance:r3u32u64i64"

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i32, i64, i64 }

@prg_instance = external global %prg, section "$RUSTY$var-prg_instance:r3u32u64i64"

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
