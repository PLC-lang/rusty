---
source: src/codegen/tests/function_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i32 }

@prg_instance = global %prg zeroinitializer, section "var-$RUSTY$prg_instance:r1i32"

declare i32 @foo(...) section "fn-$RUSTY$foo:i32"

define void @prg(%prg* %0) section "fn-$RUSTY$prg:v" {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %load_x = load i32, i32* %x, align 4
  %tmpVar = add i32 %load_x, 1
  %call = call i32 (...) @foo(i1 false, i32 3, i32 %tmpVar)
  store i32 %call, i32* %x, align 4
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i32 }

@prg_instance = external global %prg, section "var-$RUSTY$prg_instance:r1i32"

define void @__init_prg(%prg* %0) section "fn-$RUSTY$__init_prg:v[pr1i32]" {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*) section "fn-$RUSTY$prg:v"
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i32 }

@prg_instance = external global %prg, section "var-$RUSTY$prg_instance:r1i32"

define void @__init___testproject() section "fn-$RUSTY$__init___testproject:v" {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*) section "fn-$RUSTY$__init_prg:v[pr1i32]"

declare void @prg(%prg*) section "fn-$RUSTY$prg:v"
