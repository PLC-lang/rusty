---
source: src/codegen/tests/function_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { [6 x i8] }

@main_instance = global %main zeroinitializer
@utf08_literal_0 = private unnamed_addr constant [6 x i8] c"12345\00"

define i32 @func(i8* %0) {
entry:
  %func = alloca i32, align 4
  %x = alloca i8*, align 8
  store i8* %0, i8** %x, align 8
  store i32 0, i32* %func, align 4
  %func_ret = load i32, i32* %func, align 4
  ret i32 %func_ret
}

define void @main(%main* %0) {
entry:
  %a = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %1 = bitcast [6 x i8]* %a to i8*
  %call = call i32 @func(i8* %1)
  %call1 = call i32 @func(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @utf08_literal_0, i32 0, i32 0))
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%main = type { [6 x i8] }

@main_instance = external global %main

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)

define void @__user_init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { [6 x i8] }

@main_instance = external global %main
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  call void @__user_init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)

declare void @__user_init_main(%main*)
