---
source: src/codegen/tests/compare_instructions_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@utf08_literal_0 = private unnamed_addr constant [2 x i8] c"a\00"
@utf08_literal_1 = private unnamed_addr constant [2 x i8] c"b\00"

define i8 @STRING_EQUAL(i8* %0, i8* %1) section "fn-STRING_EQUAL:u8[s8u1025][s8u1025]" {
entry:
  %STRING_EQUAL = alloca i8, align 1
  %op1 = alloca [1025 x i8], align 1
  %bitcast = bitcast [1025 x i8]* %op1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %bitcast, i8 0, i64 1025, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %bitcast, i8* align 1 %0, i64 1024, i1 false)
  %op2 = alloca [1025 x i8], align 1
  %bitcast1 = bitcast [1025 x i8]* %op2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %bitcast1, i8 0, i64 1025, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %bitcast1, i8* align 1 %1, i64 1024, i1 false)
  store i8 0, i8* %STRING_EQUAL, align 1
  %STRING_EQUAL_ret = load i8, i8* %STRING_EQUAL, align 1
  ret i8 %STRING_EQUAL_ret
}

define i16 @baz() section "fn-baz:i16" {
entry:
  %baz = alloca i16, align 2
  %a = alloca [81 x i8], align 1
  %b = alloca [81 x i8], align 1
  %result = alloca i8, align 1
  %0 = bitcast [81 x i8]* %a to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 ptrtoint ([81 x i8]* getelementptr ([81 x i8], [81 x i8]* null, i32 1) to i64), i1 false)
  %1 = bitcast [81 x i8]* %b to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 ptrtoint ([81 x i8]* getelementptr ([81 x i8], [81 x i8]* null, i32 1) to i64), i1 false)
  store i8 0, i8* %result, align 1
  store i16 0, i16* %baz, align 2
  %2 = bitcast [81 x i8]* %a to i8*
  %call = call i8 @STRING_EQUAL(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @utf08_literal_1, i32 0, i32 0))
  store i8 %call, i8* %result, align 1
  %3 = bitcast [81 x i8]* %b to i8*
  %call1 = call i8 @STRING_EQUAL(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @utf08_literal_0, i32 0, i32 0), i8* %3)
  store i8 %call1, i8* %result, align 1
  %baz_ret = load i16, i16* %baz, align 2
  ret i16 %baz_ret
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nounwind willreturn }
