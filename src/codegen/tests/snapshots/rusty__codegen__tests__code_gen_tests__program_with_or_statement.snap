---
source: src/codegen/tests/code_gen_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i8, i8 }

@prg_instance = global %prg zeroinitializer

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %y = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %load_x = load i8, i8* %x, align 1
  %1 = icmp ne i8 %load_x, 0
  br i1 %1, label %4, label %2

2:                                                ; preds = %entry
  %load_y = load i8, i8* %y, align 1
  %3 = icmp ne i8 %load_y, 0
  br label %4

4:                                                ; preds = %2, %entry
  %5 = phi i1 [ %1, %entry ], [ %3, %2 ]
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i8, i8 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i8, i8 }

@prg_instance = external global %prg

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
