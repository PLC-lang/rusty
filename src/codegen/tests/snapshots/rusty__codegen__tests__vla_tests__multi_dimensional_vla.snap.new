---
source: src/codegen/tests/vla_tests.rs
assertion_line: 92
expression: res
---
; ModuleID = 'main'
source_filename = "main"

%__foo_vla = type { i16*, [4 x i32] }

@____foo_vla__init = unnamed_addr constant %__foo_vla zeroinitializer

define i16 @foo(%__foo_vla %0) {
entry:
  %foo = alloca i16, align 2
  %vla = alloca %__foo_vla, align 8
  store %__foo_vla %0, %__foo_vla* %vla, align 8
  store i16 0, i16* %foo, align 2
  %tmpVar = getelementptr inbounds %__foo_vla, %__foo_vla* %vla, i32 -127
  store i16 1, %__foo_vla* %tmpVar, align 2
  %foo_ret = load i16, i16* %foo, align 2
  ret i16 %foo_ret
}

define i32 @main() {
entry:
  %main = alloca i32, align 4
  %arr = alloca [20 x i16], align 2
  %0 = bitcast [20 x i16]* %arr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 ptrtoint ([20 x i16]* getelementptr ([20 x i16], [20 x i16]* null, i32 1) to i64), i1 false)
  store i32 0, i32* %main, align 4
  %load_arr = load [20 x i16], [20 x i16]* %arr, align 2
  %outer_arr_gep = getelementptr inbounds [20 x i16], [20 x i16]* %arr, i32 0, i32 0
  %vla_struct = alloca %__foo_vla, align 8
  %vla_array_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 0
  %vla_dimensions_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 1
  store [4 x i32] [i32 0, i32 4, i32 -2, i32 1], [4 x i32]* %vla_dimensions_gep, align 4
  store i16* %outer_arr_gep, i16** %vla_array_gep, align 8
  %1 = load %__foo_vla, %__foo_vla* %vla_struct, align 8
  %call = call i16 @foo(%__foo_vla %1)
  %main_ret = load i32, i32* %main, align 4
  ret i32 %main_ret
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }

