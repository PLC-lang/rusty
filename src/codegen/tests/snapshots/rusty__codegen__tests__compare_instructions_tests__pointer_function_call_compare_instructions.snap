---
source: src/codegen/tests/compare_instructions_tests.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

%main = type { i16*, i16, i8 }

@main_instance = global %main zeroinitializer, section "var-main_instance:r3pi16i16u8"

define i64 @foo() section "fn-foo:i64" {
entry:
  %foo = alloca i64, align 8
  store i64 0, i64* %foo, align 4
  %foo_ret = load i64, i64* %foo, align 4
  ret i64 %foo_ret
}

define void @main(%main* %0) section "fn-main:v" {
entry:
  %pt = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %x = getelementptr inbounds %main, %main* %0, i32 0, i32 1
  %comp = getelementptr inbounds %main, %main* %0, i32 0, i32 2
  store i16* %x, i16** %pt, align 8
  %load_pt = load i16*, i16** %pt, align 8
  %call = call i64 @foo()
  %1 = ptrtoint i16* %load_pt to i64
  %tmpVar = icmp eq i64 %1, %call
  %2 = zext i1 %tmpVar to i8
  store i8 %2, i8* %comp, align 1
  %load_pt1 = load i16*, i16** %pt, align 8
  %call2 = call i64 @foo()
  %3 = ptrtoint i16* %load_pt1 to i64
  %tmpVar3 = icmp ne i64 %3, %call2
  %4 = zext i1 %tmpVar3 to i8
  store i8 %4, i8* %comp, align 1
  %load_pt4 = load i16*, i16** %pt, align 8
  %call5 = call i64 @foo()
  %5 = ptrtoint i16* %load_pt4 to i64
  %tmpVar6 = icmp slt i64 %5, %call5
  %6 = zext i1 %tmpVar6 to i8
  store i8 %6, i8* %comp, align 1
  %load_pt7 = load i16*, i16** %pt, align 8
  %call8 = call i64 @foo()
  %7 = ptrtoint i16* %load_pt7 to i64
  %tmpVar9 = icmp sgt i64 %7, %call8
  %8 = zext i1 %tmpVar9 to i8
  store i8 %8, i8* %comp, align 1
  %load_pt10 = load i16*, i16** %pt, align 8
  %call11 = call i64 @foo()
  %9 = ptrtoint i16* %load_pt10 to i64
  %tmpVar12 = icmp sle i64 %9, %call11
  %10 = zext i1 %tmpVar12 to i8
  store i8 %10, i8* %comp, align 1
  %load_pt13 = load i16*, i16** %pt, align 8
  %call14 = call i64 @foo()
  %11 = ptrtoint i16* %load_pt13 to i64
  %tmpVar15 = icmp sge i64 %11, %call14
  %12 = zext i1 %tmpVar15 to i8
  store i8 %12, i8* %comp, align 1
  ret void
}
