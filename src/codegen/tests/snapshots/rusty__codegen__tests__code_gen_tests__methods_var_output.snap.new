---
source: src/codegen/tests/code_gen_tests.rs
assertion_line: 4054
expression: res
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%foo = type {}

@__foo__init = unnamed_addr constant %foo zeroinitializer
@utf08_literal_0 = private unnamed_addr constant [6 x i8] c"hello\00"

define void @foo(%foo* %0) {
entry:
  ret void
}

define void @foo_baz(%foo* %0, [81 x i8]* %1) {
entry:
  %out = alloca [81 x i8]*, align 8
  store [81 x i8]* %1, [81 x i8]** %out, align 8
  %deref = load [81 x i8]*, [81 x i8]** %out, align 8
  store [81 x i8] c"hello\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [81 x i8]* %deref, align 1
  ret void
}

define void @main() {
entry:
  %s = alloca [81 x i8], align 1
  %fb = alloca %foo, align 8
  %0 = bitcast [81 x i8]* %s to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 ptrtoint ([81 x i8]* getelementptr ([81 x i8], [81 x i8]* null, i32 1) to i64), i1 false)
  %1 = bitcast %foo* %fb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 bitcast (%foo* @__foo__init to i8*), i64 ptrtoint (%foo* getelementptr (%foo, %foo* null, i32 1) to i64), i1 false)
  %load_s = load [81 x i8], [81 x i8]* %s, align 1
  call void @foo_baz(%foo* %fb, [81 x i8] %load_s)
  %load_s1 = load [81 x i8], [81 x i8]* %s, align 1
  call void @foo_baz(%foo* %fb, [81 x i8] %load_s1)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nounwind willreturn }
