---
source: src/codegen/tests/code_gen_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%mainPROG = type { i8, i16 }

@mainPROG_instance = global %mainPROG zeroinitializer
@utf08_literal_0 = private unnamed_addr constant [2 x i8] c"B\00"
@utf16_literal_0 = private unnamed_addr constant [2 x i16] [i16 65, i16 0]

define void @mainPROG(%mainPROG* %0) {
entry:
  %x = getelementptr inbounds %mainPROG, %mainPROG* %0, i32 0, i32 0
  %y = getelementptr inbounds %mainPROG, %mainPROG* %0, i32 0, i32 1
  store i8 65, i8* %x, align 1
  store i16 66, i16* %y, align 2
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%mainPROG = type { i8, i16 }

@mainPROG_instance = external global %mainPROG

define void @__init_mainprog(%mainPROG* %0) {
entry:
  %self = alloca %mainPROG*, align 8
  store %mainPROG* %0, %mainPROG** %self, align 8
  ret void
}

declare void @mainPROG(%mainPROG*)

define void @__user_init_mainPROG(%mainPROG* %0) {
entry:
  %self = alloca %mainPROG*, align 8
  store %mainPROG* %0, %mainPROG** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%mainPROG = type { i8, i16 }

@mainPROG_instance = external global %mainPROG
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_mainprog(%mainPROG* @mainPROG_instance)
  call void @__user_init_mainPROG(%mainPROG* @mainPROG_instance)
  ret void
}

declare void @__init_mainprog(%mainPROG*)

declare void @mainPROG(%mainPROG*)

declare void @__user_init_mainPROG(%mainPROG*)
