---
source: src/codegen/tests/string_tests.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { [81 x i8], [81 x i16] }

@prg_instance = global %prg zeroinitializer
@utf08_literal_0 = private unnamed_addr constant [4 x i8] c"abc\00"
@utf16_literal_0 = private unnamed_addr constant [4 x i16] [i16 97, i16 98, i16 99, i16 0]

define void @prg(%prg* %0) {
entry:
  %a = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %b = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %1 = bitcast [81 x i8]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @utf08_literal_0, i32 0, i32 0), i32 80, i1 false)
  %2 = bitcast [81 x i8]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @utf08_literal_0, i32 0, i32 0), i32 80, i1 false)
  %3 = bitcast [81 x i16]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 2 %3, i8* align 2 bitcast ([4 x i16]* @utf16_literal_0 to i8*), i32 160, i1 false)
  %4 = bitcast [81 x i16]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 2 %4, i8* align 2 bitcast ([4 x i16]* @utf16_literal_0 to i8*), i32 160, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { [81 x i8], [81 x i16] }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { [81 x i8], [81 x i16] }

@prg_instance = external global %prg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)
