---
source: src/codegen/tests/vla_tests.rs
expression: res
---
; ModuleID = 'main'
source_filename = "main"

%__foo_vla = type { i16*, [4 x i32] }

@____foo_vla__init = unnamed_addr constant %__foo_vla zeroinitializer, section "var-$RUSTY$____foo_vla__init:r2pai16ai32"

define i16 @foo(%__foo_vla* %0) section "fn-$RUSTY$foo:i16[r2pai16ai32]" {
entry:
  %foo = alloca i16, align 2
  %vla = alloca %__foo_vla, align 8
  %1 = bitcast %__foo_vla* %vla to i8*
  %2 = bitcast %__foo_vla* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 ptrtoint (%__foo_vla* getelementptr (%__foo_vla, %__foo_vla* null, i32 1) to i64), i1 false)
  store i16 0, i16* %foo, align 2
  %vla_arr_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla, i32 0, i32 0
  %vla_arr_ptr = load i16*, i16** %vla_arr_gep, align 8
  %dim_arr = getelementptr inbounds %__foo_vla, %__foo_vla* %vla, i32 0, i32 1
  %start_idx_ptr0 = getelementptr inbounds [4 x i32], [4 x i32]* %dim_arr, i32 0, i32 0
  %end_idx_ptr0 = getelementptr inbounds [4 x i32], [4 x i32]* %dim_arr, i32 0, i32 1
  %start_idx_value0 = load i32, i32* %start_idx_ptr0, align 4
  %end_idx_value0 = load i32, i32* %end_idx_ptr0, align 4
  %start_idx_ptr1 = getelementptr inbounds [4 x i32], [4 x i32]* %dim_arr, i32 0, i32 2
  %end_idx_ptr1 = getelementptr inbounds [4 x i32], [4 x i32]* %dim_arr, i32 0, i32 3
  %start_idx_value1 = load i32, i32* %start_idx_ptr1, align 4
  %end_idx_value1 = load i32, i32* %end_idx_ptr1, align 4
  %3 = sub i32 %end_idx_value0, %start_idx_value0
  %len_dim0 = add i32 1, %3
  %4 = sub i32 %end_idx_value1, %start_idx_value1
  %len_dim1 = add i32 1, %4
  %accum = alloca i32, align 4
  store i32 1, i32* %accum, align 4
  %load_accum = load i32, i32* %accum, align 4
  %product = mul i32 %load_accum, %len_dim1
  store i32 %product, i32* %accum, align 4
  %accessor_factor = load i32, i32* %accum, align 4
  %adj_access0 = sub i32 2, %start_idx_value0
  %adj_access1 = sub i32 -1, %start_idx_value1
  %accum1 = alloca i32, align 4
  store i32 0, i32* %accum1, align 4
  %multiply = mul i32 %adj_access0, %accessor_factor
  %load_accum2 = load i32, i32* %accum1, align 4
  %accumulate = add i32 %load_accum2, %multiply
  store i32 %accumulate, i32* %accum1, align 4
  %multiply3 = mul i32 %adj_access1, 1
  %load_accum4 = load i32, i32* %accum1, align 4
  %accumulate5 = add i32 %load_accum4, %multiply3
  store i32 %accumulate5, i32* %accum1, align 4
  %accessor = load i32, i32* %accum1, align 4
  %arr_val = getelementptr inbounds i16, i16* %vla_arr_ptr, i32 %accessor
  store i16 1, i16* %arr_val, align 2
  %foo_ret = load i16, i16* %foo, align 2
  ret i16 %foo_ret
}

define i32 @main() section "fn-$RUSTY$main:i32" {
entry:
  %main = alloca i32, align 4
  %arr = alloca [60 x i16], align 2
  %arr2 = alloca [299 x i16], align 2
  %0 = bitcast [60 x i16]* %arr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 ptrtoint ([60 x i16]* getelementptr ([60 x i16], [60 x i16]* null, i32 1) to i64), i1 false)
  %1 = bitcast [299 x i16]* %arr2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 ptrtoint ([299 x i16]* getelementptr ([299 x i16], [299 x i16]* null, i32 1) to i64), i1 false)
  store i32 0, i32* %main, align 4
  %auto_deref = load [60 x i16], [60 x i16]* %arr, align 2
  %outer_arr_gep = getelementptr inbounds [60 x i16], [60 x i16]* %arr, i32 0, i32 0
  %vla_struct = alloca %__foo_vla, align 8
  %vla_array_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 0
  %vla_dimensions_gep = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct, i32 0, i32 1
  store [4 x i32] [i32 0, i32 14, i32 -2, i32 1], [4 x i32]* %vla_dimensions_gep, align 4
  store i16* %outer_arr_gep, i16** %vla_array_gep, align 8
  %2 = load %__foo_vla, %__foo_vla* %vla_struct, align 8
  %vla_struct_ptr = alloca %__foo_vla, align 8
  store %__foo_vla %2, %__foo_vla* %vla_struct_ptr, align 8
  %call = call i16 @foo(%__foo_vla* %vla_struct_ptr)
  %auto_deref1 = load [299 x i16], [299 x i16]* %arr2, align 2
  %outer_arr_gep2 = getelementptr inbounds [299 x i16], [299 x i16]* %arr2, i32 0, i32 0
  %vla_struct3 = alloca %__foo_vla, align 8
  %vla_array_gep4 = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct3, i32 0, i32 0
  %vla_dimensions_gep5 = getelementptr inbounds %__foo_vla, %__foo_vla* %vla_struct3, i32 0, i32 1
  store [4 x i32] [i32 -8, i32 4, i32 -3, i32 19], [4 x i32]* %vla_dimensions_gep5, align 4
  store i16* %outer_arr_gep2, i16** %vla_array_gep4, align 8
  %3 = load %__foo_vla, %__foo_vla* %vla_struct3, align 8
  %vla_struct_ptr6 = alloca %__foo_vla, align 8
  store %__foo_vla %3, %__foo_vla* %vla_struct_ptr6, align 8
  %call7 = call i16 @foo(%__foo_vla* %vla_struct_ptr6)
  %main_ret = load i32, i32* %main, align 4
  ret i32 %main_ret
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn }
attributes #1 = { argmemonly nofree nounwind willreturn writeonly }
