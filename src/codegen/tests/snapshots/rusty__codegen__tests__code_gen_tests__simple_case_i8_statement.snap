---
source: src/codegen/tests/code_gen_tests.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%prg = type { i8, i8 }

@prg_instance = global %prg zeroinitializer

define void @prg(%prg* %0) {
entry:
  %x = getelementptr inbounds %prg, %prg* %0, i32 0, i32 0
  %y = getelementptr inbounds %prg, %prg* %0, i32 0, i32 1
  %load_x = load i8, i8* %x, align 1
  switch i8 %load_x, label %else [
    i8 1, label %case
    i8 2, label %case1
    i8 3, label %case2
  ]

case:                                             ; preds = %entry
  store i8 1, i8* %y, align 1
  br label %continue

case1:                                            ; preds = %entry
  store i8 2, i8* %y, align 1
  br label %continue

case2:                                            ; preds = %entry
  store i8 3, i8* %y, align 1
  br label %continue

else:                                             ; preds = %entry
  store i8 0, i8* %y, align 1
  br label %continue

continue:                                         ; preds = %else, %case2, %case1, %case
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%prg = type { i8, i8 }

@prg_instance = external global %prg

define void @__init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}

declare void @prg(%prg*)

define void @__user_init_prg(%prg* %0) {
entry:
  %self = alloca %prg*, align 8
  store %prg* %0, %prg** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%prg = type { i8, i8 }

@prg_instance = external global %prg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_prg(%prg* @prg_instance)
  call void @__user_init_prg(%prg* @prg_instance)
  ret void
}

declare void @__init_prg(%prg*)

declare void @prg(%prg*)

declare void @__user_init_prg(%prg*)
