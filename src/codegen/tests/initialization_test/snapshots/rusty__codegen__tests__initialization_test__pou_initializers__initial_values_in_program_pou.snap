---
source: src/codegen/tests/initialization_test/pou_initializers.rs
expression: result
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%Main = type { i16, i16, i8, i8, float, float }

@Main_instance = global %Main { i16 7, i16 0, i8 1, i8 0, float 0x400921CAC0000000, float 0.000000e+00 }

define void @Main(%Main* %0) {
entry:
  %x = getelementptr inbounds %Main, %Main* %0, i32 0, i32 0
  %xx = getelementptr inbounds %Main, %Main* %0, i32 0, i32 1
  %y = getelementptr inbounds %Main, %Main* %0, i32 0, i32 2
  %yy = getelementptr inbounds %Main, %Main* %0, i32 0, i32 3
  %z = getelementptr inbounds %Main, %Main* %0, i32 0, i32 4
  %zz = getelementptr inbounds %Main, %Main* %0, i32 0, i32 5
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%Main = type { i16, i16, i8, i8, float, float }

@Main_instance = external global %Main

define void @__init_main(%Main* %0) {
entry:
  %self = alloca %Main*, align 8
  store %Main* %0, %Main** %self, align 8
  ret void
}

declare void @Main(%Main*)

define void @__user_init_Main(%Main* %0) {
entry:
  %self = alloca %Main*, align 8
  store %Main* %0, %Main** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%Main = type { i16, i16, i8, i8, float, float }

@Main_instance = external global %Main
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%Main* @Main_instance)
  call void @__user_init_Main(%Main* @Main_instance)
  ret void
}

declare void @__init_main(%Main*)

declare void @Main(%Main*)

declare void @__user_init_Main(%Main*)
