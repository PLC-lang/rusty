---
source: src/codegen/tests/initialization_test/type_initializers.rs
expression: res
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%main = type { [3 x %STRUCT1] }
%STRUCT1 = type { i32, [2 x %STRUCT2] }
%STRUCT2 = type { i32, i32 }

@main_instance = global %main { [3 x %STRUCT1] [%STRUCT1 { i32 0, [2 x %STRUCT2] [%STRUCT2 { i32 1, i32 0 }, %STRUCT2 zeroinitializer] }, %STRUCT1 { i32 2, [2 x %STRUCT2] [%STRUCT2 { i32 1, i32 1 }, %STRUCT2 zeroinitializer] }, %STRUCT1 { i32 1, [2 x %STRUCT2] [%STRUCT2 { i32 1, i32 0 }, %STRUCT2 { i32 0, i32 2 }] }] }
@__STRUCT1__init = unnamed_addr constant %STRUCT1 zeroinitializer
@__STRUCT2__init = unnamed_addr constant %STRUCT2 zeroinitializer
@__main.var_init1__init = unnamed_addr constant [3 x %STRUCT1] [%STRUCT1 { i32 0, [2 x %STRUCT2] [%STRUCT2 { i32 1, i32 0 }, %STRUCT2 zeroinitializer] }, %STRUCT1 { i32 2, [2 x %STRUCT2] [%STRUCT2 { i32 1, i32 1 }, %STRUCT2 zeroinitializer] }, %STRUCT1 { i32 1, [2 x %STRUCT2] [%STRUCT2 { i32 1, i32 0 }, %STRUCT2 { i32 0, i32 2 }] }]

define void @main(%main* %0) {
entry:
  %var_init1 = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%STRUCT1 = type { i32, [2 x %STRUCT2] }
%STRUCT2 = type { i32, i32 }
%main = type { [3 x %STRUCT1] }

@__STRUCT1__init = external global %STRUCT1
@__STRUCT2__init = external global %STRUCT2
@main_instance = external global %main

define void @__init_struct1(%STRUCT1* %0) {
entry:
  %self = alloca %STRUCT1*, align 8
  store %STRUCT1* %0, %STRUCT1** %self, align 8
  ret void
}

define void @__init_struct2(%STRUCT2* %0) {
entry:
  %self = alloca %STRUCT2*, align 8
  store %STRUCT2* %0, %STRUCT2** %self, align 8
  ret void
}

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}

declare void @main(%main*)

define void @__user_init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { [3 x %STRUCT1] }
%STRUCT1 = type { i32, [2 x %STRUCT2] }
%STRUCT2 = type { i32, i32 }

@main_instance = external global %main
@__STRUCT1__init = external global %STRUCT1
@__STRUCT2__init = external global %STRUCT2
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  call void @__user_init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)

declare void @__user_init_main(%main*)
