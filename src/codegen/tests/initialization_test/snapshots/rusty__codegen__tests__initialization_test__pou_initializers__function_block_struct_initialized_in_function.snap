---
source: src/codegen/tests/initialization_test/pou_initializers.rs
expression: function
---
; ModuleID = 'main'
source_filename = "main"

%main = type { %fb }
%fb = type {}

@main_instance = global %main zeroinitializer
@__fb__init = unnamed_addr constant %fb zeroinitializer

define void @fb(%fb* %0) {
entry:
  ret void
}

define i32 @func(%fb %0) {
entry:
  %in = alloca %fb, align 8
  store %fb %0, %fb* %in, align 1
  %x = alloca %fb, align 8
  %func = alloca i32, align 4
  %1 = bitcast %fb* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 bitcast (%fb* @__fb__init to i8*), i64 ptrtoint (%fb* getelementptr (%fb, %fb* null, i32 1) to i64), i1 false)
  store i32 0, i32* %func, align 4
  %func_ret = load i32, i32* %func, align 4
  ret i32 %func_ret
}

define void @main(%main* %0) {
entry:
  %fb0 = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %load_fb0 = load %fb, %fb* %fb0, align 1
  %call = call i32 @func(%fb %load_fb0)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }

