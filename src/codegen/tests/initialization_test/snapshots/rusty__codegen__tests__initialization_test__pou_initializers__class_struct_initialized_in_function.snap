---
source: src/codegen/tests/initialization_test/pou_initializers.rs
expression: function
snapshot_kind: text
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%fb = type { i16 }
%main = type { %fb }

@__fb__init = unnamed_addr constant %fb { i16 9 }
@main_instance = global %main { %fb { i16 9 } }

define void @fb(%fb* %0) {
entry:
  %a = getelementptr inbounds %fb, %fb* %0, i32 0, i32 0
  ret void
}

define i32 @func(%fb* %0) {
entry:
  %func = alloca i32, align 4
  %in = alloca %fb, align 8
  %1 = bitcast %fb* %in to i8*
  %2 = bitcast %fb* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 ptrtoint (%fb* getelementptr (%fb, %fb* null, i32 1) to i64), i1 false)
  %x = alloca %fb, align 8
  %3 = bitcast %fb* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 bitcast (%fb* @__fb__init to i8*), i64 ptrtoint (%fb* getelementptr (%fb, %fb* null, i32 1) to i64), i1 false)
  store i32 0, i32* %func, align 4
  call void @__init_fb(%fb* %x)
  %func_ret = load i32, i32* %func, align 4
  ret i32 %func_ret
}

define void @main(%main* %0) {
entry:
  %fb0 = getelementptr inbounds %main, %main* %0, i32 0, i32 0
  %call = call i32 @func(%fb* %fb0)
  ret void
}

declare void @__init_fb(%fb*)

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn }
; ModuleID = '__initializers'
source_filename = "__initializers"

%fb = type { i16 }
%main = type { %fb }

@__fb__init = external global %fb
@main_instance = external global %main

define void @__init_fb(%fb* %0) {
entry:
  %self = alloca %fb*, align 8
  store %fb* %0, %fb** %self, align 8
  ret void
}

declare void @fb(%fb*)

define void @__init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  %deref = load %main*, %main** %self, align 8
  %fb0 = getelementptr inbounds %main, %main* %deref, i32 0, i32 0
  call void @__init_fb(%fb* %fb0)
  ret void
}

declare void @main(%main*)

define void @__user_init_main(%main* %0) {
entry:
  %self = alloca %main*, align 8
  store %main* %0, %main** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%main = type { %fb }
%fb = type { i16 }

@main_instance = external global %main
@__fb__init = external global %fb
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_main(%main* @main_instance)
  call void @__user_init_main(%main* @main_instance)
  ret void
}

declare void @__init_main(%main*)

declare void @main(%main*)

declare void @fb(%fb*)

declare void @__user_init_main(%main*)
