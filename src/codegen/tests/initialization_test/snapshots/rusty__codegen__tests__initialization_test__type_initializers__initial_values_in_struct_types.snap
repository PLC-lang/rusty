---
source: src/codegen/tests/initialization_test/type_initializers.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%MyStruct = type { i16, i16, i8, i8, float, float }

@x = global %MyStruct { i16 7, i16 0, i8 1, i8 0, float 0x400921CAC0000000, float 0.000000e+00 }
@__MyStruct__init = unnamed_addr constant %MyStruct { i16 7, i16 0, i8 1, i8 0, float 0x400921CAC0000000, float 0.000000e+00 }
; ModuleID = '__initializers'
source_filename = "__initializers"

%MyStruct = type { i16, i16, i8, i8, float, float }

@__MyStruct__init = external global %MyStruct

define void @__init_mystruct(%MyStruct* %0) {
entry:
  %self = alloca %MyStruct*, align 8
  store %MyStruct* %0, %MyStruct** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%MyStruct = type { i16, i16, i8, i8, float, float }

@__MyStruct__init = external global %MyStruct
@x = external global %MyStruct
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_mystruct(%MyStruct* @x)
  ret void
}

declare void @__init_mystruct(%MyStruct*)
