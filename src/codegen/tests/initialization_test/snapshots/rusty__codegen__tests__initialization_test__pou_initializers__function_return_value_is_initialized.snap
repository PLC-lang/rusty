---
source: src/codegen/tests/initialization_test/pou_initializers.rs
expression: function
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%MyStruct = type { i32, i16 }

@__MyStruct__init = unnamed_addr constant %MyStruct zeroinitializer

define i16 @foo_int() {
entry:
  %foo_int = alloca i16, align 2
  store i16 0, i16* %foo_int, align 2
  %foo_int_ret = load i16, i16* %foo_int, align 2
  ret i16 %foo_int_ret
}

define void @foo_str(i8* %0) {
entry:
  %foo_str = alloca i8*, align 8
  store i8* %0, i8** %foo_str, align 8
  ret void
}

define void @foo_arr(float* %0) {
entry:
  %foo_arr = alloca float*, align 8
  store float* %0, float** %foo_arr, align 8
  ret void
}

define void @foo_struct(%MyStruct* %0) {
entry:
  %foo_struct = alloca %MyStruct*, align 8
  store %MyStruct* %0, %MyStruct** %foo_struct, align 8
  ret void
}
; ModuleID = '__initializers'
source_filename = "__initializers"

%MyStruct = type { i32, i16 }

@__MyStruct__init = external global %MyStruct

define void @__init_mystruct(%MyStruct* %0) {
entry:
  %self = alloca %MyStruct*, align 8
  store %MyStruct* %0, %MyStruct** %self, align 8
  ret void
}
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  ret void
}
