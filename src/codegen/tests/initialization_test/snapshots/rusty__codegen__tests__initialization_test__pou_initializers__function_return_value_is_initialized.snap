---
source: src/codegen/tests/initialization_test/pou_initializers.rs
expression: function
---
; ModuleID = 'main'
source_filename = "main"

%MyStruct = type { i32, i16 }

@__MyStruct__init = unnamed_addr constant %MyStruct zeroinitializer

define i16 @foo_int() section "fn-foo_int:i16" {
entry:
  %foo_int = alloca i16, align 2
  store i16 0, i16* %foo_int, align 2
  %foo_int_ret = load i16, i16* %foo_int, align 2
  ret i16 %foo_int_ret
}

define void @foo_str([11 x i8]* %0) section "fn-foo_str:s8u11" {
entry:
  %foo_str = alloca [11 x i8]*, align 8
  store [11 x i8]* %0, [11 x i8]** %foo_str, align 8
  %deref = load [11 x i8]*, [11 x i8]** %foo_str, align 8
  %1 = bitcast [11 x i8]* %deref to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 ptrtoint ([11 x i8]* getelementptr ([11 x i8], [11 x i8]* null, i32 1) to i64), i1 false)
  ret void
}

define void @foo_arr([10 x float]* %0) section "fn-foo_arr:v" {
entry:
  %foo_arr = alloca [10 x float]*, align 8
  store [10 x float]* %0, [10 x float]** %foo_arr, align 8
  %deref = load [10 x float]*, [10 x float]** %foo_arr, align 8
  %1 = bitcast [10 x float]* %deref to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 ptrtoint ([10 x float]* getelementptr ([10 x float], [10 x float]* null, i32 1) to i64), i1 false)
  ret void
}

define void @foo_struct(%MyStruct* %0) section "fn-foo_struct:v" {
entry:
  %foo_struct = alloca %MyStruct*, align 8
  store %MyStruct* %0, %MyStruct** %foo_struct, align 8
  %deref = load %MyStruct*, %MyStruct** %foo_struct, align 8
  %1 = bitcast %MyStruct* %deref to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 bitcast (%MyStruct* @__MyStruct__init to i8*), i64 ptrtoint (%MyStruct* getelementptr (%MyStruct, %MyStruct* null, i32 1) to i64), i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
attributes #1 = { argmemonly nofree nounwind willreturn }
