{"run_id":"1737017381-988137738","line":1901,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"initializing_method_variables_with_alias","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":1901,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0) {\nentry:\n  %x = alloca i32, align 4\n  %px = alloca i32*, align 8\n  store i32 0, i32* %x, align 4\n  store i32* null, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n%foo.bar = type { i32, i32* }\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0, %foo.bar* %1) {\nentry:\n  %x = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 0\n  %px = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 1\n  store i32 0, i32* %x, align 4\n  store i32* null, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
{"run_id":"1737017381-988137738","line":1964,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"initializing_method_variables_with_reference_to","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":1964,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0) {\nentry:\n  %x = alloca i32, align 4\n  %px = alloca i32*, align 8\n  store i32 0, i32* %x, align 4\n  store i32* null, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n%foo.bar = type { i32, i32* }\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0, %foo.bar* %1) {\nentry:\n  %x = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 0\n  %px = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 1\n  store i32 0, i32* %x, align 4\n  store i32* null, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
{"run_id":"1737017381-988137738","line":1705,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"initializing_method_variables_with_refs_referencing_parent_pou_variable","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":1705,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type { i32 }\n\n@__foo__init = unnamed_addr constant %foo { i32 5 }\n\ndefine void @foo(%foo* %0) {\nentry:\n  %x = getelementptr inbounds %foo, %foo* %0, i32 0, i32 0\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0) {\nentry:\n  %x = getelementptr inbounds %foo, %foo* %0, i32 0, i32 0\n  %px = alloca i32*, align 8\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type { i32 }\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type { i32 }\n%foo.bar = type { i32* }\n\n@__foo__init = unnamed_addr constant %foo { i32 5 }\n\ndefine void @foo(%foo* %0) {\nentry:\n  %x = getelementptr inbounds %foo, %foo* %0, i32 0, i32 0\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0, %foo.bar* %1) {\nentry:\n  %x = getelementptr inbounds %foo, %foo* %0, i32 0, i32 0\n  %px = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 0\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type { i32 }\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
{"run_id":"1737017381-988137738","line":1837,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"initializing_method_variables_with_refs_shadowing","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":1837,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n\n@x = global i32 0\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0) {\nentry:\n  %x = alloca i32, align 4\n  %px = alloca i32*, align 8\n  store i32 0, i32* %x, align 4\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n%foo.bar = type { i32, i32* }\n\n@x = global i32 0\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0, %foo.bar* %1) {\nentry:\n  %x = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 0\n  %px = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 1\n  store i32 0, i32* %x, align 4\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
{"run_id":"1737017381-988137738","line":1639,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"initializing_method_variables_with_refs","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":1639,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0) {\nentry:\n  %x = alloca i32, align 4\n  %px = alloca i32*, align 8\n  store i32 10, i32* %x, align 4\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n%foo.bar = type { i32, i32* }\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0, %foo.bar* %1) {\nentry:\n  %x = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 0\n  %px = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 1\n  store i32 10, i32* %x, align 4\n  store i32* %x, i32** %px, align 8\n  store i32* %x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
{"run_id":"1737017381-988137738","line":1771,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"initializing_method_variables_with_refs_referencing_global_variable","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":1771,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n\n@x = global i32 0\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0) {\nentry:\n  %px = alloca i32*, align 8\n  store i32* @x, i32** %px, align 8\n  store i32* @x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type {}\n%foo.bar = type { i32* }\n\n@x = global i32 0\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.bar(%foo* %0, %foo.bar* %1) {\nentry:\n  %px = getelementptr inbounds %foo.bar, %foo.bar* %1, i32 0, i32 0\n  store i32* @x, i32** %px, align 8\n  store i32* @x, i32** %px, align 8\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type {}\n\n@__foo__init = external global %foo\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
{"run_id":"1737017381-988137738","line":2034,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"methods_call_init_functions_for_their_members","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":2034,"expression":"codegen(src)"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type { i32, i32* }\n%bar = type {}\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n@__bar__init = unnamed_addr constant %bar zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  %x = getelementptr inbounds %foo, %foo* %0, i32 0, i32 0\n  %y = getelementptr inbounds %foo, %foo* %0, i32 0, i32 1\n  ret void\n}\n\ndefine void @bar(%bar* %0) {\nentry:\n  ret void\n}\n\ndefine void @bar.baz(%bar* %0) {\nentry:\n  %fb = alloca %foo, align 8\n  %1 = bitcast %foo* %fb to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 bitcast (%foo* @__foo__init to i8*), i64 ptrtoint (%foo* getelementptr (%foo, %foo* null, i32 1) to i64), i1 false)\n  call void @__init_foo(%foo* %fb)\n  ret void\n}\n\ndeclare void @__init_foo(%foo*)\n\n; Function Attrs: argmemonly nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0\n\nattributes #0 = { argmemonly nofree nounwind willreturn }\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type { i32, i32* }\n%bar = type {}\n\n@__foo__init = external global %foo\n@__bar__init = external global %bar\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  %deref = load %foo*, %foo** %self, align 8\n  %y = getelementptr inbounds %foo, %foo* %deref, i32 0, i32 1\n  %deref1 = load %foo*, %foo** %self, align 8\n  %x = getelementptr inbounds %foo, %foo* %deref1, i32 0, i32 0\n  store i32* %x, i32** %y, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n\ndefine void @__init_bar(%bar* %0) {\nentry:\n  %self = alloca %bar*, align 8\n  store %bar* %0, %bar** %self, align 8\n  ret void\n}\n\ndeclare void @bar(%bar*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%foo = type { i32, i32* }\n%bar = type {}\n%bar.baz = type { %foo }\n\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n@__bar__init = unnamed_addr constant %bar zeroinitializer\n\ndefine void @foo(%foo* %0) {\nentry:\n  %x = getelementptr inbounds %foo, %foo* %0, i32 0, i32 0\n  %y = getelementptr inbounds %foo, %foo* %0, i32 0, i32 1\n  ret void\n}\n\ndefine void @bar(%bar* %0) {\nentry:\n  ret void\n}\n\ndefine void @bar.baz(%bar* %0, %bar.baz* %1) {\nentry:\n  %fb = getelementptr inbounds %bar.baz, %bar.baz* %1, i32 0, i32 0\n  %2 = bitcast %foo* %fb to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 bitcast (%foo* @__foo__init to i8*), i64 ptrtoint (%foo* getelementptr (%foo, %foo* null, i32 1) to i64), i1 false)\n  call void @__init_foo(%foo* %fb)\n  ret void\n}\n\ndeclare void @__init_foo(%foo*)\n\n; Function Attrs: argmemonly nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0\n\nattributes #0 = { argmemonly nofree nounwind willreturn }\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%foo = type { i32, i32* }\n%bar = type {}\n\n@__foo__init = external global %foo\n@__bar__init = external global %bar\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  %deref = load %foo*, %foo** %self, align 8\n  %y = getelementptr inbounds %foo, %foo* %deref, i32 0, i32 1\n  %deref1 = load %foo*, %foo** %self, align 8\n  %x = getelementptr inbounds %foo, %foo* %deref1, i32 0, i32 0\n  store i32* %x, i32** %y, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n\ndefine void @__init_bar(%bar* %0) {\nentry:\n  %self = alloca %bar*, align 8\n  store %bar* %0, %bar** %self, align 8\n  ret void\n}\n\ndeclare void @bar(%bar*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  ret void\n}"}}
{"run_id":"1737017381-988137738","line":785,"new":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","snapshot_name":"stateful_pous_methods_and_structs_get_init_functions","metadata":{"source":"src/codegen/tests/initialization_test/complex_initializers.rs","assertion_line":785,"expression":"res"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%prog = type {}\n%foo = type {}\n%cl = type {}\n%myStruct = type {}\n\n@prog_instance = global %prog zeroinitializer\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n@__cl__init = unnamed_addr constant %cl zeroinitializer\n@__myStruct__init = unnamed_addr constant %myStruct zeroinitializer\n\ndefine void @prog(%prog* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.m(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @cl(%cl* %0) {\nentry:\n  ret void\n}\n\ndefine void @cl.m(%cl* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.act(%foo* %0) {\nentry:\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%myStruct = type {}\n%foo = type {}\n%prog = type {}\n%cl = type {}\n\n@__myStruct__init = external global %myStruct\n@__foo__init = external global %foo\n@prog_instance = external global %prog\n@__cl__init = external global %cl\n\ndefine void @__init_mystruct(%myStruct* %0) {\nentry:\n  %self = alloca %myStruct*, align 8\n  store %myStruct* %0, %myStruct** %self, align 8\n  ret void\n}\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n\ndefine void @__init_prog(%prog* %0) {\nentry:\n  %self = alloca %prog*, align 8\n  store %prog* %0, %prog** %self, align 8\n  ret void\n}\n\ndeclare void @prog(%prog*)\n\ndefine void @__init_cl(%cl* %0) {\nentry:\n  %self = alloca %cl*, align 8\n  store %cl* %0, %cl** %self, align 8\n  ret void\n}\n\ndeclare void @cl(%cl*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n%prog = type {}\n\n@prog_instance = external global %prog\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  call void @__init_prog(%prog* @prog_instance)\n  ret void\n}\n\ndeclare void @__init_prog(%prog*)\n\ndeclare void @prog(%prog*)"},"old":{"module_name":"rusty__codegen__tests__initialization_test__complex_initializers","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\n%prog = type {}\n%foo = type {}\n%cl = type {}\n%myStruct = type {}\n%foo.m = type {}\n%cl.m = type {}\n\n@prog_instance = global %prog zeroinitializer\n@__foo__init = unnamed_addr constant %foo zeroinitializer\n@__cl__init = unnamed_addr constant %cl zeroinitializer\n@__myStruct__init = unnamed_addr constant %myStruct zeroinitializer\n\ndefine void @prog(%prog* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo(%foo* %0) {\nentry:\n  ret void\n}\n\ndefine void @foo.m(%foo* %0, %foo.m* %1) {\nentry:\n  ret void\n}\n\ndefine void @cl(%cl* %0) {\nentry:\n  ret void\n}\n\ndefine void @cl.m(%cl* %0, %cl.m* %1) {\nentry:\n  ret void\n}\n\ndefine void @foo.act(%foo* %0) {\nentry:\n  ret void\n}\n; ModuleID = '__initializers'\nsource_filename = \"__initializers\"\n\n%myStruct = type {}\n%foo = type {}\n%prog = type {}\n%cl = type {}\n\n@__myStruct__init = external global %myStruct\n@__foo__init = external global %foo\n@prog_instance = external global %prog\n@__cl__init = external global %cl\n\ndefine void @__init_mystruct(%myStruct* %0) {\nentry:\n  %self = alloca %myStruct*, align 8\n  store %myStruct* %0, %myStruct** %self, align 8\n  ret void\n}\n\ndefine void @__init_foo(%foo* %0) {\nentry:\n  %self = alloca %foo*, align 8\n  store %foo* %0, %foo** %self, align 8\n  ret void\n}\n\ndeclare void @foo(%foo*)\n\ndefine void @__init_prog(%prog* %0) {\nentry:\n  %self = alloca %prog*, align 8\n  store %prog* %0, %prog** %self, align 8\n  ret void\n}\n\ndeclare void @prog(%prog*)\n\ndefine void @__init_cl(%cl* %0) {\nentry:\n  %self = alloca %cl*, align 8\n  store %cl* %0, %cl** %self, align 8\n  ret void\n}\n\ndeclare void @cl(%cl*)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n%prog = type {}\n\n@prog_instance = external global %prog\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() {\nentry:\n  call void @__init_prog(%prog* @prog_instance)\n  ret void\n}\n\ndeclare void @__init_prog(%prog*)\n\ndeclare void @prog(%prog*)"}}
