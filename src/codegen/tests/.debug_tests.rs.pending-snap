{"run_id":"1736517488-459763383","line":221,"new":{"module_name":"rusty__codegen__tests__debug_tests","snapshot_name":"switch_case_debug_info","metadata":{"source":"src/codegen/tests/debug_tests.rs","assertion_line":221,"expression":"codegen"},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\ndefine i32 @main() !dbg !4 {\nentry:\n  %main = alloca i32, align 4, !dbg !9\n  %x1 = alloca i16, align 2, !dbg !9\n  %x2 = alloca i16, align 2, !dbg !9\n  %x3 = alloca i16, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i16* %x1, metadata !10, metadata !DIExpression()), !dbg !12\n  store i16 0, i16* %x1, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i16* %x2, metadata !13, metadata !DIExpression()), !dbg !14\n  store i16 0, i16* %x2, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i16* %x3, metadata !15, metadata !DIExpression()), !dbg !16\n  store i16 0, i16* %x3, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i32* %main, metadata !17, metadata !DIExpression()), !dbg !19\n  store i32 0, i32* %main, align 4, !dbg !9\n  br label %condition_check, !dbg !20\n\ncondition_check:                                  ; preds = %entry, %continue2\n  br i1 true, label %while_body, label %continue, !dbg !21\n\nwhile_body:                                       ; preds = %condition_check\n  br i1 false, label %condition_body, label %continue1, !dbg !21\n\ncontinue:                                         ; preds = %condition_body, %condition_check\n  %main_ret = load i32, i32* %main, align 4, !dbg !20\n  ret i32 %main_ret, !dbg !20\n\ncondition_body:                                   ; preds = %while_body\n  br label %continue, !dbg !21\n\nbuffer_block:                                     ; No predecessors!\n  br label %continue1, !dbg !21\n\ncontinue1:                                        ; preds = %buffer_block, %while_body\n  %load_x1 = load i16, i16* %x1, align 2, !dbg !22\n  %0 = sext i16 %load_x1 to i32, !dbg !22\n  %tmpVar = add i32 %0, 1, !dbg !22\n  %1 = trunc i32 %tmpVar to i16, !dbg !22\n  store i16 %1, i16* %x1, align 2, !dbg !22\n  %load_x13 = load i16, i16* %x1, align 2, !dbg !22\n  switch i16 %load_x13, label %else [\n    i16 1, label %case\n    i16 2, label %case4\n    i16 3, label %case5\n  ], !dbg !20\n\ncase:                                             ; preds = %continue1\n  store i16 1, i16* %x2, align 2, !dbg !23\n  br label %continue2, !dbg !23\n\ncase4:                                            ; preds = %continue1\n  store i16 2, i16* %x2, align 2, !dbg !24\n  br label %continue2, !dbg !24\n\ncase5:                                            ; preds = %continue1\n  store i16 3, i16* %x2, align 2, !dbg !25\n  br label %continue2, !dbg !25\n\nelse:                                             ; preds = %continue1\n  store i16 0, i16* %x1, align 2, !dbg !26\n  store i16 1, i16* %x2, align 2, !dbg !27\n  store i16 2, i16* %x3, align 2, !dbg !28\n  br label %continue2, !dbg !28\n\ncontinue2:                                        ; preds = %else, %case5, %case4, %case\n  br label %condition_check, !dbg !20\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare void @llvm.dbg.declare(metadata, metadata, metadata) #0\n\nattributes #0 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.dbg.cu = !{!2}\n\n!0 = !{i32 2, !\"Dwarf Version\", i32 4}\n!1 = !{i32 2, !\"Debug Info Version\", i32 3}\n!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: \"RuSTy Structured text Compiler\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)\n!3 = !DIFile(filename: \"<internal>\", directory: \"src\")\n!4 = distinct !DISubprogram(name: \"main\", linkageName: \"main\", scope: !5, file: !5, line: 2, type: !6, scopeLine: 9, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !8)\n!5 = !DIFile(filename: \"<internal>\", directory: \"\")\n!6 = !DISubroutineType(flags: DIFlagPublic, types: !7)\n!7 = !{null}\n!8 = !{}\n!9 = !DILocation(line: 9, column: 12, scope: !4)\n!10 = !DILocalVariable(name: \"x1\", scope: !4, file: !5, line: 4, type: !11, align: 16)\n!11 = !DIBasicType(name: \"INT\", size: 16, encoding: DW_ATE_signed, flags: DIFlagPublic)\n!12 = !DILocation(line: 4, column: 16, scope: !4)\n!13 = !DILocalVariable(name: \"x2\", scope: !4, file: !5, line: 5, type: !11, align: 16)\n!14 = !DILocation(line: 5, column: 16, scope: !4)\n!15 = !DILocalVariable(name: \"x3\", scope: !4, file: !5, line: 6, type: !11, align: 16)\n!16 = !DILocation(line: 6, column: 16, scope: !4)\n!17 = !DILocalVariable(name: \"main\", scope: !4, file: !5, line: 2, type: !18, align: 32)\n!18 = !DIBasicType(name: \"DINT\", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)\n!19 = !DILocation(line: 2, column: 17, scope: !4)\n!20 = !DILocation(line: 12, column: 17, scope: !4)\n!21 = !DILocation(line: 9, column: 18, scope: !4)\n!22 = !DILocation(line: 10, column: 12, scope: !4)\n!23 = !DILocation(line: 13, column: 19, scope: !4)\n!24 = !DILocation(line: 14, column: 19, scope: !4)\n!25 = !DILocation(line: 15, column: 19, scope: !4)\n!26 = !DILocation(line: 17, column: 20, scope: !4)\n!27 = !DILocation(line: 18, column: 20, scope: !4)\n!28 = !DILocation(line: 19, column: 20, scope: !4)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() !dbg !4 {\nentry:\n  ret void, !dbg !9\n}\n\n!llvm.module.flags = !{!0, !1}\n!llvm.dbg.cu = !{!2}\n\n!0 = !{i32 2, !\"Dwarf Version\", i32 4}\n!1 = !{i32 2, !\"Debug Info Version\", i32 3}\n!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: \"RuSTy Structured text Compiler\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)\n!3 = !DIFile(filename: \"__init___testproject\", directory: \"src\")\n!4 = distinct !DISubprogram(name: \"__init___testproject\", linkageName: \"__init___testproject\", scope: !5, file: !5, type: !6, scopeLine: 1, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !8)\n!5 = !DIFile(filename: \"<internal>\", directory: \"\")\n!6 = !DISubroutineType(flags: DIFlagPublic, types: !7)\n!7 = !{null}\n!8 = !{}\n!9 = !DILocation(line: 0, scope: !4)"},"old":{"module_name":"rusty__codegen__tests__debug_tests","metadata":{},"snapshot":"; ModuleID = '<internal>'\nsource_filename = \"<internal>\"\n\ndefine i32 @main() !dbg !4 {\nentry:\n  %main = alloca i32, align 4, !dbg !9\n  %x1 = alloca i16, align 2, !dbg !9\n  %x2 = alloca i16, align 2, !dbg !9\n  %x3 = alloca i16, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i16* %x1, metadata !10, metadata !DIExpression()), !dbg !12\n  store i16 0, i16* %x1, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i16* %x2, metadata !13, metadata !DIExpression()), !dbg !14\n  store i16 0, i16* %x2, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i16* %x3, metadata !15, metadata !DIExpression()), !dbg !16\n  store i16 0, i16* %x3, align 2, !dbg !9\n  call void @llvm.dbg.declare(metadata i32* %main, metadata !17, metadata !DIExpression()), !dbg !19\n  store i32 0, i32* %main, align 4, !dbg !9\n  br label %condition_check, !dbg !20\n\ncondition_check:                                  ; preds = %entry, %continue1\n  br i1 true, label %while_body, label %continue, !dbg !21\n\nwhile_body:                                       ; preds = %condition_check\n  %load_x1 = load i16, i16* %x1, align 2, !dbg !22\n  %0 = sext i16 %load_x1 to i32, !dbg !22\n  %tmpVar = add i32 %0, 1, !dbg !22\n  %1 = trunc i32 %tmpVar to i16, !dbg !22\n  store i16 %1, i16* %x1, align 2, !dbg !22\n  %load_x12 = load i16, i16* %x1, align 2, !dbg !22\n  switch i16 %load_x12, label %else [\n    i16 1, label %case\n    i16 2, label %case3\n    i16 3, label %case4\n  ], !dbg !20\n\ncontinue:                                         ; preds = %condition_check\n  %main_ret = load i32, i32* %main, align 4, !dbg !20\n  ret i32 %main_ret, !dbg !20\n\ncase:                                             ; preds = %while_body\n  store i16 1, i16* %x2, align 2, !dbg !23\n  br label %continue1, !dbg !23\n\ncase3:                                            ; preds = %while_body\n  store i16 2, i16* %x2, align 2, !dbg !24\n  br label %continue1, !dbg !24\n\ncase4:                                            ; preds = %while_body\n  store i16 3, i16* %x2, align 2, !dbg !25\n  br label %continue1, !dbg !25\n\nelse:                                             ; preds = %while_body\n  store i16 0, i16* %x1, align 2, !dbg !26\n  store i16 1, i16* %x2, align 2, !dbg !27\n  store i16 2, i16* %x3, align 2, !dbg !28\n  br label %continue1, !dbg !28\n\ncontinue1:                                        ; preds = %else, %case4, %case3, %case\n  br label %condition_check, !dbg !20\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare void @llvm.dbg.declare(metadata, metadata, metadata) #0\n\nattributes #0 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.dbg.cu = !{!2}\n\n!0 = !{i32 2, !\"Dwarf Version\", i32 4}\n!1 = !{i32 2, !\"Debug Info Version\", i32 3}\n!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: \"RuSTy Structured text Compiler\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)\n!3 = !DIFile(filename: \"<internal>\", directory: \"src\")\n!4 = distinct !DISubprogram(name: \"main\", linkageName: \"main\", scope: !5, file: !5, line: 2, type: !6, scopeLine: 9, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !8)\n!5 = !DIFile(filename: \"<internal>\", directory: \"\")\n!6 = !DISubroutineType(flags: DIFlagPublic, types: !7)\n!7 = !{null}\n!8 = !{}\n!9 = !DILocation(line: 9, column: 12, scope: !4)\n!10 = !DILocalVariable(name: \"x1\", scope: !4, file: !5, line: 4, type: !11, align: 16)\n!11 = !DIBasicType(name: \"INT\", size: 16, encoding: DW_ATE_signed, flags: DIFlagPublic)\n!12 = !DILocation(line: 4, column: 16, scope: !4)\n!13 = !DILocalVariable(name: \"x2\", scope: !4, file: !5, line: 5, type: !11, align: 16)\n!14 = !DILocation(line: 5, column: 16, scope: !4)\n!15 = !DILocalVariable(name: \"x3\", scope: !4, file: !5, line: 6, type: !11, align: 16)\n!16 = !DILocation(line: 6, column: 16, scope: !4)\n!17 = !DILocalVariable(name: \"main\", scope: !4, file: !5, line: 2, type: !18, align: 32)\n!18 = !DIBasicType(name: \"DINT\", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)\n!19 = !DILocation(line: 2, column: 17, scope: !4)\n!20 = !DILocation(line: 12, column: 17, scope: !4)\n!21 = !DILocation(line: 9, column: 18, scope: !4)\n!22 = !DILocation(line: 10, column: 12, scope: !4)\n!23 = !DILocation(line: 13, column: 19, scope: !4)\n!24 = !DILocation(line: 14, column: 19, scope: !4)\n!25 = !DILocation(line: 15, column: 19, scope: !4)\n!26 = !DILocation(line: 17, column: 20, scope: !4)\n!27 = !DILocation(line: 18, column: 20, scope: !4)\n!28 = !DILocation(line: 19, column: 20, scope: !4)\n; ModuleID = '__init___testproject'\nsource_filename = \"__init___testproject\"\n\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]\n\ndefine void @__init___testproject() !dbg !4 {\nentry:\n  ret void, !dbg !9\n}\n\n!llvm.module.flags = !{!0, !1}\n!llvm.dbg.cu = !{!2}\n\n!0 = !{i32 2, !\"Dwarf Version\", i32 4}\n!1 = !{i32 2, !\"Debug Info Version\", i32 3}\n!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: \"RuSTy Structured text Compiler\", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)\n!3 = !DIFile(filename: \"__init___testproject\", directory: \"src\")\n!4 = distinct !DISubprogram(name: \"__init___testproject\", linkageName: \"__init___testproject\", scope: !5, file: !5, type: !6, scopeLine: 1, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !8)\n!5 = !DIFile(filename: \"<internal>\", directory: \"\")\n!6 = !DISubroutineType(flags: DIFlagPublic, types: !7)\n!7 = !{null}\n!8 = !{}\n!9 = !DILocation(line: 0, scope: !4)"}}
