---
source: src/codegen/tests/debug_tests/expression_debugging.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

define i32 @myFunc() !dbg !4 {
entry:
  %myFunc = alloca i32, align 4, !dbg !8
  call void @llvm.dbg.declare(metadata i32* %myFunc, metadata !9, metadata !DIExpression()), !dbg !11
  store i32 0, i32* %myFunc, align 4, !dbg !8
  br i1 true, label %condition_body, label %branch, !dbg !12

condition_body:                                   ; preds = %entry
  store i32 1, i32* %myFunc, align 4, !dbg !13
  br label %continue, !dbg !13

branch:                                           ; preds = %entry
  br i1 false, label %condition_body1, label %else, !dbg !14

condition_body1:                                  ; preds = %branch
  store i32 1, i32* %myFunc, align 4, !dbg !15
  br label %continue, !dbg !15

else:                                             ; preds = %branch
  store i32 1, i32* %myFunc, align 4, !dbg !16
  br label %continue, !dbg !16

continue:                                         ; preds = %else, %condition_body1, %condition_body
  store i32 1, i32* %myFunc, align 4, !dbg !17
  %myFunc_ret = load i32, i32* %myFunc, align 4, !dbg !17
  ret i32 %myFunc_ret, !dbg !17
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Dwarf Version", i32 5}
!1 = !{i32 2, !"Debug Info Version", i32 3}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!3 = !DIFile(filename: "main", directory: "src")
!4 = distinct !DISubprogram(name: "myFunc", linkageName: "myFunc", scope: !3, file: !3, line: 2, type: !5, scopeLine: 3, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !7)
!5 = !DISubroutineType(flags: DIFlagPublic, types: !6)
!6 = !{null}
!7 = !{}
!8 = !DILocation(line: 3, column: 12, scope: !4)
!9 = !DILocalVariable(name: "myFunc", scope: !4, file: !3, line: 2, type: !10, align: 32)
!10 = !DIBasicType(name: "DINT", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)
!11 = !DILocation(line: 2, column: 17, scope: !4)
!12 = !DILocation(line: 3, column: 15, scope: !4)
!13 = !DILocation(line: 4, column: 16, scope: !4)
!14 = !DILocation(line: 5, column: 18, scope: !4)
!15 = !DILocation(line: 6, column: 16, scope: !4)
!16 = !DILocation(line: 8, column: 16, scope: !4)
!17 = !DILocation(line: 10, column: 12, scope: !4)

