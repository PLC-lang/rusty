---
source: src/codegen/tests/debug_tests/expression_debugging.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"
target datalayout = "[filtered]"
target triple = "[filtered]"

define i32 @myFunc(i16* %0) !dbg !4 {
entry:
  %myFunc = alloca i32, align 4
  %x = alloca i16*, align 8
  call void @llvm.dbg.declare(metadata i16** %x, metadata !12, metadata !DIExpression()), !dbg !13
  store i16* %0, i16** %x, align 8
  call void @llvm.dbg.declare(metadata i32* %myFunc, metadata !14, metadata !DIExpression()), !dbg !16
  store i32 0, i32* %myFunc, align 4
  %deref = load i16*, i16** %x, align 8, !dbg !17
  %load_x = load i16, i16* %deref, align 2, !dbg !17
  %1 = sext i16 %load_x to i32, !dbg !17
  %tmpVar = add i32 %1, 2, !dbg !17
  store i32 %tmpVar, i32* %myFunc, align 4, !dbg !17
  %myFunc_ret = load i32, i32* %myFunc, align 4, !dbg !18
  ret i32 %myFunc_ret, !dbg !18
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Dwarf Version", i32 5}
!1 = !{i32 2, !"Debug Info Version", i32 3}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!3 = !DIFile(filename: "<internal>", directory: "src")
!4 = distinct !DISubprogram(name: "myFunc", linkageName: "myFunc", scope: !5, file: !5, line: 2, type: !6, scopeLine: 6, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !11)
!5 = !DIFile(filename: "<internal>", directory: "")
!6 = !DISubroutineType(flags: DIFlagPublic, types: !7)
!7 = !{null, !8}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "__AUTO_DEREF____auto_pointer_to_INT", scope: !3, file: !3, baseType: !9, align: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__auto_pointer_to_INT", baseType: !10, size: 64, align: 64, dwarfAddressSpace: 1)
!10 = !DIBasicType(name: "INT", size: 16, encoding: DW_ATE_signed, flags: DIFlagPublic)
!11 = !{}
!12 = !DILocalVariable(name: "x", scope: !4, file: !5, line: 4, type: !8)
!13 = !DILocation(line: 4, column: 12, scope: !4)
!14 = !DILocalVariable(name: "myFunc", scope: !4, file: !5, line: 2, type: !15, align: 32)
!15 = !DIBasicType(name: "DINT", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)
!16 = !DILocation(line: 2, column: 17, scope: !4)
!17 = !DILocation(line: 6, column: 12, scope: !4)
!18 = !DILocation(line: 7, column: 8, scope: !4)
