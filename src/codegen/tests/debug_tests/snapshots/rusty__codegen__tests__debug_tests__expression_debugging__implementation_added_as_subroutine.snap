---
source: src/codegen/tests/debug_tests/expression_debugging.rs
expression: result
---
; ModuleID = '<internal>'
source_filename = "<internal>"

%myPrg = type {}
%myFb = type {}

@myPrg_instance = global %myPrg zeroinitializer, !dbg !0
@__myFb__init = unnamed_addr constant %myFb zeroinitializer, !dbg !5

define i32 @myFunc() !dbg !13 {
entry:
  %myFunc = alloca i32, align 4, !dbg !16
  call void @llvm.dbg.declare(metadata i32* %myFunc, metadata !17, metadata !DIExpression()), !dbg !19
  store i32 0, i32* %myFunc, align 4, !dbg !16
  %myFunc_ret = load i32, i32* %myFunc, align 4, !dbg !16
  ret i32 %myFunc_ret, !dbg !16
}

define void @myPrg(%myPrg* %0) !dbg !20 {
entry:
  call void @llvm.dbg.declare(metadata %myPrg* %0, metadata !23, metadata !DIExpression()), !dbg !24
  ret void, !dbg !24
}

define void @myFb(%myFb* %0) !dbg !25 {
entry:
  call void @llvm.dbg.declare(metadata %myFb* %0, metadata !28, metadata !DIExpression()), !dbg !29
  ret void, !dbg !29
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!8, !9}
!llvm.dbg.cu = !{!10}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "myPrg", scope: !2, file: !2, line: 4, type: !3, isLocal: false, isDefinition: true)
!2 = !DIFile(filename: "<internal>", directory: "")
!3 = !DICompositeType(tag: DW_TAG_structure_type, name: "myPrg", scope: !2, file: !2, line: 4, flags: DIFlagPublic, elements: !4, identifier: "myPrg")
!4 = !{}
!5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
!6 = distinct !DIGlobalVariable(name: "__myFb__init", scope: !2, file: !2, line: 6, type: !7, isLocal: false, isDefinition: true)
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "myFb", scope: !2, file: !2, line: 6, flags: DIFlagPublic, elements: !4, identifier: "myFb")
!8 = !{i32 2, !"Dwarf Version", i32 5}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = distinct !DICompileUnit(language: DW_LANG_C, file: !11, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !12, splitDebugInlining: false)
!11 = !DIFile(filename: "<internal>", directory: "src")
!12 = !{!0, !5}
!13 = distinct !DISubprogram(name: "myFunc", linkageName: "myFunc", scope: !2, file: !2, line: 2, type: !14, scopeLine: 3, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !4)
!14 = !DISubroutineType(flags: DIFlagPublic, types: !15)
!15 = !{null}
!16 = !DILocation(line: 3, column: 8, scope: !13)
!17 = !DILocalVariable(name: "myFunc", scope: !13, file: !2, line: 2, type: !18, align: 32)
!18 = !DIBasicType(name: "DINT", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)
!19 = !DILocation(line: 2, column: 17, scope: !13)
!20 = distinct !DISubprogram(name: "myPrg", linkageName: "myPrg", scope: !2, file: !2, line: 4, type: !21, scopeLine: 5, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !4)
!21 = !DISubroutineType(flags: DIFlagPublic, types: !22)
!22 = !{null, !3}
!23 = !DILocalVariable(name: "myPrg", scope: !20, file: !2, line: 5, type: !3)
!24 = !DILocation(line: 5, column: 8, scope: !20)
!25 = distinct !DISubprogram(name: "myFb", linkageName: "myFb", scope: !2, file: !2, line: 6, type: !26, scopeLine: 7, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !4)
!26 = !DISubroutineType(flags: DIFlagPublic, types: !27)
!27 = !{null, !7}
!28 = !DILocalVariable(name: "myFb", scope: !25, file: !2, line: 7, type: !7)
!29 = !DILocation(line: 7, column: 8, scope: !25)
; ModuleID = '__initializers'
source_filename = "__initializers"

%myPrg = type {}
%myFb = type {}

@myPrg_instance = external global %myPrg
@__myFb__init = external global %myFb

define void @__init_myprg(%myPrg* %0) {
entry:
  %self = alloca %myPrg*, align 8
  store %myPrg* %0, %myPrg** %self, align 8
  ret void
}

declare void @myPrg(%myPrg*)

define void @__init_myfb(%myFb* %0) {
entry:
  %self = alloca %myFb*, align 8
  store %myFb* %0, %myFb** %self, align 8
  ret void
}

declare void @myFb(%myFb*)
; ModuleID = '__init___testproject'
source_filename = "__init___testproject"

%myPrg = type {}

@myPrg_instance = external global %myPrg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___testproject, i8* null }]

define void @__init___testproject() {
entry:
  call void @__init_myprg(%myPrg* @myPrg_instance)
  ret void
}

declare void @__init_myprg(%myPrg*)

declare void @myPrg(%myPrg*)
