---
source: src/codegen/tests/debug_tests/expression_debugging.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@utf08_literal_0 = private unnamed_addr constant [6 x i8] c"hello\00"

define void @myFunc([81 x i8]* %0) !dbg !3 {
entry:
  %myFunc = alloca [81 x i8]*, align 8, !dbg !7
  store [81 x i8]* %0, [81 x i8]** %myFunc, align 8, !dbg !7
  call void @llvm.dbg.declare(metadata [81 x i8]** %myFunc, metadata !8, metadata !DIExpression()), !dbg !14
  %deref = load [81 x i8]*, [81 x i8]** %myFunc, align 8, !dbg !7
  %1 = bitcast [81 x i8]* %deref to i8*, !dbg !7
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 ptrtoint ([81 x i8]* getelementptr ([81 x i8], [81 x i8]* null, i32 1) to i64), i1 false), !dbg !7
  %deref1 = load [81 x i8]*, [81 x i8]** %myFunc, align 8, !dbg !7
  %2 = bitcast [81 x i8]* %deref1 to i8*, !dbg !7
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @utf08_literal_0, i32 0, i32 0), i32 6, i1 false), !dbg !7
  ret void, !dbg !7
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #2

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #1 = { argmemonly nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly nofree nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Dwarf Version", i32 5}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "main", directory: "src")
!3 = distinct !DISubprogram(name: "myFunc", linkageName: "myFunc", scope: !2, file: !2, line: 2, type: !4, scopeLine: 3, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !6)
!4 = !DISubroutineType(flags: DIFlagPublic, types: !5)
!5 = !{null}
!6 = !{}
!7 = !DILocation(line: 3, column: 12, scope: !3)
!8 = !DILocalVariable(name: "myFunc", scope: !3, file: !2, line: 2, type: !9)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__ref_to_STRING", baseType: !10, size: 64, align: 64, dwarfAddressSpace: 1)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 80, align: 64, elements: !12)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_UTF, flags: DIFlagPublic)
!12 = !{!13}
!13 = !DISubrange(count: 80, lowerBound: 0)
!14 = !DILocation(line: 2, column: 17, scope: !3)

