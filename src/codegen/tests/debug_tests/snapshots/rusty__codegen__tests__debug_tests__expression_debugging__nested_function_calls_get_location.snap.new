---
source: src/codegen/tests/debug_tests/expression_debugging.rs
assertion_line: 119
expression: result
---
; ModuleID = 'main'
source_filename = "main"

define i32 @myFunc(i32 %0) !dbg !3 {
entry:
  %x = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x, metadata !7, metadata !DIExpression()), !dbg !8
  store i32 %0, i32* %x, align 4
  %myFunc = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %myFunc, metadata !9, metadata !DIExpression()), !dbg !10
  store i32 0, i32* %myFunc, align 4
  %call = call i32 @myFunc(i32 1), !dbg !11
  %call1 = call i32 @myFunc(i32 %call), !dbg !12
  %myFunc_ret = load i32, i32* %myFunc, align 4, !dbg !12
  ret i32 %myFunc_ret, !dbg !12
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "main", directory: "")
!2 = !{}
!3 = distinct !DISubprogram(name: "myFunc", linkageName: "myFunc", scope: !1, file: !1, line: 1, type: !4, scopeLine: 1, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4 = !DISubroutineType(flags: DIFlagPublic, types: !5)
!5 = !{null, !6}
!6 = !DIBasicType(name: "dint", size: 32, encoding: DW_ATE_signed, flags: DIFlagPublic)
!7 = !DILocalVariable(name: "x", scope: !1, file: !1, line: 2, type: !6)
!8 = !DILocation(line: 2, column: 18, scope: !3)
!9 = !DILocalVariable(name: "myFunc", scope: !1, file: !1, line: 1, type: !6, align: 32)
!10 = !DILocation(line: 1, column: 17, scope: !3)
!11 = !DILocation(line: 4, column: 19, scope: !3)
!12 = !DILocation(line: 4, column: 12, scope: !3)

