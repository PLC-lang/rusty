---
source: src/validation/tests/enum_validation_test.rs
expression: diagnostics
---
note: Consider replacing `0` with `State.Idle`
   ┌─ <internal>:18:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
18 │                 localState := 0;
   │                               ^ Consider replacing `0` with `State.Idle`

note: Consider replacing `100` with `State.Working`
   ┌─ <internal>:19:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
19 │                 localState := 100;
   │                               ^^^ Consider replacing `100` with `State.Working`

note: Consider replacing `0` with `red`
   ┌─ <internal>:24:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
24 │                 color := 0;
   │                          ^ Consider replacing `0` with `red`

note: Consider replacing `1` with `green`
   ┌─ <internal>:25:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
25 │                 color := 1;
   │                          ^ Consider replacing `1` with `green`

note: Consider replacing `2` with `blue`
   ┌─ <internal>:26:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
26 │                 color := 2;
   │                          ^ Consider replacing `2` with `blue`

note: Consider replacing `State.Idle` with `red`
   ┌─ <internal>:28:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
28 │                 color := State.Idle;    // State.Idle == 0 == Color.Red
   │                          ^^^^^^^^^^ Consider replacing `State.Idle` with `red`

note: Consider replacing `red` with `State.Idle`
   ┌─ <internal>:29:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
29 │                 localState := red;      // Color.Red  == 0 == State.Idle
   │                               ^^^ Consider replacing `red` with `State.Idle`

note: Consider replacing `validReferenceForEnum` with `red`
   ┌─ <internal>:31:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
31 │                 color := validReferenceForEnum; // We still want an error here, because no const-expr
   │                          ^^^^^^^^^^^^^^^^^^^^^ Consider replacing `validReferenceForEnum` with `red`

note: Consider replacing `validReferenceForEnum` with `State.Idle`
   ┌─ <internal>:32:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
32 │                 localState := validReferenceForEnum;
   │                               ^^^^^^^^^^^^^^^^^^^^^ Consider replacing `validReferenceForEnum` with `State.Idle`

error: `99` is an invalid value for enum `(red := 0, green := 1, blue := 2)`
   ┌─ <internal>:38:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
38 │                 color := 99;
   │                          ^^ `99` is an invalid value for enum `(red := 0, green := 1, blue := 2)`

error: `State.Working` is an invalid value for enum `(red := 0, green := 1, blue := 2)`
   ┌─ <internal>:39:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
39 │                 color := State.Working;
   │                          ^^^^^^^^^^^^^ `State.Working` is an invalid value for enum `(red := 0, green := 1, blue := 2)`

error: `invalidReferenceForEnum` is an invalid value for enum `(red := 0, green := 1, blue := 2)`
   ┌─ <internal>:40:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
40 │                 color := invalidReferenceForEnum;
   │                          ^^^^^^^^^^^^^^^^^^^^^^^ `invalidReferenceForEnum` is an invalid value for enum `(red := 0, green := 1, blue := 2)`

error: Value evaluated at run-time, use an enum variant from `(red := 0, green := 1, blue := 2)`
   ┌─ <internal>:41:26
   │
 8 │                     color       : (red := 0, green := 1, blue := 2);
   │                                   --------------------------------- see also
   ·
41 │                 color := foo(); // Value of `foo()` unknown, might be outside of variants range
   │                          ^^^^^^ Value evaluated at run-time, use an enum variant from `(red := 0, green := 1, blue := 2)`

error: `99` is an invalid value for enum `State`
   ┌─ <internal>:43:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
43 │                 localState := 99;
   │                               ^^ `99` is an invalid value for enum `State`

error: `green` is an invalid value for enum `State`
   ┌─ <internal>:44:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
44 │                 localState := green;
   │                               ^^^^^ `green` is an invalid value for enum `State`

error: `blue` is an invalid value for enum `State`
   ┌─ <internal>:45:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
45 │                 localState := blue;
   │                               ^^^^ `blue` is an invalid value for enum `State`

error: `invalidReferenceForEnum` is an invalid value for enum `State`
   ┌─ <internal>:46:31
   │
 2 │         TYPE State : (Idle := 0, Working := 100); END_TYPE
   │              ----- see also
   ·
46 │                 localState := invalidReferenceForEnum;
   │                               ^^^^^^^^^^^^^^^^^^^^^^^ `invalidReferenceForEnum` is an invalid value for enum `State`


