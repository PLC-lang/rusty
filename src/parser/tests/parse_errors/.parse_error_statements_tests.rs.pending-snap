{"run_id":"1690370414-617601367","line":365,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"nested_if_with_missing_end_if","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":365,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    IfStatement {\n        blocks: [\n            ConditionalBlock {\n                condition: LiteralBool {\n                    value: false,\n                },\n                body: [\n                    IfStatement {\n                        blocks: [\n                            ConditionalBlock {\n                                condition: LiteralBool {\n                                    value: true,\n                                },\n                                body: [\n                                    Assignment {\n                                        left: ReferenceExpr {\n                                            kind: Member(\n                                                Reference {\n                                                    name: \"x\",\n                                                },\n                                            ),\n                                            base: None,\n                                        },\n                                        right: ReferenceExpr {\n                                            kind: Member(\n                                                Reference {\n                                                    name: \"y\",\n                                                },\n                                            ),\n                                            base: None,\n                                        },\n                                    },\n                                ],\n                            },\n                        ],\n                        else_block: [],\n                    },\n                    Assignment {\n                        left: ReferenceExpr {\n                            kind: Member(\n                                Reference {\n                                    name: \"y\",\n                                },\n                            ),\n                            base: None,\n                        },\n                        right: ReferenceExpr {\n                            kind: Member(\n                                Reference {\n                                    name: \"x\",\n                                },\n                            ),\n                            base: None,\n                        },\n                    },\n                ],\n            },\n        ],\n        else_block: [],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    IfStatement {\n        blocks: [\n            ConditionalBlock {\n                condition: LiteralBool {\n                    value: false,\n                },\n                body: [\n                    IfStatement {\n                        blocks: [\n                            ConditionalBlock {\n                                condition: LiteralBool {\n                                    value: true,\n                                },\n                                body: [\n                                    Assignment {\n                                        left: Reference {\n                                            name: \"x\",\n                                        },\n                                        right: Reference {\n                                            name: \"y\",\n                                        },\n                                    },\n                                ],\n                            },\n                        ],\n                        else_block: [],\n                    },\n                    Assignment {\n                        left: Reference {\n                            name: \"y\",\n                        },\n                        right: Reference {\n                            name: \"x\",\n                        },\n                    },\n                ],\n            },\n        ],\n        else_block: [],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":642,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"nested_repeat_with_missing_condition_and_end_repeat","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":642,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    RepeatLoopStatement {\n        condition: EmptyStatement,\n        body: [\n            RepeatLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"x\",\n                            },\n                        ),\n                        base: None,\n                    },\n                    right: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"y\",\n                            },\n                        ),\n                        base: None,\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"y\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n            },\n        ],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    RepeatLoopStatement {\n        condition: EmptyStatement,\n        body: [\n            RepeatLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: Reference {\n                        name: \"x\",\n                    },\n                    right: Reference {\n                        name: \"y\",\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: Reference {\n                    name: \"y\",\n                },\n                right: Reference {\n                    name: \"x\",\n                },\n            },\n        ],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":452,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"nested_for_with_missing_end_for","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":452,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    ForLoopStatement {\n        counter: ReferenceExpr {\n            kind: Member(\n                Reference {\n                    name: \"x\",\n                },\n            ),\n            base: None,\n        },\n        start: LiteralInteger {\n            value: 1,\n        },\n        end: LiteralInteger {\n            value: 2,\n        },\n        by_step: None,\n        body: [\n            ForLoopStatement {\n                counter: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n                start: LiteralInteger {\n                    value: 1,\n                },\n                end: LiteralInteger {\n                    value: 2,\n                },\n                by_step: None,\n                body: [\n                    Assignment {\n                        left: ReferenceExpr {\n                            kind: Member(\n                                Reference {\n                                    name: \"y\",\n                                },\n                            ),\n                            base: None,\n                        },\n                        right: ReferenceExpr {\n                            kind: Member(\n                                Reference {\n                                    name: \"x\",\n                                },\n                            ),\n                            base: None,\n                        },\n                    },\n                ],\n            },\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"y\",\n                        },\n                    ),\n                    base: None,\n                },\n            },\n        ],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    ForLoopStatement {\n        counter: Reference {\n            name: \"x\",\n        },\n        start: LiteralInteger {\n            value: 1,\n        },\n        end: LiteralInteger {\n            value: 2,\n        },\n        by_step: None,\n        body: [\n            ForLoopStatement {\n                counter: Reference {\n                    name: \"x\",\n                },\n                start: LiteralInteger {\n                    value: 1,\n                },\n                end: LiteralInteger {\n                    value: 2,\n                },\n                by_step: None,\n                body: [\n                    Assignment {\n                        left: Reference {\n                            name: \"y\",\n                        },\n                        right: Reference {\n                            name: \"x\",\n                        },\n                    },\n                ],\n            },\n            Assignment {\n                left: Reference {\n                    name: \"x\",\n                },\n                right: Reference {\n                    name: \"y\",\n                },\n            },\n        ],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":929,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"case_body_with_missing_semicolon","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":929,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    CaseStatement {\n        selector: ReferenceExpr {\n            kind: Member(\n                Reference {\n                    name: \"x\",\n                },\n            ),\n            base: None,\n        },\n        case_blocks: [\n            ConditionalBlock {\n                condition: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"y\",\n                        },\n                    ),\n                    base: None,\n                },\n                body: [\n                    Assignment {\n                        left: ReferenceExpr {\n                            kind: Member(\n                                Reference {\n                                    name: \"y\",\n                                },\n                            ),\n                            base: None,\n                        },\n                        right: ReferenceExpr {\n                            kind: Member(\n                                Reference {\n                                    name: \"z\",\n                                },\n                            ),\n                            base: None,\n                        },\n                    },\n                ],\n            },\n        ],\n        else_block: [],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    CaseStatement {\n        selector: Reference {\n            name: \"x\",\n        },\n        case_blocks: [\n            ConditionalBlock {\n                condition: Reference {\n                    name: \"y\",\n                },\n                body: [\n                    Assignment {\n                        left: Reference {\n                            name: \"y\",\n                        },\n                        right: Reference {\n                            name: \"z\",\n                        },\n                    },\n                ],\n            },\n        ],\n        else_block: [],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":823,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"nested_while_with_missing_end_while","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":823,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    WhileLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"x\",\n                    },\n                ),\n                base: None,\n            },\n            right: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"y\",\n                    },\n                ),\n                base: None,\n            },\n        },\n        body: [\n            WhileLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"x\",\n                            },\n                        ),\n                        base: None,\n                    },\n                    right: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"y\",\n                            },\n                        ),\n                        base: None,\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"y\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n            },\n        ],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    WhileLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: Reference {\n                name: \"x\",\n            },\n            right: Reference {\n                name: \"y\",\n            },\n        },\n        body: [\n            WhileLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: Reference {\n                        name: \"x\",\n                    },\n                    right: Reference {\n                        name: \"y\",\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: Reference {\n                    name: \"y\",\n                },\n                right: Reference {\n                    name: \"x\",\n                },\n            },\n        ],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":880,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"while_with_missing_do","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":880,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    WhileLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"x\",\n                    },\n                ),\n                base: None,\n            },\n            right: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"y\",\n                    },\n                ),\n                base: None,\n            },\n        },\n        body: [\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"y\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n            },\n        ],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    WhileLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: Reference {\n                name: \"x\",\n            },\n            right: Reference {\n                name: \"y\",\n            },\n        },\n        body: [\n            Assignment {\n                left: Reference {\n                    name: \"y\",\n                },\n                right: Reference {\n                    name: \"x\",\n                },\n            },\n        ],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":583,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"nested_repeat_with_missing_until_end_repeat","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":583,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    RepeatLoopStatement {\n        condition: EmptyStatement,\n        body: [\n            RepeatLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"x\",\n                            },\n                        ),\n                        base: None,\n                    },\n                    right: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"y\",\n                            },\n                        ),\n                        base: None,\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"y\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n            },\n        ],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    RepeatLoopStatement {\n        condition: EmptyStatement,\n        body: [\n            RepeatLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: Reference {\n                        name: \"x\",\n                    },\n                    right: Reference {\n                        name: \"y\",\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: Reference {\n                    name: \"y\",\n                },\n                right: Reference {\n                    name: \"x\",\n                },\n            },\n        ],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":700,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"nested_repeat_with_missing_end_repeat","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":700,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    RepeatLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"x\",\n                    },\n                ),\n                base: None,\n            },\n            right: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"y\",\n                    },\n                ),\n                base: None,\n            },\n        },\n        body: [\n            RepeatLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"x\",\n                            },\n                        ),\n                        base: None,\n                    },\n                    right: ReferenceExpr {\n                        kind: Member(\n                            Reference {\n                                name: \"y\",\n                            },\n                        ),\n                        base: None,\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"y\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n            },\n        ],\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    RepeatLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: Reference {\n                name: \"x\",\n            },\n            right: Reference {\n                name: \"y\",\n            },\n        },\n        body: [\n            RepeatLoopStatement {\n                condition: BinaryExpression {\n                    operator: Equal,\n                    left: Reference {\n                        name: \"x\",\n                    },\n                    right: Reference {\n                        name: \"y\",\n                    },\n                },\n                body: [\n                    EmptyStatement,\n                ],\n            },\n            Assignment {\n                left: Reference {\n                    name: \"y\",\n                },\n                right: Reference {\n                    name: \"x\",\n                },\n            },\n        ],\n    },\n]"}}
{"run_id":"1690370414-617601367","line":764,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"while_with_missing_semicolon_in_body","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":764,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    WhileLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"x\",\n                    },\n                ),\n                base: None,\n            },\n            right: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"y\",\n                    },\n                ),\n                base: None,\n            },\n        },\n        body: [\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: LiteralInteger {\n                    value: 3,\n                },\n            },\n        ],\n    },\n    Assignment {\n        left: ReferenceExpr {\n            kind: Member(\n                Reference {\n                    name: \"y\",\n                },\n            ),\n            base: None,\n        },\n        right: ReferenceExpr {\n            kind: Member(\n                Reference {\n                    name: \"x\",\n                },\n            ),\n            base: None,\n        },\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    WhileLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: Reference {\n                name: \"x\",\n            },\n            right: Reference {\n                name: \"y\",\n            },\n        },\n        body: [\n            Assignment {\n                left: Reference {\n                    name: \"x\",\n                },\n                right: LiteralInteger {\n                    value: 3,\n                },\n            },\n        ],\n    },\n    Assignment {\n        left: Reference {\n            name: \"y\",\n        },\n        right: Reference {\n            name: \"x\",\n        },\n    },\n]"}}
{"run_id":"1690370414-617601367","line":524,"new":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","snapshot_name":"repeat_with_missing_semicolon_in_body","metadata":{"source":"src/parser/tests/parse_errors/parse_error_statements_tests.rs","assertion_line":524,"expression":"format!(\"{:#?}\", unit.implementations [0].statements)"},"snapshot":"[\n    RepeatLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"x\",\n                    },\n                ),\n                base: None,\n            },\n            right: ReferenceExpr {\n                kind: Member(\n                    Reference {\n                        name: \"y\",\n                    },\n                ),\n                base: None,\n            },\n        },\n        body: [\n            Assignment {\n                left: ReferenceExpr {\n                    kind: Member(\n                        Reference {\n                            name: \"x\",\n                        },\n                    ),\n                    base: None,\n                },\n                right: LiteralInteger {\n                    value: 3,\n                },\n            },\n        ],\n    },\n    Assignment {\n        left: ReferenceExpr {\n            kind: Member(\n                Reference {\n                    name: \"y\",\n                },\n            ),\n            base: None,\n        },\n        right: ReferenceExpr {\n            kind: Member(\n                Reference {\n                    name: \"x\",\n                },\n            ),\n            base: None,\n        },\n    },\n]"},"old":{"module_name":"rusty__parser__tests__parse_errors__parse_error_statements_tests","metadata":{},"snapshot":"[\n    RepeatLoopStatement {\n        condition: BinaryExpression {\n            operator: Equal,\n            left: Reference {\n                name: \"x\",\n            },\n            right: Reference {\n                name: \"y\",\n            },\n        },\n        body: [\n            Assignment {\n                left: Reference {\n                    name: \"x\",\n                },\n                right: LiteralInteger {\n                    value: 3,\n                },\n            },\n        ],\n    },\n    Assignment {\n        left: Reference {\n            name: \"y\",\n        },\n        right: Reference {\n            name: \"x\",\n        },\n    },\n]"}}
