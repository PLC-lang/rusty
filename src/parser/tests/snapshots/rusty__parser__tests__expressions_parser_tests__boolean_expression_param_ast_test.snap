---
source: src/parser/tests/expressions_parser_tests.rs
expression: statement
---
BinaryExpression {
    operator: And,
    left: ReferenceExpr {
        kind: Member(
            Identifier {
                name: "a",
            },
        ),
        base: None,
    },
    right: ParenExpression {
        expression: BinaryExpression {
            operator: Xor,
            left: UnaryExpression {
                operator: Not,
                value: ParenExpression {
                    expression: BinaryExpression {
                        operator: Or,
                        left: ReferenceExpr {
                            kind: Member(
                                Identifier {
                                    name: "b",
                                },
                            ),
                            base: None,
                        },
                        right: ReferenceExpr {
                            kind: Member(
                                Identifier {
                                    name: "c",
                                },
                            ),
                            base: None,
                        },
                    },
                },
            },
            right: ReferenceExpr {
                kind: Member(
                    Identifier {
                        name: "d",
                    },
                ),
                base: None,
            },
        },
    },
}
