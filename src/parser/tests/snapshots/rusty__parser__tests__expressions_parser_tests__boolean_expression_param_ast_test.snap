---
source: src/parser/tests/expressions_parser_tests.rs
expression: statement
---
BinaryExpression {
    operator: And,
    left: ReferenceExpr {
        kind: Member(
            Reference {
                name: "a",
            },
        ),
        base: None,
    },
    right: BinaryExpression {
        operator: Xor,
        left: UnaryExpression {
            operator: Not,
            value: BinaryExpression {
                operator: Or,
                left: ReferenceExpr {
                    kind: Member(
                        Reference {
                            name: "b",
                        },
                    ),
                    base: None,
                },
                right: ReferenceExpr {
                    kind: Member(
                        Reference {
                            name: "c",
                        },
                    ),
                    base: None,
                },
            },
        },
        right: ReferenceExpr {
            kind: Member(
                Reference {
                    name: "d",
                },
            ),
            base: None,
        },
    },
}
