---
source: src/parser/tests/variable_parser_tests.rs
assertion_line: 206
expression: "format!(\"{:?}\", result)"

---
CompilationUnit { global_vars: [], units: [POU { name: "main", variable_blocks: [VariableBlock { variables: [Variable { name: "a", data_type: DataTypeReference { referenced_type: "INT" }, address: Some(HardwareAccess { direction: Input, access: Template, address: [], location: SourceRange { range: 36..42 } }) }, Variable { name: "b", data_type: DataTypeReference { referenced_type: "INT" }, address: Some(HardwareAccess { direction: Output, access: Template, address: [], location: SourceRange { range: 65..71 } }) }, Variable { name: "c", data_type: DataTypeReference { referenced_type: "INT" }, address: Some(HardwareAccess { direction: Memory, access: Template, address: [], location: SourceRange { range: 96..102 } }) }, Variable { name: "d", data_type: DataTypeReference { referenced_type: "INT" }, address: Some(HardwareAccess { direction: Memory, access: Template, address: [], location: SourceRange { range: 96..102 } }) }, Variable { name: "aa", data_type: DataTypeReference { referenced_type: "INT" }, address: Some(HardwareAccess { direction: Input, access: Bit, address: [LiteralInteger { value: 7 }], location: SourceRange { range: 126..133 } }) }, Variable { name: "bb", data_type: DataTypeReference { referenced_type: "INT" }, address: Some(HardwareAccess { direction: Output, access: Byte, address: [LiteralInteger { value: 5 }, LiteralInteger { value: 5 }], location: SourceRange { range: 157..166 } }) }, Variable { name: "cc", data_type: DataTypeReference { referenced_type: "INT" }, address: Some(HardwareAccess { direction: Memory, access: DWord, address: [LiteralInteger { value: 3 }, LiteralInteger { value: 3 }, LiteralInteger { value: 3 }], location: SourceRange { range: 190..201 } }) }], variable_block_type: Local }], pou_type: Program, return_type: None }], implementations: [Implementation { name: "main", type_name: "main", linkage: Internal, pou_type: Program, statements: [], location: SourceRange { range: 227..238 }, overriding: false, generic: false, access: None }], types: [] }
