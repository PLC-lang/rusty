{"run_id":"1757417384-275820415","line":1924,"new":{"module_name":"plc_lowering__tests__inheritance_tests__units_tests","snapshot_name":"function_with_output_used_in_main_by_extension","metadata":{"source":"compiler/plc_lowering/src/tests/inheritance_tests.rs","assertion_line":1924,"expression":"unit"},"snapshot":"Implementation {\n    name: \"foo2\",\n    type_name: \"foo2\",\n    linkage: Internal,\n    pou_type: FunctionBlock,\n    statements: [\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"met1\",\n                    },\n                ),\n                base: Some(\n                    ReferenceExpr {\n                        kind: Member(\n                            Identifier {\n                                name: \"__foo\",\n                            },\n                        ),\n                        base: None,\n                    },\n                ),\n            },\n            parameters: Some(\n                ExpressionList {\n                    expressions: [\n                        Assignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"mandatoryInput\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: LiteralInteger {\n                                value: 0,\n                            },\n                        },\n                        Assignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"optionalInput\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: LiteralInteger {\n                                value: 0,\n                            },\n                        },\n                        OutputAssignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"outputValue\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"x\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                        },\n                    ],\n                },\n            ),\n        },\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"met1\",\n                    },\n                ),\n                base: Some(\n                    ReferenceExpr {\n                        kind: Member(\n                            Identifier {\n                                name: \"__foo\",\n                            },\n                        ),\n                        base: None,\n                    },\n                ),\n            },\n            parameters: Some(\n                ExpressionList {\n                    expressions: [\n                        Assignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"mandatoryInput\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: LiteralInteger {\n                                value: 5,\n                            },\n                        },\n                        OutputAssignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"outputValue\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"x\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                        },\n                    ],\n                },\n            ),\n        },\n    ],\n    location: SourceLocation {\n        span: Range(18:4 - 26:6),\n        file: Some(\n            \"<internal>\",\n        ),\n    },\n    name_location: SourceLocation {\n        span: Range(14:19 - 14:23),\n        file: Some(\n            \"<internal>\",\n        ),\n    },\n    end_location: SourceLocation {\n        span: Range(27:4 - 27:22),\n        file: Some(\n            \"<internal>\",\n        ),\n    },\n    overriding: false,\n    generic: false,\n    access: None,\n}"},"old":{"module_name":"plc_lowering__tests__inheritance_tests__units_tests","metadata":{},"snapshot":""}}
{"run_id":"1757417435-111336542","line":1924,"new":{"module_name":"plc_lowering__tests__inheritance_tests__units_tests","snapshot_name":"function_with_output_used_in_main_by_extension","metadata":{"source":"compiler/plc_lowering/src/tests/inheritance_tests.rs","assertion_line":1924,"expression":"unit"},"snapshot":"Implementation {\n    name: \"main\",\n    type_name: \"main\",\n    linkage: Internal,\n    pou_type: Function,\n    statements: [\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"__init_foo\",\n                    },\n                ),\n                base: None,\n            },\n            parameters: Some(\n                ReferenceExpr {\n                    kind: Member(\n                        Identifier {\n                            name: \"foo_inst\",\n                        },\n                    ),\n                    base: None,\n                },\n            ),\n        },\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"__init_foo2\",\n                    },\n                ),\n                base: None,\n            },\n            parameters: Some(\n                ReferenceExpr {\n                    kind: Member(\n                        Identifier {\n                            name: \"foo2_inst\",\n                        },\n                    ),\n                    base: None,\n                },\n            ),\n        },\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"__user_init_foo\",\n                    },\n                ),\n                base: None,\n            },\n            parameters: Some(\n                ReferenceExpr {\n                    kind: Member(\n                        Identifier {\n                            name: \"foo_inst\",\n                        },\n                    ),\n                    base: None,\n                },\n            ),\n        },\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"__user_init_foo2\",\n                    },\n                ),\n                base: None,\n            },\n            parameters: Some(\n                ReferenceExpr {\n                    kind: Member(\n                        Identifier {\n                            name: \"foo2_inst\",\n                        },\n                    ),\n                    base: None,\n                },\n            ),\n        },\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"foo2_inst\",\n                    },\n                ),\n                base: None,\n            },\n            parameters: None,\n        },\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"met1\",\n                    },\n                ),\n                base: Some(\n                    ReferenceExpr {\n                        kind: Member(\n                            Identifier {\n                                name: \"__foo\",\n                            },\n                        ),\n                        base: Some(\n                            ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"foo2\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                        ),\n                    },\n                ),\n            },\n            parameters: Some(\n                ExpressionList {\n                    expressions: [\n                        Assignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"mandatoryInput\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: LiteralInteger {\n                                value: 1,\n                            },\n                        },\n                        OutputAssignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"outputValue\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"out\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                        },\n                    ],\n                },\n            ),\n        },\n        CallStatement {\n            operator: ReferenceExpr {\n                kind: Member(\n                    Identifier {\n                        name: \"met1\",\n                    },\n                ),\n                base: Some(\n                    ReferenceExpr {\n                        kind: Member(\n                            Identifier {\n                                name: \"foo\",\n                            },\n                        ),\n                        base: None,\n                    },\n                ),\n            },\n            parameters: Some(\n                ExpressionList {\n                    expressions: [\n                        Assignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"mandatoryInput\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: LiteralInteger {\n                                value: 2,\n                            },\n                        },\n                        OutputAssignment {\n                            left: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"outputValue\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                            right: ReferenceExpr {\n                                kind: Member(\n                                    Identifier {\n                                        name: \"out\",\n                                    },\n                                ),\n                                base: None,\n                            },\n                        },\n                    ],\n                },\n            ),\n        },\n    ],\n    location: SourceLocation {\n        span: Range(35:4 - 39:53),\n        file: Some(\n            \"<internal>\",\n        ),\n    },\n    name_location: SourceLocation {\n        span: Range(29:13 - 29:17),\n        file: Some(\n            \"<internal>\",\n        ),\n    },\n    end_location: SourceLocation {\n        span: Range(41:4 - 41:16),\n        file: Some(\n            \"<internal>\",\n        ),\n    },\n    overriding: false,\n    generic: false,\n    access: None,\n}"},"old":{"module_name":"plc_lowering__tests__inheritance_tests__units_tests","metadata":{},"snapshot":""}}
