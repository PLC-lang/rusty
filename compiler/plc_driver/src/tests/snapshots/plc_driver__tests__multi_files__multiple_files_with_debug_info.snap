---
source: compiler/plc_driver/./src/tests/multi_files.rs
expression: "results.join(\"\\n\")"
---
; ModuleID = 'file1.st'
source_filename = "file1.st"

%mainProg = type {}

@mainProg_instance = external global %mainProg, !dbg !0

define i16 @main() !dbg !10 {
entry:
  %main = alloca i16, align 2
  call void @llvm.dbg.declare(metadata i16* %main, metadata !14, metadata !DIExpression()), !dbg !16
  store i16 0, i16* %main, align 2
  call void @mainProg(%mainProg* @mainProg_instance), !dbg !17
  %main_ret = load i16, i16* %main, align 2, !dbg !18
  ret i16 %main_ret, !dbg !18
}

declare !dbg !19 void @mainProg(%mainProg*)

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!5, !6}
!llvm.dbg.cu = !{!7}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "mainProg", scope: !2, file: !2, line: 2, type: !3, isLocal: false, isDefinition: true)
!2 = !DIFile(filename: "file2.st", directory: "")
!3 = !DICompositeType(tag: DW_TAG_structure_type, name: "mainProg", scope: !2, file: !2, line: 2, flags: DIFlagPublic, elements: !4, identifier: "mainProg")
!4 = !{}
!5 = !{i32 2, !"Dwarf Version", i32 5}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = distinct !DICompileUnit(language: DW_LANG_C, file: !8, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !9, splitDebugInlining: false)
!8 = !DIFile(filename: "file1.st", directory: "root")
!9 = !{!0}
!10 = distinct !DISubprogram(name: "main", linkageName: "main", scope: !11, file: !11, line: 2, type: !12, scopeLine: 10, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !4)
!11 = !DIFile(filename: "file1.st", directory: "")
!12 = !DISubroutineType(flags: DIFlagPublic, types: !13)
!13 = !{null}
!14 = !DILocalVariable(name: "main", scope: !10, file: !11, line: 2, type: !15, align: 16)
!15 = !DIBasicType(name: "INT", size: 16, encoding: DW_ATE_signed, flags: DIFlagPublic)
!16 = !DILocation(line: 2, column: 13, scope: !10)
!17 = !DILocation(line: 10, column: 4, scope: !10)
!18 = !DILocation(line: 11, column: 4, scope: !10)
!19 = distinct !DISubprogram(name: "mainProg", linkageName: "mainProg", scope: !2, file: !2, line: 2, type: !20, scopeLine: 5, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !4)
!20 = !DISubroutineType(flags: DIFlagPublic, types: !21)
!21 = !{null, !3}

; ModuleID = 'file2.st'
source_filename = "file2.st"

%mainProg = type {}

@mainProg_instance = global %mainProg zeroinitializer, !dbg !0

define void @mainProg(%mainProg* %0) !dbg !10 {
entry:
  call void @llvm.dbg.declare(metadata %mainProg* %0, metadata !13, metadata !DIExpression()), !dbg !14
  ret void, !dbg !14
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!5, !6}
!llvm.dbg.cu = !{!7}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "mainProg", scope: !2, file: !2, line: 2, type: !3, isLocal: false, isDefinition: true)
!2 = !DIFile(filename: "file2.st", directory: "")
!3 = !DICompositeType(tag: DW_TAG_structure_type, name: "mainProg", scope: !2, file: !2, line: 2, flags: DIFlagPublic, elements: !4, identifier: "mainProg")
!4 = !{}
!5 = !{i32 2, !"Dwarf Version", i32 5}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = distinct !DICompileUnit(language: DW_LANG_C, file: !8, producer: "RuSTy Structured text Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !9, splitDebugInlining: false)
!8 = !DIFile(filename: "file2.st", directory: "root")
!9 = !{!0}
!10 = distinct !DISubprogram(name: "mainProg", linkageName: "mainProg", scope: !2, file: !2, line: 2, type: !11, scopeLine: 5, flags: DIFlagPublic, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !4)
!11 = !DISubroutineType(flags: DIFlagPublic, types: !12)
!12 = !{null, !3}
!13 = !DILocalVariable(name: "mainProg", scope: !10, file: !2, line: 5, type: !3)
!14 = !DILocation(line: 5, column: 4, scope: !10)

; ModuleID = '__initializers'
source_filename = "__initializers"

%mainProg = type {}

@mainProg_instance = external global %mainProg

define void @__init_mainprog(%mainProg* %0) {
entry:
  %self = alloca %mainProg*, align 8
  store %mainProg* %0, %mainProg** %self, align 8
  ret void
}

declare void @mainProg(%mainProg*)

; ModuleID = '__init___TestProject'
source_filename = "__init___TestProject"

%mainProg = type {}

@mainProg_instance = external global %mainProg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___TestProject, i8* null }]

define void @__init___TestProject() {
entry:
  call void @__init_mainprog(%mainProg* @mainProg_instance)
  ret void
}

declare void @__init_mainprog(%mainProg*)

declare void @mainProg(%mainProg*)
