---
source: compiler/plc_driver/./src/tests/multi_files.rs
expression: "results.join(\"\\n\")"
snapshot_kind: text
---
; ModuleID = 'external_file1.st'
source_filename = "external_file1.st"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%mainProg = type {}

@mainProg_instance = external global %mainProg

define i16 @main() {
entry:
  %main = alloca i16, align 2
  store i16 0, i16* %main, align 2
  call void @mainProg(%mainProg* @mainProg_instance)
  %main_ret = load i16, i16* %main, align 2
  ret i16 %main_ret
}

declare void @mainProg(%mainProg*)

; ModuleID = 'external_file2.st'
source_filename = "external_file2.st"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%mainProg = type {}

@mainProg_instance = global %mainProg zeroinitializer

define void @mainProg(%mainProg* %0) {
entry:
  ret void
}

; ModuleID = '__initializers'
source_filename = "__initializers"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%mainProg = type {}

@mainProg_instance = external global %mainProg

define void @__init_mainprog(%mainProg* %0) {
entry:
  %self = alloca %mainProg*, align 8
  store %mainProg* %0, %mainProg** %self, align 8
  ret void
}

declare void @mainProg(%mainProg*)

define void @__user_init_mainProg(%mainProg* %0) {
entry:
  %self = alloca %mainProg*, align 8
  store %mainProg* %0, %mainProg** %self, align 8
  ret void
}

; ModuleID = '__init___TestProject'
source_filename = "__init___TestProject"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%mainProg = type {}

@mainProg_instance = external global %mainProg
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @__init___TestProject, i8* null }]

define void @__init___TestProject() {
entry:
  call void @__init_mainprog(%mainProg* @mainProg_instance)
  call void @__user_init_mainProg(%mainProg* @mainProg_instance)
  ret void
}

declare void @__init_mainprog(%mainProg*)

declare void @mainProg(%mainProg*)

declare void @__user_init_mainProg(%mainProg*)
